import customtkinter as ctk
from PIL.ImageOps import expand
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from PIL import Image
import sqlite3
import hashlib
from datetime import datetime, timedelta
from datetime import date
from datetime import time as Time
import matplotlib.pyplot as plt
import seaborn as sns
import webbrowser
from urllib.parse import quote #pour remplir les champs (destinataire,...) dans une app mail
from tkinter import messagebox

# Couleur
mode_actuel = ctk.get_appearance_mode()
if mode_actuel == "Dark":
    couleur1 = "#3d71a5"
    couleur1_hover = "#4a8bcb"
    couleur2 = "#8CB1C1"
    couleur2_hover = "#ABD1E1"
    couleur_fond = "#131d34"
    couleur_text = "#fbfcfb"
    mode_image = "Logo Sprintia Sombre.png"
else:
    couleur1 = "#4989bc"
    couleur1_hover = "#56a8ea"
    couleur2 = "#B6D8F2"
    couleur2_hover = "#D1EAFD"
    couleur_fond = "#fdfcfa"
    couleur_text = "#3a3a3a"
    mode_image = "Logo Sprintia Clair.png"

# Police d'√©criture
taille1 = 28
taille2 = 20
taille3 = 16
font_principale = "DejaVu Sans"
font_secondaire = "DejaVu Sans Bold"
# Corner Radius
corner1 = 35
corner2 = 5
corner3 = 0
# Bordure
border1 = 2
border2 = 1
# Taille CTkEntry
entry_height = 45
# Taille CTkButton
button_height = 50
button_width = 180

# variables
date_actuelle = date.today()

# heure
maintenant = datetime.now()
heure_actuelle_objet = maintenant.time()

# variable globale
periode_s√©l√©ctionner = "1 semaine"

def sidebar_exercice(account_id):
    boite1 = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w", command=lambda: [vider_fenetre(app), exercice(account_id)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)
def sidebar_performance(account_id):
    boite1 = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), exercice(account_id)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)
def sidebar_outil(account_id):
    boite1 = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), exercice(account_id)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)
def sidebar_param√®tre(account_id):
    boite1 = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), exercice(account_id)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)


def vider_fenetre(app):
    for widget in app.winfo_children():
        widget.destroy()

def fermer_app():
    con.close()
    app.quit()

def password_valide(password):
    SpecialSymbol =['$', '@', '#', '%', '?', '!']
    val = True

    if len(password) < 6:
        messagebox.showerror("Mot de passe invalide", "La longueur doit √™tre d'au moins 6 caract√®res !")
        val = False

    if len(password) > 20:
        messagebox.showerror("Mot de passe invalide", "La longueur ne doit pas d√©passer 20 caract√®res !")
        val = False

    if not any(char.isdigit() for char in password):
        messagebox.showerror("Mot de passe invalide", "Le mot de passe doit contenir au moins un chiffre !")
        val = False

    if not any(char.isupper() for char in password):
        messagebox.showerror("Mot de passe invalide", "Le mot de passe doit contenir au moins une lettre majuscule !")
        val = False

    if not any(char.islower() for char in password):
        messagebox.showerror("Mot de passe invalide", "Le mot de passe doit contenir au moins une lettre minuscule !")
        val = False

    if not any(char in SpecialSymbol for char in password):
        messagebox.showerror("Mot de passe invalide", "Le mot de passe doit contenir au moins un des symboles sp√©ciaux : $@#%?!")
        val = False
    if val:
        return val

def navbar_mon_compte(account_id, mode_actuel):
    sidebar_param√®tre(account_id)
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=20)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Mon compte":
            app.after(0, lambda: [vider_fenetre(app), mon_compte(account_id)])
        elif choix == "Modifier":
            app.after(0, lambda: [vider_fenetre(app), modifier_compte(account_id)])
        elif choix == "Supprimer mon compte":
            app.after(0, lambda: [vider_fenetre(app), supprimer_compte(account_id)])
        elif choix == "Mot de passe oubli√©":
            app.after(0, lambda: [vider_fenetre(app), modifier_password(account_id)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Mon compte", "Modifier", "Supprimer mon compte", "Mot de passe oubli√©"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set(mode_actuel)
    button_back = ctk.CTkButton(master=navbar, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id)])
    button_back.pack(side="left", padx=10)

def aide_objectif(account_id):
    try:
        curseur.execute("SELECT aide FROM Aide_objectif WHERE account_id = ?", (account_id,))
        result = curseur.fetchone()
        if result and result[0] == "fait": # result[0] = parce que fetchone renvoie ('fait',)
            pass
        else:
            appris = "fait"
            curseur.execute("INSERT INTO Aide_objectif (account_id, aide)VALUES (?, ?)", (account_id, appris))
            con.commit()
            messagebox.showinfo("Info sur le menu d√©roulant", "Lorsque tu modifies ton objectif, les menus d√©roulants se r√©initialisent. Pense donc √† s√©lectionner √† nouveau une option pour 'Level Final' et 'Statut de l'objectif', m√™me si tu les avais d√©j√† d√©finis lors de la cr√©ation de l'objectif.")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def aide_comp√©tition(account_id):
    try:
        curseur.execute("SELECT aide FROM Aide_comp√©tition WHERE account_id = ?", (account_id,))
        result = curseur.fetchone()
        if result and result[0] == "fait": # result[0] = parce que fetchone renvoie ('fait',)
            pass
        else:
            appris = "fait"
            curseur.execute("INSERT INTO Aide_comp√©tition (account_id, aide)VALUES (?, ?)", (account_id, appris))
            con.commit()
            messagebox.showinfo("Info sur le menu d√©roulant", "Lorsque tu modifies ta comp√©tition, les menus d√©roulants se r√©initialisent. Pense donc √† s√©lectionner √† nouveau une option pour 'Priorit√©', m√™me si tu l'avais d√©j√† d√©fini lors de la cr√©ation de la comp√©tition.")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def aide_podcast(account_id):
    try:
        curseur.execute("SELECT aide FROM Aide_podcast WHERE account_id = ?", (account_id,))
        result = curseur.fetchone()
        if result and result[0] == "fait": # result[0] = parce que fetchone renvoie ('fait',)
            pass
        else:
            appris = "fait"
            curseur.execute("INSERT INTO Aide_podcast (account_id, aide)VALUES (?, ?)", (account_id, appris))
            con.commit()
            messagebox.showinfo("Pas envie de lire le patch note ? Pas de probl√®me ! On a une solution pour vous.", "D√©couvrez toutes les nouveaut√©s de la mise √† jour Sprintia 3.1 en √©coutant notre Podcast.")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def aide_bienvenue(account_id):
    try:
        curseur.execute("SELECT aide FROM Aide_bienvenue WHERE account_id = ?", (account_id,))
        result = curseur.fetchone()
        if result and result[0] == "fait": # result[0] = parce que fetchone renvoie ('fait',)
            pass
        else:
            appris = "fait"
            curseur.execute("INSERT INTO Aide_bienvenue (account_id, aide)VALUES (?, ?)", (account_id, appris))
            con.commit()
            messagebox.showinfo("Bienvenue dans Sprintia 3.1", "D√©couvre une nouvelle mani√®re de t‚Äôentra√Æner en course √† pied gr√¢ce √† l‚Äôindulgence de course.")
            messagebox.showinfo("Bienvenue dans Sprintia 3.1", "D√©couvre un nouveau mode Course pour l'enregistrement des donn√©es sp√©cifique √† ce sport.")
            messagebox.showinfo("Bienvenue dans Sprintia 3.1", "D√©couvre toutes les nouveaut√©s de Sprintia 3.1 dans le Patch Note dans les param√®tres.")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def aide_rpe(account_id):
    try:
        curseur.execute("SELECT aide FROM Aide_rpe WHERE account_id = ?", (account_id,))
        result = curseur.fetchone()
        if result and result[0] == "fait": # result[0] = parce que fetchone renvoie ('fait',)
            pass
        else:
            appris = "fait"
            curseur.execute("INSERT INTO Aide_rpe (account_id, aide)VALUES (?, ?)", (account_id, appris))
            con.commit()
            messagebox.showinfo("C'est quoi le RPE ?", "Le RPE, c'est une mani√®re subjective de mesurer l'intensit√© de ton entra√Ænement. En gros, tu notes l'effort que tu ressens sur une √©chelle de 1 √† 10.")
            messagebox.showinfo("Information importante", "Pour la distance, utilise un point au lieu d‚Äôune virgule. Par exemple, √©cris 9.62 pour indiquer 9,62 km.")
            messagebox.showinfo("Information importante", "Lorsque tu indiques la dur√©e, il faut arrondir les minutes. Par exemple, si ta s√©ance a dur√© 20 minutes et 44 secondes, tu devras noter 21 !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def a_propos(account_id):
    sidebar_param√®tre(account_id)

    frame_maj = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_maj.pack(pady=10)
    titre_frame = ctk.CTkFrame(master=frame_maj, fg_color="transparent")
    titre_frame.pack(side="left" , pady=10)
    bouton = ctk.CTkFrame(master=frame_maj, fg_color="transparent")
    bouton.pack(side="right", pady=10, padx=(50, 0))

    Titre = ctk.CTkLabel(master=titre_frame ,text="√Ä propos", font=(font_secondaire, taille1))
    Titre.pack(pady=20)
    button_back = ctk.CTkButton(master=bouton, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id)])
    button_back.pack(side="left", padx=5, pady=10)

    frame_slogan = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_slogan.pack(padx=10, pady=(20, 10))
    slogan = ctk.CTkLabel(master=frame_slogan, text="Sprintia est con√ßue pour t'aider avant et apr√®s un entra√Ænement",
                          font=(font_principale, taille2))
    slogan.pack()

    frame_tout = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner1)
    frame_tout.pack(pady=(20, 10))
    frame_version = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame_version.pack(padx=10, pady=(10, 5))
    frame_dev = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame_dev.pack(padx=10, pady=(5, 10))

    version = ctk.CTkLabel(master=frame_version, text="Version Sprintia : ",
                          font=(font_principale, taille2), text_color=couleur1)
    version.pack(side="left", padx=10, pady=5)
    num_version = ctk.CTkLabel(master=frame_version, text="3.1 | Version Septembre 2025",
                          font=(font_principale, taille2), text_color=couleur1)
    num_version.pack(side="left", padx=10, pady=5)
    nom_dev = ctk.CTkLabel(master=frame_dev, text="Sprintia est d√©velopp√© par Gabriel Chapet",
                          font=(font_principale, taille2), text_color=couleur1)
    nom_dev.pack(side="right", padx=10, pady=5)

    conteneur = ctk.CTkFrame(master=app, fg_color=couleur_fond, corner_radius=corner1,
                             border_width=border1, border_color=couleur1)
    conteneur.pack(fill="x", expand=True, padx=25, pady=10)
    sous_titre= ctk.CTkLabel(master=conteneur, text="Pourquoi j'ai cr√©√© Sprintia ?", font=(font_secondaire, taille2))
    sous_titre.pack(pady=10)
    pourquoi = ctk.CTkLabel(master=conteneur, text="J'ai lanc√© Sprintia parce que pour moi, on n'a pas besoin de d√©penser des fortunes pour avoir de la qualit√©. C'est un peu comme avec" \
                        " les montres connect√©es : on ne devrait pas √™tre oblig√© d'acheter la toute derni√®re et la plus ch√®re pour pouvoir profiter des derni√®res fonctionnalit√©s." \
                        " De plus, certains constructeurs de montre connect√©es ce permettre de mettre un abonnement pour pouvoir b√©nifici√© de tout les fonctionnalit√©s !" \
                        " Du coup, j'ai d√©cid√© de cr√©er Sprintia pour faire les choses √† ma mani√®re !",
                        font=(font_principale, taille3), wraplength=950)
    pourquoi.pack(padx=10)
    sous_titre2= ctk.CTkLabel(master=conteneur, text="Qui suis-je ?", font=(font_secondaire, taille2))
    sous_titre2.pack(pady=10)
    quisuisje = ctk.CTkLabel(master=conteneur, 
                            text="J'adore le sport, la tech et l'imformatique. Ce que j'adore dans le sport," \
                            " c'est les algorithmes qui vont m'aider √† m'entra√Æner et √† progresser dans mon sport, sans avoir de coach." \
                            " Je d√©veloppe Sprintia pour vous aider √† vous entra√Æner gratuitement sans mat√©riel. Le seul mat√©riel requis" \
                            " pour faire fonctionner les algorithmes c'est une montre avec un chrono ou m√™me un smartphone peut suffire pour utiliser Sprintia." \
                            " Mais pour avoir un suivi plus complet, tu peux utiliser ton t√©l√©phone pour le GPS en course, v√©lo au moins tu pourras int√©grer plus de donn√©es" \
                            " dans Sprintia !",
                            font=(font_principale, taille3),  wraplength=950)
    quisuisje.pack(padx=10, pady=10)

def verifier_pause(account_id):
    #AND date_fin IS NULL = Cible uniquement les pause non termin√©s.
    curseur.execute("""SELECT type FROM Pauses_v2 WHERE account_id = ? AND date_fin IS NULL""", (account_id,))
    result = curseur.fetchone()
    return result[0] if result else None

def supprimer_activit√©(account_id, p√©riode_str):
    vider_fenetre(app)
    sidebar_exercice(account_id)

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=(20, 10))
    carte_connexion = ctk.CTkFrame(master=app, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(pady=(20, 5), padx=20) 

    Titre = ctk.CTkLabel(master=frame, text="Supprimer une activit√©", 
                font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    app.bind('<Return>', lambda event: supression(account_id))
    choix_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="ID de l'activit√© √† supprimer", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    choix_entry.pack(pady=10, side="left", padx=10)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack()
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=5)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
            curseur.execute("SELECT id_activit√©, sport, date_activit√©, dur√©e, rpe FROM Activit√© WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC", (account_id, p√©riode_str))
            activites = curseur.fetchall()

            headers = ["ID", "Sport", "Date", "Dur√©e", "RPE"]

            for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=15, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)
            if activites:
                for row_idx, activite in enumerate(activites):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 2:
                            date_activit√© = datetime.strptime(data, '%Y-%m-%d')
                            data = date_activit√©.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=15, pady=15, sticky="ew")
            else:
                pas_donnees = ctk.CTkLabel(master=tableau_frame, text="Aucune activit√© enregistr√©e pour cette p√©riode.", font=(font_principale, taille1))
                pas_donnees.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de l'historique !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, veuillez r√©essayer !")
    def supression(account_id):
            choix = choix_entry.get().strip()
            try:
                choix_id_saisi = int(choix)
                ids_objectifs_disponibles = [obj[0] for obj in activites]

                if choix_id_saisi in ids_objectifs_disponibles:
                    objectif_id_db = choix_id_saisi
                    curseur.execute("DELETE FROM Activit√© WHERE id_activit√© = ? AND account_id = ?", (objectif_id_db, account_id))
                    con.commit()
                    messagebox.showinfo("Suppression r√©ussie", "Activit√© supprim√©e avec succ√®s.")
                    vider_fenetre(app)
                    exercice(account_id)
                else:
                    messagebox.showerror("Erreur", "L'ID de l'activit√© saisie n'existe pas ou n'appartient pas √† votre compte.")
                    return
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la suppression de l'activit√©.")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, veuillez r√©essayer.")
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: supression(account_id))
    button_check.pack(side="left", padx=2, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: [vider_fenetre(app), exercice(account_id)])
    button_retour.pack(side="left", padx=2, pady=20)

def ajouter_activit√©_course(account_id):
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}
    Options_climat = {"Normal": 0, "Chaud": 1, "Froid": 2, "Difficile": 3}
    Options_type = ["Normal", "Endurance", "Fractionn√©", "Sp√©cifique", "Trail", "Ultrafond", "Comp√©tition"]

    sidebar_exercice(account_id)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(pady=20)
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=(0, 10))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter une activit√©",
                font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_int√©rieur(account_id)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_musculation(account_id)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_fooball(account_id)])
        else:
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_course(account_id)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Ext√©rieur", "Int√©rieur", "Course", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover,
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Course")
    bouton_retour = ctk.CTkButton(master=navbar, text="üîô Retour", corner_radius=corner2, fg_color=couleur2, hover_color=couleur2_hover,
                                height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                command=lambda: [vider_fenetre(app), exercice(account_id)])
    bouton_retour.pack(side="left", padx=10)

    frame_activit√© = ctk.CTkFrame(master=app, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(padx=10, pady=(10, 0))
    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=10, pady=(20, 10))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=10, pady=10)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=10, pady=(10, 20))
    frame_champs4 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs4.pack(padx=10, pady=(10, 20))
    frame_champs5 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_champs5.pack(padx=10, pady=(40, 10))

    app.bind('<Return>', lambda event: enregistrer())

    date_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=10)
    duree_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Dur√©e (min)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    duree_entry.pack(side="left", padx=10)
    type_entry = ctk.CTkComboBox(master=frame_champs1, values=Options_type, font=(font_principale, taille3), height=button_height,
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    type_entry.pack(side="left", padx=10)
    type_entry.set("Type de s√©ance")

    rpe_label = ctk.CTkLabel(master=frame_champs2, text="RPE", font=(font_principale, taille3), text_color=couleur_text)
    rpe_label.pack(side="left", padx=(75, 0))
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs2, width=400, height=20, from_=1, to=10, number_of_steps=9, command=valeur_rpe,
                              progress_color=couleur1, button_color=couleur1, button_hover_color=couleur1_hover,
                              corner_radius=10, button_length=15, fg_color=couleur_text)
    rpe_entry.pack(side="left", padx=10)
    distance_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Distance (km)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    distance_entry.pack(side="left", padx=(75, 10))

    fatigue_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_fatigue.keys()), font=(font_principale, taille3), height=button_height,
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    fatigue_entry.pack(side="left", padx=10)
    fatigue_entry.set("Fatigue post-entra√Ænement")
    douleur_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_douleur.keys()), font=(font_principale, taille3), height=button_height,
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    douleur_entry.pack(side="left", padx=10)
    douleur_entry.set("Douleur post-entra√Ænement")
    climat_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_climat.keys()), font=(font_principale, taille3), height=button_height,
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    climat_entry.pack(side="left", padx=10)
    climat_entry.set("Climat √† l'entra√Ænement")

    allure_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Allure (ex : 6:00 /km)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    allure_entry.pack(side="left", padx=10)
    denivele_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="D√©nivel√© (m)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    denivele_entry.pack(side="left", padx=10)
    vmax_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Vitesse max (ex : 15.8)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    vmax_entry.pack(side="left", padx=10)

    def enregistrer():
        type = type_entry.get().strip()
        if type == "Type de s√©ance":
            messagebox.showerror("Type manquant", "S√©l√©ctionne un type d'entra√Ænement")
            return
        try:
            date_str = date_entry.get().strip()
            date_obj = datetime.strptime(date_str, '%d-%m-%Y')
            if date_obj > datetime.now():
                messagebox.showerror("Erreur", "La date ne peut pas √™tre dans le futur !")
                return
            date = date_obj.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur", "Format de date invalide ! Utilisez JJ-MM-AAAA ! Avec des tirets !")

        sport = "Course"
        try:
            duree = int(duree_entry.get().strip())
            if duree <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur", "Dur√©e invalide (entier positif requis) !")
            return
        try:
            rpe = int(rpe_entry.get())
            if not 1 <= rpe <= 10:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur", "RPE invalide (1-10 requis) !")
            return
        douleur = Options_douleur.get(douleur_entry.get().strip())
        climat = Options_climat.get(climat_entry.get().strip())
        fatigue = Options_fatigue.get(fatigue_entry.get().strip())
        if fatigue is None:
            messagebox.showerror("Fatigue est vide", "La fatigue est obligatoire !")
            return
        if douleur is None:
            messagebox.showerror("Douleur est vide", "La douleur est obligatoire !")
            return
        if climat is None:
            messagebox.showerror("Climat est vide", "Le climat est obligatoire !")
            return
        distance = None
        denivele = None
        allure = allure_entry.get().strip()
        if not allure:
            allure = None
        vmax_str = vmax_entry.get().strip()
        if not vmax_str:
            vmax = None
        else:
            try:
                vmax = float(vmax_str)
                if vmax <= 0:
                    messagebox.showerror("Erreur", "La vitesse max doit √™tre sup√©rieure √† 0 !")
                    return
            except ValueError:
                messagebox.showerror("Erreur", "La vitesse max est invalide (nombre positif requis) !")
                return
        try:
            dist_str = distance_entry.get().strip()
            if dist_str:
                distance = float(dist_str)
                if distance <= 0:
                    messagebox.showerror("Erreur", "La distance doit √™tre sup√©rieur √† 0 !")
                    return
        except ValueError:
            messagebox.showerror("Erreur", "Distance invalide (nombre positif requis) !")
            return
        try:
            deniv_str = denivele_entry.get().strip()
            if deniv_str:
                denivele = int(deniv_str)
                if denivele <= 0:
                    messagebox.showerror("Erreur", "Le d√©nivel√© doit √™tre sup√©rieur √† 0. !")
                    return
        except ValueError:
            messagebox.showerror("Erreur", "D√©nivel√© invalide (entier positif requis) !")
            return

        charge_de_base = duree * rpe

        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        modificateurs_climat = [0.95, 1.1, 1.05, 1.2]
        if type == "Normal":
            coef = 1.0
        elif type == "Endurance":
            coef = 1.05
        elif type == "Fractionn√©" or "Sp√©cifique":
            coef = 1.1
        elif type == "Trail" or "Comp√©tition":
            coef = 1.25
        elif type == "Ultrafond":
            coef = 1.30

        charge_d = charge_de_base * modificateurs_douleur[douleur]
        charge_c = charge_d * modificateurs_climat[climat]
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge = (score_fatigue * charge_c)*coef
        try:
            curseur.execute("""INSERT INTO Activit√©_running (date_activit√©, sport, dur√©e, distance, rpe, charge, account_id, nom, d√©nivel√©, allure, vitesse_max) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, distance, rpe, charge, account_id, type, denivele, allure, vmax))
            con.commit()
            curseur.execute("""INSERT INTO Activit√© (date_activit√©, sport, dur√©e, rpe, charge, account_id) VALUES (?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, charge, account_id))
            con.commit()
            messagebox.showinfo("Succ√®s", "Ton activit√© a bien √©t√© enregistr√©e !")
            vider_fenetre(app)
            exercice(account_id)
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de ton activit√©.")
            return
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye.")
            return
    bouton_valider = ctk.CTkButton(master=frame_champs5, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3), command=lambda : enregistrer())
    bouton_valider.pack(side="left", padx=10)

def ajouter_activit√©_int√©rieur(account_id):
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}

    sidebar_exercice(account_id)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")        
    frame1.pack(pady=20)
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=(0, 10))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter une activit√©", 
                font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_int√©rieur(account_id)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_musculation(account_id)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_fooball(account_id)])
        else:
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_course(account_id)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Ext√©rieur", "Int√©rieur", "Course", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Int√©rieur")
    bouton_retour = ctk.CTkButton(master=navbar, text="üîô Retour", corner_radius=corner2, fg_color=couleur2, hover_color=couleur2_hover, 
                                height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                command=lambda: [vider_fenetre(app), exercice(account_id)])
    bouton_retour.pack(side="left", padx=10)

    frame_activit√© = ctk.CTkFrame(master=app, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(padx=10, pady=(10, 0))
    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=10, pady=(20, 10))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=10, pady=10)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=10, pady=(10, 20))
    frame_champs4 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_champs4.pack(padx=10, pady=(40, 10))

    app.bind('<Return>', lambda event: enregistrer())

    date_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=10)
    sport_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Sport", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="left", padx=10)
    duree_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Dur√©e (min)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    duree_entry.pack(side="left", padx=10)

    rpe_label = ctk.CTkLabel(master=frame_champs2, text="RPE", font=(font_principale, taille3), text_color=couleur_text)
    rpe_label.pack(side="left", padx=(75, 0))
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs2, width=400, height=20, from_=1, to=10, number_of_steps=9, command=valeur_rpe,
                              progress_color=couleur1, button_color=couleur1, button_hover_color=couleur1_hover,
                              corner_radius=10, button_length=15, fg_color=couleur_text)
    rpe_entry.pack(side="left", padx=10)
    nom_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Type", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    nom_entry.pack(side="left", padx=(75, 10))

    fatigue_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_fatigue.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    fatigue_entry.pack(side="left", padx=10)
    fatigue_entry.set("Fatigue post-entra√Ænement")

    douleur_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_douleur.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    douleur_entry.pack(side="left", padx=10)
    douleur_entry.set("Douleur post-entra√Ænement")

    def enregistrer():
        nom = nom_entry.get().strip()
        if len(nom) > 20:
            messagebox.showerror("Type trop long", "Le type de ton entra√Ænement fait plus de 20 caract√®res")
            return
        try:
            date_str = date_entry.get().strip()
            date_obj = datetime.strptime(date_str, '%d-%m-%Y')
            if date_obj > datetime.now():
                messagebox.showerror("Erreur", "La date ne peut pas √™tre dans le futur !")
                return
            date = date_obj.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur", "Format de date invalide. Utilisez JJ-MM-AAAA.")
        
        sport = sport_entry.get().strip()
        if not sport:
            messagebox.showerror("Erreur", "Le sport est obligatoire !")
            return 
        try:
            duree = int(duree_entry.get().strip())
            if duree <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur", "Dur√©e invalide (entier positif requis) !")
            return 
        try:
            rpe = int(rpe_entry.get())
            if not 1 <= rpe <= 10:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur", "RPE invalide (1-10 requis) !")
            return
        douleur = Options_douleur.get(douleur_entry.get().strip())
        fatigue = Options_fatigue.get(fatigue_entry.get().strip())
        if fatigue is None:
            messagebox.showerror("Fatigue est vide", "La fatigue est obligatoire !")
            return
        if douleur is None:
            messagebox.showerror("Douleur est vide", "La douleur est obligatoire !")
            return
                                            
        charge_de_base = duree * rpe
        
        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        modificateurs_climat = [0.95, 1.1, 1.05, 1.2]
        
        charge_d = charge_de_base * modificateurs_douleur[douleur]
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge = score_fatigue * charge_d
        try:
            curseur.execute("""INSERT INTO Activit√©_int√©rieur (date_activit√©, sport, dur√©e, rpe, charge, account_id, nom) VALUES (?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, charge, account_id, nom))
            con.commit()
            curseur.execute("""INSERT INTO Activit√© (date_activit√©, sport, dur√©e, rpe, charge, account_id) VALUES (?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, charge, account_id))
            con.commit()
            messagebox.showinfo("Succ√®s", "Ton activit√© a bien √©t√© enregistr√©e !")
            vider_fenetre(app)
            exercice(account_id)
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de ton activit√©.")
            return
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye.")
            return
    bouton_valider = ctk.CTkButton(master=frame_champs4, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3), command=lambda : enregistrer())
    bouton_valider.pack(side="left", padx=10)

def ajouter_activit√©_musculation(account_id):
    Options_matos = ["Poids de corps", "Avec √©quipement"]
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}
    Options_lieu = {"Salle de sport": "salle de sport", "Domicile": "domicile", "Ext√©rieur": "ext√©rieur"}

    sidebar_exercice(account_id)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")        
    frame1.pack(pady=20)
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=(0, 10))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter une activit√©", 
                font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_int√©rieur(account_id)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_musculation(account_id)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_fooball(account_id)])
        else:
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_course(account_id)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Ext√©rieur", "Int√©rieur", "Course", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Musculation")
    bouton_retour = ctk.CTkButton(master=navbar, text="üîô Retour", corner_radius=corner2, fg_color=couleur2, hover_color=couleur2_hover, 
                                height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                command=lambda: [vider_fenetre(app), exercice(account_id)])
    bouton_retour.pack(side="left", padx=10)

    frame_activit√© = ctk.CTkFrame(master=app, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(padx=10, pady=(10, 0))
    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=10, pady=(20, 10))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=10, pady=10)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=10, pady=10)
    frame_champs4 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs4.pack(padx=10, pady=(10, 20))
    frame_champs5 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_champs5.pack(padx=10, pady=(40, 10))

    app.bind('<Return>', lambda event: enregistrer())

    date_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=10)
    duree_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Dur√©e (min)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    duree_entry.pack(side="left", padx=10)
    matos_entry = ctk.CTkComboBox(master=frame_champs1, values=Options_matos, font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    matos_entry.pack(side="left", padx=10)
    matos_entry.set("Type d'entra√Ænement")

    rpe_label = ctk.CTkLabel(master=frame_champs2, text="RPE", font=(font_principale, taille3), text_color=couleur_text)
    rpe_label.pack(side="left", padx=(75, 0))
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs2, width=400, height=20, from_=1, to=10, number_of_steps=9, command=valeur_rpe,
                              progress_color=couleur1, button_color=couleur1, button_hover_color=couleur1_hover,
                              corner_radius=10, button_length=15, fg_color=couleur_text)
    rpe_entry.pack(side="left", padx=10)
    muscle_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Muscle travaill√©", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    muscle_entry.pack(side="left", padx=(75, 10))

    fatigue_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_fatigue.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    fatigue_entry.pack(side="left", padx=10)
    fatigue_entry.set("Fatigue post-entra√Ænement")

    douleur_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_douleur.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    douleur_entry.pack(side="left", padx=10)
    douleur_entry.set("Douleur post-entra√Ænement")
    lieu_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_lieu.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    lieu_entry.pack(side="left", padx=10)
    lieu_entry.set("Lieu de la s√©ance")

    rep_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Nombre total de r√©p√©titions", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    rep_entry.pack(side="left", padx=10)
    serie_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Nombre total de s√©rie", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    serie_entry.pack(side="left", padx=10)
    volume_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Volume total (ex : 5.5 kg)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    volume_entry.pack(side="left", padx=10)

    def enregistrer():
        muscle_travaill√© = muscle_entry.get().strip()
        r√©p√©titions = rep_entry.get().strip()
        s√©rie = serie_entry.get().strip()
        volume = volume_entry.get().strip()
        if volume:
            try:
                volume_total = float(volume)
                if volume_total < 0:
                    raise ValueError
            except ValueError:
                messagebox.showerror("Erreur", "Volume total invalide (entier positif requis) !")
                return
        else:
            volume_total = None
        try:
            date_str = date_entry.get().strip()
            date_obj = datetime.strptime(date_str, '%d-%m-%Y')
            if date_obj > datetime.now():
                messagebox.showerror("Erreur", "La date ne peut pas √™tre dans le futur !")
                return
            date = date_obj.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur", "Format de date invalide. Utilisez JJ-MM-AAAA.")
        
        try:
            duree = int(duree_entry.get().strip())
            if duree <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur", "Dur√©e invalide (entier positif requis) !")
            return 
        try:
            rpe = int(rpe_entry.get())
            if not 1 <= rpe <= 10:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur", "RPE invalide (1-10 requis) !")
            return
        douleur = Options_douleur.get(douleur_entry.get().strip())
        fatigue = Options_fatigue.get(fatigue_entry.get().strip())
        lieu = Options_lieu.get(lieu_entry.get().strip())
        √©quipement = matos_entry.get().strip()
        if fatigue is None:
            messagebox.showerror("Fatigue est vide", "La fatigue est obligatoire !")
            return
        if douleur is None:
            messagebox.showerror("Douleur est vide", "La douleur est obligatoire !")
            return
        if lieu is None:
            messagebox.showerror("Lieu est vide", "Le lieu est obligatoire !")
            return
        if √©quipement is None:
            messagebox.showerror("Le type est vide", "Le type est obligatoire !")
            return
        sport = "Musculation"
                                            
        charge_de_base = duree * rpe
        
        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        if √©quipement == "Avec √©quipement":
            facteur_matos = 1.1
        else:
            facteur_matos = 1.0
        
        charge_d = charge_de_base * modificateurs_douleur[douleur]
        charge_c = charge_d * facteur_matos
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge = score_fatigue * charge_c
        try:
            curseur.execute("""INSERT INTO Activit√©_musculation (date_activit√©, sport, dur√©e, rpe, charge, account_id, muscle_travaill√©, r√©p√©titions, s√©rie, volume, √©quipement, lieu) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, charge, account_id, muscle_travaill√©, r√©p√©titions, s√©rie, volume_total, √©quipement, lieu))
            con.commit()
            curseur.execute("""INSERT INTO Activit√© (date_activit√©, sport, dur√©e, rpe, charge, account_id) VALUES (?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, charge, account_id))
            con.commit()
            messagebox.showinfo("Succ√®s", "Ton activit√© a bien √©t√© enregistr√©e !")
            vider_fenetre(app)
            exercice(account_id)
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de ton activit√©.")
            return
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye.")
            return
    bouton_valider = ctk.CTkButton(master=frame_champs5, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3), command=lambda : enregistrer())
    bouton_valider.pack(side="left", padx=10)

def ajouter_activit√©_fooball(account_id):
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_climat = {"Normal": 0, "Chaud": 1, "Froid": 2, "Difficile": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}
    Options_type = ["Entra√Ænement", "Match", "Tournoi", "City"]

    sidebar_exercice(account_id)

    frame1 = ctk.CTkFrame(master=app, corner_radius=20, fg_color="transparent")        
    frame1.pack(pady=20)
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=(0, 10))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter une activit√©", 
                font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_int√©rieur(account_id)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_musculation(account_id)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_fooball(account_id)])
        else:
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_course(account_id)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Ext√©rieur", "Int√©rieur", "Course", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Football")
    bouton_retour = ctk.CTkButton(master=navbar, text="üîô Retour", corner_radius=corner2, fg_color=couleur2, hover_color=couleur2_hover, 
                                height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                command=lambda: [vider_fenetre(app), exercice(account_id)])
    bouton_retour.pack(side="left", padx=10)

    frame_activit√© = ctk.CTkFrame(master=app, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(padx=10, pady=(10, 0))
    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=10, pady=(20, 10))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=10, pady=10)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=10, pady=10)
    frame_champs4 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs4.pack(padx=10, pady=(10, 20))
    frame_champs5 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_champs5.pack(padx=10, pady=(40, 10))

    app.bind('<Return>', lambda event: enregistrer())

    date_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=10)
    duree_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Dur√©e (min)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    duree_entry.pack(side="left", padx=10)
    type_entry = ctk.CTkComboBox(master=frame_champs1, values=Options_type, font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    type_entry.pack(side="left", padx=10)
    type_entry.set("Type de s√©ance de foot")

    rpe_label = ctk.CTkLabel(master=frame_champs2, text="RPE", font=(font_principale, taille3), text_color=couleur_text)
    rpe_label.pack(side="left", padx=(75, 0))
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs2, width=400, height=20, from_=1, to=10, number_of_steps=9, command=valeur_rpe,
                              progress_color=couleur1, button_color=couleur1, button_hover_color=couleur1_hover,
                              corner_radius=10, button_length=15, fg_color=couleur_text)
    rpe_entry.pack(side="left", padx=10)
    humeur_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Humeur d'apr√®s match", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    humeur_entry.pack(side="left", padx=(75, 10))

    fatigue_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_fatigue.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    fatigue_entry.pack(side="left", padx=10)
    fatigue_entry.set("Fatigue post-entra√Ænement")

    douleur_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_douleur.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    douleur_entry.pack(side="left", padx=10)
    douleur_entry.set("Douleur post-entra√Ænement")
    climat_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_climat.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    climat_entry.pack(side="left", padx=10)
    climat_entry.set("Climat √† l'entra√Ænement")

    but_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Nombre de but", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    but_entry.pack(side="left", padx=10)
    passe_d_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Nombre de passe d√©cisive", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    passe_d_entry.pack(side="left", padx=10)
    score_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Score (ex : 3-2)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    score_entry.pack(side="left", padx=10)

    def enregistrer():
        humeur = humeur_entry.get().strip()
        passe_d√©cisive1 = passe_d_entry.get().strip()
        type_de_s√©ances = type_entry.get().strip()
        score = score_entry.get().strip()
        if humeur:
            pass
        else:
            humeur = None
        if score:
            pass
        else:
            score = None
        if passe_d√©cisive1:
            try:
                passe_d√©cisive = int(passe_d√©cisive1)
                if passe_d√©cisive < 0:
                    raise ValueError
            except ValueError:
                messagebox.showerror("Erreur", "Nombre de passe d√©cisive invalide (entier positif requis) !")
                return
        else:
            passe_d√©cisive = None
        but1 = but_entry.get().strip()
        if but1:
            try:
                but = int(but1)
                if but < 0:
                    raise ValueError
            except ValueError:
                messagebox.showerror("Erreur", "Nombre de but invalide (entier positif requis) !")
                return
        else:
            but = None
        try:
            date_str = date_entry.get().strip()
            date_obj = datetime.strptime(date_str, '%d-%m-%Y')
            if date_obj > datetime.now():
                messagebox.showerror("Erreur", "La date ne peut pas √™tre dans le futur !")
                return
            date = date_obj.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur", "Format de date invalide. Utilisez JJ-MM-AAAA.")
        
        sport = "Football"
        try:
            duree = int(duree_entry.get().strip())
            if duree <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur", "Dur√©e invalide (entier positif requis) !")
            return 
        try:
            rpe = int(rpe_entry.get())
            if not 1 <= rpe <= 10:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur", "RPE invalide (1-10 requis) !")
            return
        douleur = Options_douleur.get(douleur_entry.get().strip())
        climat = Options_climat.get(climat_entry.get().strip())
        fatigue = Options_fatigue.get(fatigue_entry.get().strip())
        if fatigue is None:
            messagebox.showerror("Fatigue est vide", "La fatigue est obligatoire !")
            return
        if douleur is None:
            messagebox.showerror("Douleur est vide", "La douleur est obligatoire !")
            return
        if climat is None:
            messagebox.showerror("Climat est vide", "Le climat est obligatoire !")
            return
        if type_de_s√©ances is None:
            messagebox.showerror("Type de s√©ances de foot est vide", "Le type de s√©ance de foot est obligatoire !")
            return

        if type_de_s√©ances == "Entra√Ænement":  
            coef_foot = 1        
        elif type_de_s√©ances == "Match":
            coef_foot = 1.2
        elif type_de_s√©ances == "City":
            coef_foot = 0.9
        else:  
            coef_foot = 1.4
        charge_de_base = duree * rpe
        
        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        modificateurs_climat = [0.95, 1.1, 1.05, 1.2]
        
        charge_d = charge_de_base * modificateurs_douleur[douleur]
        charge_c = charge_d * modificateurs_climat[climat]
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge_av = score_fatigue * charge_c
        charge =  charge_av*coef_foot
        try:
            curseur.execute("""INSERT INTO Activit√©_football (date_activit√©, sport, dur√©e, rpe, charge, account_id, humeur, but, passe_d√©cisive, type_de_s√©ances, score) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, charge, account_id, humeur, but, passe_d√©cisive, type_de_s√©ances, score))
            con.commit()
            curseur.execute("""INSERT INTO Activit√© (date_activit√©, sport, dur√©e, rpe, charge, account_id) VALUES (?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, charge, account_id))
            con.commit()
            messagebox.showinfo("Succ√®s", "Ton activit√© a bien √©t√© enregistr√©e !")
            vider_fenetre(app)
            exercice(account_id)
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de ton activit√©.")
            return
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye.")
            return
    bouton_valider = ctk.CTkButton(master=frame_champs5, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3), command=lambda : enregistrer())
    bouton_valider.pack(side="left", padx=10)

def ajouter_activit√©_ext√©rieur(account_id):
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_climat = {"Normal": 0, "Chaud": 1, "Froid": 2, "Difficile": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}

    sidebar_exercice(account_id)

    frame1 = ctk.CTkFrame(master=app, corner_radius=20, fg_color="transparent")        
    frame1.pack(pady=20)
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=(0, 10))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter une activit√©", 
                font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_int√©rieur(account_id)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_musculation(account_id)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_fooball(account_id)])
        else:
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_course(account_id)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Ext√©rieur", "Int√©rieur", "Course", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Ext√©rieur")
    bouton_retour = ctk.CTkButton(master=navbar, text="üîô Retour", corner_radius=corner2, fg_color=couleur2, hover_color=couleur2_hover, 
                                height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                command=lambda: [vider_fenetre(app), exercice(account_id)])
    bouton_retour.pack(side="left", padx=10)

    frame_activit√© = ctk.CTkFrame(master=app, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(padx=10, pady=(10, 0))
    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=10, pady=(20, 10))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=10, pady=10)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=10, pady=10)
    frame_champs4 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs4.pack(padx=10, pady=(10, 20))
    frame_champs5 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_champs5.pack(padx=10, pady=(40, 10))

    app.bind('<Return>', lambda event: enregistrer())

    date_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=10)
    sport_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Sport", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="left", padx=10)
    duree_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Dur√©e (min)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    duree_entry.pack(side="left", padx=10)

    rpe_label = ctk.CTkLabel(master=frame_champs2, text="RPE", font=(font_principale, taille3), text_color=couleur_text)
    rpe_label.pack(side="left", padx=(75, 0))
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs2, width=400, height=20, from_=1, to=10, number_of_steps=9, command=valeur_rpe,
                              progress_color=couleur1, button_color=couleur1, button_hover_color=couleur1_hover,
                              corner_radius=10, button_length=15, fg_color=couleur_text)
    rpe_entry.pack(side="left", padx=10)
    nom_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Type", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    nom_entry.pack(side="left", padx=(75, 10))

    fatigue_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_fatigue.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    fatigue_entry.pack(side="left", padx=10)
    fatigue_entry.set("Fatigue post-entra√Ænement")

    douleur_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_douleur.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    douleur_entry.pack(side="left", padx=10)
    douleur_entry.set("Douleur post-entra√Ænement")
    climat_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_climat.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    climat_entry.pack(side="left", padx=10)
    climat_entry.set("Climat √† l'entra√Ænement")

    distance_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Distance (km)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    distance_entry.pack(side="left", padx=10)
    denivele_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="D√©nivel√© (m)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    denivele_entry.pack(side="left", padx=10)

    def enregistrer():
        nom = nom_entry.get().strip()
        if len(nom) > 20:
            messagebox.showerror("Type trop long", "Le type de votre entra√Ænement fait plus de 20 caract√®res")
            return
        try:
            date_str = date_entry.get().strip()
            date_obj = datetime.strptime(date_str, '%d-%m-%Y')
            if date_obj > datetime.now():
                messagebox.showerror("Erreur", "La date ne peut pas √™tre dans le futur !")
                return
            date = date_obj.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur", "Format de date invalide. Utilisez JJ-MM-AAAA.")
            return
        
        sport = sport_entry.get().strip()
        if not sport:
            messagebox.showerror("Erreur", "Le sport est obligatoire !")
            return 
        try:
            duree = int(duree_entry.get().strip())
            if duree <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur", "Dur√©e invalide (entier positif requis) !")
            return 
        try:
            rpe = int(rpe_entry.get())
            if not 1 <= rpe <= 10:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur", "RPE invalide (1-10 requis) !")
            return
        douleur = Options_douleur.get(douleur_entry.get().strip())
        climat = Options_climat.get(climat_entry.get().strip())
        fatigue = Options_fatigue.get(fatigue_entry.get().strip())
        if fatigue is None:
            messagebox.showerror("Fatigue est vide", "La fatigue est obligatoire !")
            return
        if douleur is None:
            messagebox.showerror("Douleur est vide", "La douleur est obligatoire !")
            return
        if climat is None:
            messagebox.showerror("Climat est vide", "Le climat est obligatoire !")
            return
        distance = None
        denivele = None
        try:
            dist_str = distance_entry.get().strip()
            if dist_str:
                distance = float(dist_str)
                if distance <= 0:
                    messagebox.showerror("Erreur", "La distance doit √™tre sup√©rieur √† 0 !")
                    return
        except ValueError:
            messagebox.showerror("Erreur", "Distance invalide (nombre positif requis) !")
            return
        try:
            deniv_str = denivele_entry.get().strip()
            if deniv_str:
                denivele = int(deniv_str)
                if denivele <= 0:
                    messagebox.showerror("Erreur", "Le d√©nivel√© doit √™tre sup√©rieur √† 0. !")
                    return       
        except ValueError:
            messagebox.showerror("Erreur", "D√©nivel√© invalide (entier positif requis) !")
            return
                                            
        charge_de_base = duree * rpe
        
        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        modificateurs_climat = [0.95, 1.1, 1.05, 1.2]
        
        charge_d = charge_de_base * modificateurs_douleur[douleur]
        charge_c = charge_d * modificateurs_climat[climat]
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge = score_fatigue * charge_c
        try:
            curseur.execute("""INSERT INTO Activit√©_ext√©rieur (date_activit√©, sport, dur√©e, distance, rpe, charge, account_id, nom, d√©nivel√©) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, distance, rpe, charge, account_id, nom, denivele))
            con.commit()
            curseur.execute("""INSERT INTO Activit√© (date_activit√©, sport, dur√©e, rpe, charge, account_id) VALUES (?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, charge, account_id))
            con.commit()
            messagebox.showinfo("Succ√®s", "Ton activit√© a bien √©t√© enregistr√©e !")
            vider_fenetre(app)
            exercice(account_id)
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de ton activit√©.")
            return
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye.")
            return
    bouton_valider = ctk.CTkButton(master=frame_champs5, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3), command=lambda : enregistrer())
    bouton_valider.pack(side="left", padx=10)
    aide_rpe(account_id)

def navbar_outil(account_id, mode_actuel):
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=20)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        navigation = {
            "Pr√©dicteur de performance": lambda: [vider_fenetre(app), predicteur_temps(account_id)],
            "Zones cardiaque": lambda: [vider_fenetre(app), zone_fc(account_id)],
            "Calculateur IMC": lambda: [vider_fenetre(app), imc(account_id)],
            "Estimation VMA": lambda: [vider_fenetre(app), VMA(account_id)],
            "Estimation VO2max": lambda: [vider_fenetre(app), VO2MAX(account_id)]
        }
        app.after(0, navigation[choix])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, 
                                            values=["Pr√©dicteur de performance", "Zones cardiaque", "Calculateur IMC", "Estimation VMA", "Estimation VO2max"],
                                            height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                            corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                            fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                            text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set(mode_actuel)

def imc(account_id):
    sidebar_outil(account_id)
    navbar_outil(account_id, "Calculateur IMC")

    carte_connexion = ctk.CTkFrame(master=app, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(pady=(20, 5), padx=20) 
    app.bind('<Return>', lambda event: calcul_imc())
    poids_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Poids (kg)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    poids_entry.pack(pady=(11, 5), padx=10)
    taille_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Taille (cm)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    taille_entry.pack(pady=(5, 11), padx=10)

    cadre_result = ctk.CTkFrame(master=app, corner_radius=corner1, fg_color=couleur2)
    cadre_result.pack(pady=10)

    result = ctk.CTkLabel(master=cadre_result, text="üîí Ta confidentialit√© est notre priorit√© : nous calculons ton temps de course directement sur ton appareil et ne stockons pas cette donn√©e.",
                           font=(font_secondaire, taille2), text_color=couleur1, wraplength=800)
    result.pack(padx=50, pady=10)

    def calcul_imc():
        try:
            poids = float(poids_entry.get().strip())
            taille_conversion = float(taille_entry.get().strip())
            taille = taille_conversion/100

            if poids <= 0 or taille <= 0:
                messagebox.showerror("Erreur", "La taille et le poids doivent √™tre sup√©rieur √† 0 !")
                return
            if not poids or not taille:
                messagebox.showerror("Erreur", "La taille et le poids ne peuvent pas √™tre vides !")
                return
            else:
                imc = poids / (taille ** 2)

                if imc <= 18.5:
                    interpr√©tation = "Ton IMC se situe dans la zone de maigreur. Cela peut correspondre √† ta morphologie naturelle, mais si tu ressens de la fatigue ou des inqui√©tudes, un avis m√©dical peut √™tre utile pour v√©rifier ton √©tat de sant√© global."
                elif 18.5 <= imc <= 24.999:
                    interpr√©tation = "Super, ton IMC est dans la zone de corpulence normale ! C‚Äôest un bon indicateur, mais n‚Äôoublie pas que la sant√© d√©pend aussi d‚Äôautres facteurs comme l‚Äô√©quilibre alimentaire, l‚Äôactivit√© physique et le bien-√™tre g√©n√©ral."
                elif 25 <= imc <= 29.999:
                    interpr√©tation = "Ton IMC est dans la zone de surpoids. Cela peut √™tre li√© √† diff√©rents facteurs (morphologie, mode de vie, g√©n√©tique, etc.). Si tu le souhaites, un professionnel peut t‚Äôaider √† faire le point sur tes habitudes."
                elif 30 <= imc <= 34.999:
                    interpr√©tation = "Ton IMC indique une ob√©sit√© mod√©r√©e. Cela ne d√©finit pas ta sant√© √† lui seul, mais un accompagnement personnalis√© (m√©decin, nutritionniste) peut t‚Äôaider √† trouver un √©quilibre adapt√© √† tes besoins."
                elif 35 <= imc <= 39.999:
                    interpr√©tation = "Ton IMC est dans la zone d‚Äôob√©sit√© s√©v√®re. Pour aborder cela de mani√®re globale, un suivi m√©dical ou nutritionnel peut te soutenir dans une d√©marche adapt√©e et bienveillante."
                elif imc >= 40:
                    interpr√©tation = "Ton IMC se situe dans la zone d‚Äôob√©sit√© de grade 3. C‚Äôest une situation o√π un suivi m√©dical r√©gulier est important pour ta sant√©. N‚Äôh√©site pas √† en parler √† un professionnel."
                else:
                    interpr√©tation = "Une erreur est survenue, r√©esaye plus tard."
                    
                result.configure(text=f"Ton IMC est : {imc:.2f}\n\n{interpr√©tation}",
                                 anchor="w", justify="left")
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye.")
    button_check = ctk.CTkButton(master=app, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: calcul_imc())
    button_check.pack(padx=10, pady=10)

def VO2MAX(account_id):
    sidebar_outil(account_id)
    navbar_outil(account_id, "Estimation VO2max")

    carte_connexion = ctk.CTkFrame(master=app, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(pady=(20, 5), padx=20) 
    app.bind('<Return>', lambda event: calcul_VO2MAX(account_id))
    vma_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="VMA", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    vma_entry.pack(pady=(11, 5), padx=10)

    combo_genre = ctk.CTkComboBox(master=carte_connexion, values=["Homme", "Femme"], font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    combo_genre.pack(pady=5, padx=10)
    combo_genre.set("S√©lectionne ton genre")

    age_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="√Çge", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    age_entry.pack(pady=(5, 11), padx=10)

    cadre_result = ctk.CTkFrame(master=app, corner_radius=corner1, fg_color=couleur2)
    cadre_result.pack(pady=10)

    result = ctk.CTkLabel(master=cadre_result, text="üîí Ta confidentialit√© est notre priorit√© : nous calculons ton temps de course\n directement sur ton appareil et ne stockons pas cette donn√©e.",
                           font=(font_secondaire, taille2), text_color=couleur1)
    result.pack(padx=50, pady=10)

    def calcul_VO2MAX(account_id):
        try:
            vma = float(vma_entry.get().strip())
            age = float(age_entry.get().strip())
            genre = combo_genre.get().strip()

            if vma <= 0:
                messagebox.showerror("Erreur", "La VMA doit √™tre sup√©rieur √† 0 !")
                return
            if age < 14:
                messagebox.showerror("Erreur", "L'√¢ge minimum pour cette fonction est de 14 ans !")
                return
            if not vma or not age:
                messagebox.showerror("Erreur", "La VMA et l'√¢ge ne peuvent pas √™tre vides !")
                return
            else:
                vo2max = vma*3.5
                if genre == "Homme":
                    if 14 <= age <= 17 :
                        if vo2max >= 58:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 54 <= vo2max <= 58:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 50 <= vo2max <= 53:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 46 <= vo2max <= 49:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                    if 18 <= age <= 25 :
                        if vo2max >= 56:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 52 <= vo2max <= 56:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 48 <= vo2max <= 51:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 44 <= vo2max <= 47:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                    if 26 <= age <= 35 :
                        if vo2max >= 51:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 47 <= vo2max <= 51:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 43 <= vo2max <= 46:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 39 <= vo2max <= 42:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                    if 36 <= age <= 45 :
                        if vo2max >= 45:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 41 <= vo2max <= 45:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 37 <= vo2max <= 40:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 33 <= vo2max <= 36:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                    if 46 <= age <= 55 :
                        if vo2max >= 41:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 37 <= vo2max <= 41:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 33 <= vo2max <= 36:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 29 <= vo2max <= 32:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                    if 56 <= age <= 65 :
                        if vo2max >= 37:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 33 <= vo2max <= 37:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 29 <= vo2max <= 32:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 25 <= vo2max <= 28:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                    if age >= 65 :
                        if vo2max >= 33:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 29 <= vo2max <= 33:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 25 <= vo2max <= 28:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 21 <= vo2max <= 24:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                elif genre == "Femme":
                    if 14 <= age <= 17 :
                        if vo2max >= 52:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 48 <= vo2max <= 52:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 44 <= vo2max <= 47:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 40 <= vo2max <= 43:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                    if 18 <= age <= 25 :
                        if vo2max >= 48:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 44 <= vo2max <= 48:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 40 <= vo2max <= 43:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 36 <= vo2max <= 39:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                    if 26 <= age <= 35 :
                        if vo2max >= 42:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 38 <= vo2max <= 42:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 34 <= vo2max <= 37:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 30 <= vo2max <= 33:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                    if 36 <= age <= 45 :
                        if vo2max >= 37:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 33 <= vo2max <= 37:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 29 <= vo2max <= 32:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 25 <= vo2max <= 28:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                    if 46 <= age <= 55 :
                        if vo2max >= 34:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 30 <= vo2max <= 34:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 26 <= vo2max <= 29:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 22 <= vo2max <= 25:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                    if 56 <= age <= 65 :
                        if vo2max >= 30:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 26 <= vo2max <= 30:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 22 <= vo2max <= 25:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 18 <= vo2max <= 21:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                    if age >= 65 :
                        if vo2max >= 27:
                            interpr√©tation = "Sup√©rieur\nTon VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire"
                        elif 23 <= vo2max <= 27:
                            interpr√©tation = "Excellent\nTu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                        elif 19 <= vo2max <= 22:
                            interpr√©tation = "Bon\nTon VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide"
                        elif 15 <= vo2max <= 18:
                            interpr√©tation = "Moyen\nTon VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                        else:
                            interpr√©tation = "Faible\nTon VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                else:
                    interpr√©tation = "Sexe non valide. S√©l√©ctionne 'Homme' ou 'Femme'."
                result.configure(text=f"Ton VO2max est de {vo2max:.2f} mL/min/kg.\n\n{interpr√©tation}", wraplength=800,
                                 anchor="w", justify="left")
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_check = ctk.CTkButton(master=app, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: calcul_VO2MAX(account_id))
    button_check.pack(padx=10, pady=20)

def VMA(account_id):
    sidebar_outil(account_id)
    navbar_outil(account_id, "Estimation VMA")

    Info = ctk.CTkLabel(master=app ,text="Pour une estimation plus pr√©cise, utilise la distance parcourue √† fond en 6 minutes.", font=(font_secondaire, taille2))
    Info.pack(padx=50, pady=10)

    carte_connexion = ctk.CTkFrame(master=app, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(pady=(20, 5), padx=20) 
    app.bind('<Return>', lambda event: calcul_VMA())
    distance_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Distance (km)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    distance_entry.pack(pady=(11, 5), padx=10)
    temps_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Temps (min)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    temps_entry.pack(pady=(5, 11), padx=10)

    cadre_result = ctk.CTkFrame(master=app, corner_radius=corner1, fg_color=couleur2)
    cadre_result.pack(pady=10)

    result = ctk.CTkLabel(master=cadre_result, text="üîí Ta confidentialit√© est notre priorit√© : nous calculons ton temps de course\n directement sur ton appareil et ne stockons pas cette donn√©e.",
                           font=(font_secondaire, taille2), text_color=couleur1)
    result.pack(padx=50, pady=10)

    def calcul_VMA():
        try:
            distance = float(distance_entry.get().strip())
            try:
                temps_autre = int(temps_entry.get().strip())
                temps = temps_autre/60
                if distance <= 0 or temps <=0:
                    messagebox.showerror("Erreur", "La distance et le temps doivent √™tre sup√©rieur √† 0 !")
                    return
                if distance <= 0 or temps <=0:
                    messagebox.showerror("Erreur", "La distance et le temps doivent √™tre sup√©rieur √† 0 !")
                    return
            except ValueError:
                messagebox.showerror("Erreur", "Les minutes doivent √™tre un nombre entier !")
            else:
                vma = distance / temps

                if distance <= 2:
                    vma_estim√©e = vma*1
                elif 2 <= distance <= 3:
                    vma_estim√©e = vma*1.05
                elif 3 <= distance <= 6:
                    vma_estim√©e = vma*1.2
                elif 6 <= distance <= 12:
                    vma_estim√©e = vma*1.45
                elif 12 <= distance <= 25:
                    vma_estim√©e = vma*1.52
                elif 21.0975 <= distance <= 42.195:
                    vma_estim√©e = vma*1.6
                else:
                    vma_estim√©e = vma*1.8

                debut_zone1 = vma_estim√©e * 0.50
                fin_zone1 = vma_estim√©e * 0.60
                Zone1 = f"Zone 1 : R√©cup√©ration active | {debut_zone1:.1f}km/h √† {fin_zone1:.1f}km/h"
                debut_zone2 = vma_estim√©e * 0.60
                fin_zone2 = vma_estim√©e * 0.75
                Zone2 = f"Zone 2 : Fondamentale, base a√©robie | {debut_zone2:.1f}km/h √† {fin_zone2:.1f}km/h"
                debut_zone3 = vma_estim√©e * 0.75
                fin_zone3 = vma_estim√©e * 0.85
                Zone3 = f"Zone 3 : Seuil a√©robie, am√©lioration de l‚Äôendurance| {debut_zone3:.1f}km/h √† {fin_zone3:.1f}km/h"
                debut_zone4 = vma_estim√©e * 0.85
                fin_zone4 = vma_estim√©e * 0.95
                Zone4 = f"Zone 4 :  Seuil ana√©robie, tol√©rance √† l‚Äôeffort intense | {debut_zone4:.1f}km/h √† {fin_zone4:.1f}km/h"
                debut_zone5 = vma_estim√©e * 0.95
                Zone5 = f"Zone 5 : Vitesse maximale a√©robie, puissance maximale | {debut_zone5:.1f}km/h √† {vma_estim√©e:.1f}km/h"

                result.configure(text=f"Ta VMA est de {vma_estim√©e:.2f} km/h.\n\nTes Zones d‚Äôentra√Ænement\n\n{Zone1}\n{Zone2}\n{Zone3}\n{Zone4}\n{Zone5}",
                                 anchor="w", justify="left")
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_check = ctk.CTkButton(master=app, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: calcul_VMA())
    button_check.pack(padx=10, pady=10)

def zone_fc(account_id):
    sidebar_outil(account_id)
    navbar_outil(account_id, "Zones cardiaque")

    carte_connexion = ctk.CTkFrame(master=app, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(pady=(20, 5), padx=20) 
    app.bind('<Return>', lambda event: calcul_zone(account_id))
    age_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="√Çge", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    age_entry.pack(pady=10, padx=10)

    cadre_result = ctk.CTkFrame(master=app, corner_radius=corner1, fg_color=couleur2)
    cadre_result.pack(pady=10)

    result = ctk.CTkLabel(master=cadre_result, text="üîí Ta confidentialit√© est notre priorit√© : nous calculons ton temps de course\n directement sur ton appareil et ne stockons pas cette donn√©e.",
                           font=(font_secondaire, taille2), text_color=couleur1)
    result.pack(padx=50, pady=10)

    def calcul_zone(account_id):
        try:
            age = int(age_entry.get().strip())
            fc_max = 220 - age

            if age <= 0:
                messagebox.showerror("Erreur", "L'√¢ge doit √™tre sup√©rieur √† 0 !")
            if not age:
                messagebox.showerror("Erreur", "L'√¢ge ne peut pas √™tre vide !")
            debut_zone1 = fc_max*0.50
            fin_zone1 = fc_max*0.60
            Zone1 = f"Zone 1 : R√©cup√©ration active - {debut_zone1:.0f}bpm √† {fin_zone1:.0f}bpm"
            debut_zone2 = fc_max*0.60
            fin_zone2 = fc_max*0.70
            Zone2 = f"Zone 2 : Fondamentale, endurance de base | {debut_zone2:.0f}bpm √† {fin_zone2:.0f}bpm"
            debut_zone3 = fc_max*0.70
            fin_zone3 = fc_max*0.80
            Zone3 = f"Zone 3 : Seuil a√©robie, endurance active | {debut_zone3:.0f}bpm √† {fin_zone3:.0f}bpm"
            debut_zone4 = fc_max*0.80
            fin_zone4 = fc_max*0.90
            Zone4 = f"Zone 4 :  Seuil ana√©robie, r√©sistance dure | {debut_zone4:.0f}bpm √† {fin_zone4:.0f}bpm"
            debut_zone5 = fc_max*0.90
            Zone5 = f"Zone 5 : Vitesse maximale a√©robie, puissance maximale | {debut_zone5:.0f}bpm √† {fc_max:.0f}bpm"
            FC_max = f"Fr√©quence cardiaque maximum : {fc_max:.0f}bpm"

            result.configure(text=f"Tes Zones de Fr√©quence Cardiaque\n\n{Zone1}\n{Zone2}\n{Zone3}\n{Zone4}\n{Zone5}\n{FC_max}",
                                 anchor="w", justify="left")
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_check = ctk.CTkButton(master=app, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: calcul_zone(account_id))
    button_check.pack(padx=10, pady=10)

def predicteur_temps(account_id):
    sidebar_outil(account_id)
    navbar_outil(account_id, "Pr√©dicteur de performance")

    Info = ctk.CTkLabel(master=app ,text="N'oublie pas que cette pr√©diction est une estimation bas√©e sur la\nth√©orie"\
                         " et peut varier en fonction de nombreux facteurs\nle jour de la course !", font=(font_secondaire, taille2),
                         text_color=couleur_text)
    Info.pack(padx=50, pady=10)

    carte_connexion = ctk.CTkFrame(master=app, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(pady=(20, 5), padx=20) 
    app.bind('<Return>', lambda event: calcul_temps(account_id))
    vma_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="VMA", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    vma_entry.pack(pady=(11, 5), padx=10)
    distance_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Distance (km)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    distance_entry.pack(pady=(5, 11), padx=10)

    cadre_result = ctk.CTkFrame(master=app, corner_radius=corner1, fg_color=couleur2)
    cadre_result.pack(pady=10)

    result = ctk.CTkLabel(master=cadre_result, text="üîí Ta confidentialit√© est notre priorit√© : nous calculons ton temps de course\n directement sur ton appareil et ne stockons pas cette donn√©e.",
                           font=(font_secondaire, taille2), text_color=couleur1)
    result.pack(padx=50, pady=10)

    def calcul_temps(account_id):
        try:
            distance = float(distance_entry.get().strip())
            vma = float(vma_entry.get().strip())

            if distance <= 0 or vma <=0:
                messagebox.showerror("Erreur", "La distance et le temps doivent √™tre sup√©rieur √† 0 !")
                return
            if not distance or not vma:
                messagebox.showerror("Erreur", "La distance et la vma ne peuvent pas √™tre vides !")
                return
            if distance <= 2:
                vitesse_moyenne = vma*0.98
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"
            elif 2 <= distance <= 3:
                vitesse_moyenne = vma*0.94
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"
            elif 3 <= distance <= 6:
                vitesse_moyenne = vma*0.82
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"
            elif 6 <= distance <= 12:
                vitesse_moyenne = vma*0.77
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"
            elif 12 <= distance <= 25:
                vitesse_moyenne = vma*0.72
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"
            elif 21.0975 <= distance <= 42.195:
                vitesse_moyenne = vma*0.62
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"
            else:
                vitesse_moyenne = vma*0.55
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"

            result.configure(text=f"{interpretation}",
                                 anchor="w", justify="left")
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_check = ctk.CTkButton(master=app, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: calcul_temps(account_id))
    button_check.pack(padx=10, pady=10)

def activer_pause(account_id, type_pause):
    curseur.execute("SELECT id FROM Pauses_v2 WHERE account_id = ? AND date_fin IS NULL", (account_id,))
    try:
        #date('now') pour prendre direct la date aujourd'hui (c'est une fonction SQLite)
        curseur.execute("""INSERT INTO Pauses_v2 (account_id, type, date_debut)VALUES (?, ?, date('now'))""", (account_id, type_pause))
        con.commit()
        messagebox.showinfo("Enregistr√©", f"Pause {type_pause} activ√©e !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", f"Erreur de base de donn√©es lors de l'activation de la pause {type_pause}.")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def arreter_pause(account_id):
    try:
        curseur.execute("""UPDATE Pauses_v2 SET date_fin = date('now')WHERE account_id = ? AND date_fin IS NULL""", (account_id,))
        con.commit()
        messagebox.showinfo("Enregistr√©", "Reprise d'activit√© enregistr√©e !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'activation de la reprise d'activit√©.")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def signaler_bug(account_id):
    sidebar_param√®tre(account_id)

    Titre = ctk.CTkLabel(master=app ,text="Signaler un bug", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    info = ctk.CTkLabel(master=app ,text="üì£ Nous te remercions pour ta contribution au d√©veloppement de Sprintia." \
    "\nPour que le d√©veloppeur puisse bien comprendre le bug, il faudrait d√©tailler\nun maximum le bug que tu as rencontr√©.", 
    font=(font_principale, taille2))
    info.pack(padx=50, pady=(20, 10))

    app.bind('<Return>', lambda event: envoyer())
    avis_entry = ctk.CTkTextbox(master=app, width=700, height=300, corner_radius=corner1, fg_color=couleur2, font=(font_principale, taille3),
                                scrollbar_button_color=couleur1, scrollbar_button_hover_color=couleur1_hover, text_color=couleur1,
                                border_color=couleur1, border_width=border1)
    avis_entry.pack(pady=10, padx=10)
    avis_entry.insert("0.0", "Description du bug :\n")

    def envoyer():
        avis = avis_entry.get("1.0", "end").strip()
        if not avis:
            messagebox.showerror("Description du bug vide", "Veuillez remplir le champs description de bug !")
            return
        #destinataire
        email_receiver = 'gabchap486@gmail.com'
        #objet
        subject = "Rapport de bug"
        body = f"Message de l'utilisateur:\n{avis}"
        mailto_link = f"mailto:{email_receiver}?subject={quote(subject)}&body={quote(body)}"
        try:
            messagebox.showinfo("Premi√®re √©tape termin√©e", "Ton application de mail par d√©faut va s'ouvrir ! Il ne te resteras plus qu'√† cliquer sur envoyer.")
            webbrowser.open(mailto_link)
        except Exception as e:
            messagebox.showerror("Erreur", "Impossible d'ouvrir ton application mail. V√©rifie que tu as une application pour g√©rer tes mails !")
    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: envoyer())
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id)])
    button_retour.pack(side="left", padx=5, pady=20)

def proposer_fonction(account_id):
    sidebar_param√®tre(account_id)

    Titre = ctk.CTkLabel(master=app ,text="Proposer une fonction", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    info = ctk.CTkLabel(master=app ,text="üì£ Nous te remercions pour ta contribution au d√©veloppement de Sprintia." \
                "\nPour que le d√©veloppeur puisse bien comprendre ta demande, il faudrait d√©tailler\nun maximum ton id√©e de fonctionnalit√©",
                font=(font_principale, taille2))
    info.pack(padx=50, pady=(20, 10))

    app.bind('<Return>', lambda event: envoyer())
    avis_entry = ctk.CTkTextbox(master=app, width=700, height=300, corner_radius=corner1, fg_color=couleur2, font=(font_principale, taille3),
                                scrollbar_button_color=couleur1, scrollbar_button_hover_color=couleur1_hover, text_color=couleur1,
                                border_color=couleur1, border_width=border1)
    avis_entry.pack(pady=10, padx=10)
    avis_entry.insert("0.0", "Description de votre fonctionnalit√© :\n")

    def envoyer():
        avis = avis_entry.get("1.0", "end").strip()
        if not avis:
            messagebox.showerror("Proposition de fonctionnalit√© vide", "Veuille √† remplir le champs fonctionnalit√© !")
            return
        #destinataire
        email_receiver = 'gabchap486@gmail.com'
        #objet
        subject = "Proposition de nouvelle fonctionnalit√©"
        body = f"Message de l'utilisateur:\n{avis}"
        mailto_link = f"mailto:{email_receiver}?subject={quote(subject)}&body={quote(body)}"
        try:
            messagebox.showinfo("Premi√®re √©tape termin√©e", "Ton application de mail par d√©faut va s'ouvrir ! Il ne te resteras plus qu'√† cliquer sur envoyer.")
            webbrowser.open(mailto_link)
        except Exception as e:
            messagebox.showerror("Erreur", "Impossible d'ouvrir ton application mail. V√©rifie que tu as une application pour g√©rer tes mails. !")
    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: envoyer())
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id)])
    button_retour.pack(side="left", padx=5, pady=20)

def quoi_de_neuf(account_id):
    sidebar_param√®tre(account_id)

    def podcast_open():
        messagebox.showinfo("Information", "Ton navigateur par d√©faut va s'ouvrir pour que tu puisses √©couter le podcast.")
        webbrowser.open("https://drive.google.com/file/d/1wC3-FAmNuZtU5cx16RAwxUJ633HTNqIC/view?usp=drive_link")

    boite2 = ctk.CTkFrame(app, fg_color=couleur_fond)
    boite2.pack(side="right", expand=True, fill="both")
    header = ctk.CTkFrame(boite2, fg_color="transparent")
    header.pack(pady=10, padx=10)
    conteneur_patch_note = ctk.CTkFrame(boite2, fg_color=couleur2, corner_radius=corner1)
    conteneur_patch_note.pack(expand=True, fill="both", pady=(10, 15), padx=15)
    patch_note = ctk.CTkScrollableFrame(conteneur_patch_note, fg_color="transparent", scrollbar_button_color=couleur1,
                                           scrollbar_button_hover_color=couleur1_hover)
    patch_note.pack(expand=True, fill="both", pady=10, padx=10)

    Titre = ctk.CTkLabel(header, text="Quoi de neuf dans Sprintia 3.1", text_color=couleur_text, font=(font_secondaire, taille1))
    Titre.pack(side="left", padx=5)
    button_back = ctk.CTkButton(header, text="üéôÔ∏è  Podcast", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=podcast_open)
    button_back.pack(side="left", padx=(20, 3))
    button_back = ctk.CTkButton(header, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id)])
    button_back.pack(side="left", padx=(3, 10))

    PatchNote = ctk.CTkLabel(patch_note, font=(font_principale, taille3), text_color=couleur1, wraplength=950, anchor="w", corner_radius=corner1,
        text="""Type : Mise √† jour mineure\nDate de sortie : 31 Ao√ªt 2025\n
    üÜï Nouvelles fonctionnalit√©s
    ‚Ä¢ Option ‚ÄúTous‚Äù : affiche d√©sormais l‚Äôhistorique complet des entra√Ænements.
    ‚Ä¢ "Quoi de neuf dans Sprintia 3.1" : nouvelle section dans les param√®tres (accessible directement dans l‚Äôapp).
    ‚Ä¢ Interpr√©tation de l‚ÄôIMC : ajout d‚Äôune phrase explicative au calculateur.
    ‚Ä¢ Zones de VMA : calcul et affichage par pourcentage, sur le mod√®le des zones de FC.
    ‚Ä¢ Nouveau statut ‚ÄúPas commenc√©‚Äù pour les objectifs.
    ‚Ä¢ Nouvelle raison ‚ÄúSuspendre‚Äù pour la mise en pause des analyses.
    ‚Ä¢ Nouvelle donn√©e ‚ÄúScore‚Äù pour le football.
    ‚Ä¢ Nouveau mode Course pour l'enregistrement de donn√©es sp√©cifique √† la course.
    ‚Ä¢ Indulgence de course : cet algorithme va t'aider √† ajuster ton kilom√©trage des 7 derniers jours pour rester dans une progression optimale.
    ‚Ä¢ Modification compl√®te d‚Äôun objectif ou d‚Äôune comp√©tition via un seul bouton (date, lieu, statut‚Ä¶).\n
    üìä Am√©liorations
    ‚Ä¢ Filtres persistants : m√©morisation des choix (ex. conserver ‚Äú1 mois‚Äù lors du passage d‚ÄôExt√©rieur √† Musculation).
    ‚Ä¢ Conseils et interpr√©tations enrichis dans Charge d‚Äôentra√Ænement.
    ‚Ä¢ Zones de FC : affichage de la FC Max.
    ‚Ä¢ Estimation VO‚ÇÇmax : ajout d‚Äôune interpr√©tation des zones.
    ‚Ä¢ Aide int√©gr√©e : explications sur le diverses choses lors de la premi√®re utilisation de Sprintia.
    ‚Ä¢ Tableaux r√©organis√©s pour plus de coh√©rence.
    ‚Ä¢ Affichage clair en cas d‚Äôabsence de donn√©es dans Objectifs et Comp√©titions (remplace ‚ÄúNone‚Äù ou cellules vides).
    ‚Ä¢ Nettoyage de la base de donn√©es pour plus de rapidit√©.
    ‚Ä¢ Mettre un autre type de pause m√™me si une pause est d√©j√† active (ex : passer de 'blessure' √† 'vacances').
    ‚Ä¢ Programme b√™ta disponible depuis les param√®tres.
    ‚Ä¢ Acc√®s √† un podcast qui pr√©sente les nouveaut√©s de Sprintia.
    ‚Ä¢ Acc√®s aux actu sur Sprintia.
    ‚Ä¢ Sprintia est disponible sur GitHub.
    ‚Ä¢ Apr√®s l‚Äôenregistrement d‚Äôune activit√©, d'un objectif ou d'une comp√©tition, tu reviens automatiquement √† la page pr√©c√©dente ‚Äî pour gagner du temps.\n
    üêõ Corrections de bugs
    ‚Ä¢ Bio trop longue : probl√®me r√©solu dans le profil et la modification de profil.
    ‚Ä¢ Coupure visuelle corrig√©e dans les en-t√™tes et le nom d‚Äôhistorique d‚Äôactivit√© (Ext√©rieur).
    ‚Ä¢ Longueur excessive des noms d‚Äôactivit√© corrig√©e lors de la suppression.
    ‚Ä¢ Diverses corrections d‚Äôorthographe et fautes dans l‚Äôapp.
    ‚Ä¢ Sprintia va d√©sormais te tutoyer pour √™tre plus proche de son utilisateur.
    ‚Ä¢ Gestion des erreurs du format de la date √† l'ajout d'un objectif et d'une comp√©tition.
    ‚Ä¢ Correction de bug lors de la suppression d'une activit√©.
    ‚Ä¢ S√©curit√© des donn√©es am√©lior√©.
    ‚Ä¢ Am√©lioration l√©g√®re de l'interface du graphique de Charge d'entra√Ænement.
    ‚Ä¢ Optimisations du code pour la Side-Bar."""
    , justify="left")
    PatchNote.pack(expand=True, fill="both", padx=5, pady=5)
    aide_podcast(account_id)

def avis (account_id):
    sidebar_param√®tre(account_id)

    Titre = ctk.CTkLabel(master=app ,text="R√©diger un avis", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    info = ctk.CTkLabel(master=app ,text="üì£ Nous te remercions pour ta contribution au d√©veloppement de Sprintia.", 
                        font=(font_principale, taille2))
    info.pack(padx=50, pady=(20, 10))

    app.bind('<Return>', lambda event: envoyer())
    avis_entry = ctk.CTkTextbox(master=app, width=700, height=300, corner_radius=corner1, fg_color=couleur2, font=(font_principale, taille3),
                                scrollbar_button_color=couleur1, scrollbar_button_hover_color=couleur1_hover, text_color=couleur1,
                                border_color=couleur1, border_width=border1)
    avis_entry.pack(pady=10, padx=10)
    avis_entry.insert("0.0", "Votre avis :\n")

    def envoyer():
        avis = avis_entry.get("1.0", "end").strip()
        if not avis:
            messagebox.showerror("Avis vide", "Veuille √† remplir le champs avis !")
            return
        #destinataire
        email_receiver = 'gabchap486@gmail.com'
        #objet
        subject = "Avis sur Sprintia"
        body = f"Message de l'utilisateur:\n{avis}"
        mailto_link = f"mailto:{email_receiver}?subject={quote(subject)}&body={quote(body)}"
        try:
            messagebox.showinfo("Premi√®re √©tape termin√©e", "Ton application de mail par d√©faut va s'ouvrir ! Il ne te resteras plus qu'√† cliquer sur envoyer.")
            webbrowser.open(mailto_link)
        except Exception as e:
            messagebox.showerror("Erreur", "Impossible d'ouvrir ton application mail. V√©rifie que tu as une application pour g√©rer tes mails. !")
    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: envoyer())
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id)])
    button_retour.pack(side="left", padx=5, pady=20)

def mettre_en_pause_les_analyses_depuis_indulgence(account_id):
    sidebar_performance(account_id)

    Titre = ctk.CTkLabel(master=app ,text="Mettre en pause les analyses", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=50, pady=20)
    info = ctk.CTkLabel(master=app ,text="Si tu as besoin de souffler, ou que tu t'es bless√©, tu peux\nmettre en pause les " \
    "analyses pour te reposer et r√©cup√©rer.", font=(font_principale, taille2))
    info.pack(padx=50, pady=(25, 10))

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=10)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))

    curseur.execute("SELECT type FROM Pauses_v2 WHERE account_id = ? AND date_fin IS NULL", (account_id,))
    result = curseur.fetchall()
    if result == []:
        info_statut = ctk.CTkLabel(master=frame, text="Ton statut d'entra√Ænement actuel : Actif", font=(font_principale, taille2))
        info_statut.pack(padx=0, pady=10)
    elif result == [('vacances',)]:
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Ton statut d'entra√Ænement actuel: Vacances", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    elif result == [('blessure',)]:
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Ton statut d'entra√Ænement actuel : Blessure", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    elif result == [('suspendre',)]:
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Ton statut d'entra√Ænement actuel : Suspendre", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    else:
        messagebox.showerror("Erreur", "Statut inconnu !")
    app.bind('<Return>', lambda event: enregistrer_activit√©(account_id))
    options = {"Vacances": "Vacances", "Blessure": "Blessure", "Suspendre": "Suspendre", "Reprendre les analyses": "Reprendre"}
    combo_statut = ctk.CTkComboBox(master=frame, values=list(options.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    combo_statut.pack(pady=10)
    combo_statut.set("S√©l√©ctionne la raison")

    def enregistrer_activit√©(account_id):
        statut_choisi = combo_statut.get()
        statut = options[statut_choisi]
        try:
            if statut == "Vacances":
                activer_pause(account_id, "vacances")
            elif statut == "Blessure":
                activer_pause(account_id, "blessure")
            elif statut == "Suspendre":
                activer_pause(account_id, "suspendre")
            elif statut == "Reprendre":
                arreter_pause(account_id)
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: enregistrer_activit√©(account_id))
    button_check.pack(side="left", padx=5, pady=10)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), indulgence_de_course(account_id)])
    button_retour.pack(side="left", padx=5, pady=10)

def mettre_en_pause_les_analyses(account_id):
    sidebar_performance(account_id)

    Titre = ctk.CTkLabel(master=app ,text="Mettre en pause les analyses", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=50, pady=20)
    info = ctk.CTkLabel(master=app ,text="Si tu as besoin de souffler, ou que tu t'es bless√©, tu peux\nmettre en pause les " \
    "analyses pour te reposer et r√©cup√©rer.", font=(font_principale, taille2))
    info.pack(padx=50, pady=(25, 10))

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=10)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))

    curseur.execute("SELECT type FROM Pauses_v2 WHERE account_id = ? AND date_fin IS NULL", (account_id,))
    result = curseur.fetchall()
    if result == []:
        info_statut = ctk.CTkLabel(master=frame, text="Ton statut d'entra√Ænement actuel : Actif", font=(font_principale, taille2))
        info_statut.pack(padx=0, pady=10)
    elif result == [('vacances',)]:
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Ton statut d'entra√Ænement actuel: Vacances", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    elif result == [('blessure',)]:
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Ton statut d'entra√Ænement actuel : Blessure", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    elif result == [('suspendre',)]:
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Ton statut d'entra√Ænement actuel : Suspendre", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    else:
        messagebox.showerror("Erreur", "Statut inconnu !")
    app.bind('<Return>', lambda event: enregistrer_activit√©(account_id))
    options = {"Vacances": "Vacances", "Blessure": "Blessure", "Suspendre": "Suspendre", "Reprendre les analyses": "Reprendre"}
    combo_statut = ctk.CTkComboBox(master=frame, values=list(options.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    combo_statut.pack(pady=10)
    combo_statut.set("S√©l√©ctionne la raison")

    def enregistrer_activit√©(account_id):
        statut_choisi = combo_statut.get()
        statut = options[statut_choisi]
        try:
            if statut == "Vacances":
                activer_pause(account_id, "vacances")
            elif statut == "Blessure":
                activer_pause(account_id, "blessure")
            elif statut == "Suspendre":
                activer_pause(account_id, "suspendre")
            elif statut == "Reprendre":
                arreter_pause(account_id)
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: enregistrer_activit√©(account_id))
    button_check.pack(side="left", padx=5, pady=10)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
    button_retour.pack(side="left", padx=5, pady=10)

def modifier_password(account_id):
    navbar_mon_compte(account_id, "Mot de passe oubli√©")
    frame2 = ctk.CTkFrame(master=app, fg_color="transparent")        
    frame2.pack(pady=(10, 20))
    carte = ctk.CTkFrame(master=app, corner_radius=corner1, fg_color=couleur2, border_width=border1, border_color=couleur1)        
    carte.pack(pady=(10, 20))

    info = ctk.CTkLabel(master=frame2 ,text="Mot de passe oubli√© ? Pas de panique, remplis le formulaire ci-dessus et ton mot de passe sera modifi√©",
                         font=(font_secondaire, taille2), wraplength=800)
    info.pack(padx=50)

    app.bind('<Return>', lambda event: new_username(account_id))
    password_entry = ctk.CTkEntry(master=carte, placeholder_text="Nouveau mot de passe", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=370, show="*")
    password_entry.pack(pady=(12, 5), padx=11)
    password_entry2 = ctk.CTkEntry(master=carte, placeholder_text="Confirme ton nouveau mot de passe", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=370, show="*")
    password_entry2.pack(pady=(5, 12), padx=11)
    def new_username(account_id):
        new_password = password_entry.get()
        new_password2 = password_entry2.get()
        password_encode = new_password.encode("UTF-8")
        if new_password == new_password2:
            try:
                if not password_entry or not password_entry2:
                    messagebox.showerror("Erreur", "Le mots de passe ne peut pas √™tre vide. Veuille √† remplir tous les champs !")
                    return
                else:
                    if (password_valide(new_password)):
                        sha256 = hashlib.sha256()
                        sha256.update(password_encode)
                        hashed_password = sha256.hexdigest()
                        con.execute("UPDATE Account SET password = ? WHERE id = ?", (hashed_password, account_id))
                        con.commit()
                        messagebox.showinfo("Enregistr√©", "Ton mots de passe √† bien √©t√© modifi√© !")
            except sqlite3.Error as e:
                messagebox.showerror("Erreur base de donn√©es", "Erreur de base de donn√©es lors du changement de ton mot de passe !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
        else:
            messagebox.showerror("Erreur", "Les mots de passe saisis ne correspondent pas !")
    button_check = ctk.CTkButton(master=app, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: new_username(account_id))
    button_check.pack(padx=10, pady=15)

def modifier_compte(account_id):
    navbar_mon_compte(account_id, "Modifier")
    info_pack = ctk.CTkFrame(master=app, corner_radius=corner1, fg_color=couleur2, border_width=border1, border_color=couleur1)
    info_pack.pack(pady=10)

    frame_username = ctk.CTkFrame(master=info_pack, fg_color="transparent")        
    frame_username.pack(padx=12, pady=(10, 5))
    frame_sport = ctk.CTkFrame(master=info_pack, fg_color="transparent")        
    frame_sport.pack(padx=12, pady=5)
    frame_bio = ctk.CTkFrame(master=info_pack, fg_color="transparent")        
    frame_bio.pack(padx=12, pady=(5, 10))

    enregistrer = ctk.CTkFrame(master=app, fg_color="transparent")        
    enregistrer.pack(pady=20)

    curseur.execute("SELECT sport FROM Account WHERE id = ?", (account_id,))
    result = curseur.fetchall()
    sport = result[0][0]
    curseur.execute("SELECT bio FROM Account WHERE id = ?", (account_id,))
    result = curseur.fetchall()
    bio = result[0][0]
    curseur.execute("SELECT username FROM Account WHERE id = ?", (account_id,))
    result = curseur.fetchall()
    username = result[0][0]

    app.bind('<Return>', lambda event: enregistr√©())
    if bio is None:
        width_entry = 275
    else:
        if len(bio) < 30:
            width_entry = 275
        else:
            width_entry = 375
    LABEL_WIDTH = 250
    pseudo_label = ctk.CTkLabel(master=frame_username, text="Ton pseudo : ", font=(font_secondaire, taille2), text_color=couleur1,
                                width=LABEL_WIDTH)
    pseudo_label.pack(side="left")
    pseudo_entry = ctk.CTkEntry(master=frame_username, placeholder_text=f"{username}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=width_entry)
    pseudo_entry.pack(side="left", padx=(0, 10), pady=(12,0))

    sport_label = ctk.CTkLabel(master=frame_sport, text="Ton sport favoris : ", font=(font_secondaire, taille2), text_color=couleur1,
                               width=LABEL_WIDTH)
    sport_label.pack(side="left")
    sport_favoris_entry = ctk.CTkEntry(master=frame_sport, placeholder_text=f"{sport if sport is not None else "Ajoute un sport favoris."}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=width_entry)
    sport_favoris_entry.pack(side="left", padx=(0, 12))

    bio_label = ctk.CTkLabel(master=frame_bio, text="Ta bio : ", font=(font_secondaire, taille2), text_color=couleur1,
                              width=LABEL_WIDTH)
    bio_label.pack(side="left", anchor="n")
    if bio is None:
        bio_entry = ctk.CTkEntry(master=frame_bio, placeholder_text=f"{bio if bio is not None else "Ajoute une bio."}", border_color=couleur1, fg_color=couleur1,
                                      height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                      text_color="white", width=width_entry)
        bio_entry.pack(side="left", padx=(0, 10), pady=(0,11))
    else:
        if len(bio) < 30:
            bio_entry = ctk.CTkEntry(master=frame_bio, placeholder_text=f"{bio}", border_color=couleur1, fg_color=couleur1,
                                          height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                          text_color="white", width=width_entry)
            bio_entry.pack(side="left", padx=(0, 10), pady=(0,11))
        else:
            bio_entry = ctk.CTkTextbox(master=frame_bio, width=width_entry, corner_radius=corner1, fg_color=couleur1,
                                        font=(font_principale, taille3),
                                        scrollbar_button_color=couleur2, scrollbar_button_hover_color=couleur2_hover,
                                        text_color=couleur_text,
                                        border_color=couleur1, border_width=border1)
            bio_entry.pack(pady=(0, 10), padx=(0, 10), fill="both", expand=True)
            bio_entry.insert("0.0", bio)

    def enregistr√©():
        new_username = pseudo_entry.get().strip()
        new_sport = sport_favoris_entry.get().strip()
        try:
            new_bio = bio_entry.get("1.0", "end").strip()
        except: 
            new_bio = bio_entry.get().strip()
        if not new_username:
            new_username = username
        if not new_sport:
            new_sport = sport
        if not new_bio:
            new_bio = bio
        try:
            con.execute("UPDATE Account SET username = ?, sport = ?, bio = ? WHERE id = ?", (new_username, new_sport, new_bio, account_id))
            con.commit()
            messagebox.showinfo("Op√©ration r√©ussi", "Ton compte a √©t√© mis √† jour avec succ√®s !")
        except sqlite3.IntegrityError as e:
            messagebox.showerror("Erreur base de donn√©es", "Ce pseudo est d√©j√† utilis√©, r√©essaye avec un autre pseudo !")
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la mise √† jour de ton compte !")
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_enregistrer = ctk.CTkButton(master=enregistrer, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                         command=lambda: enregistr√©())
    button_enregistrer.pack(side="left", padx=10)

def supprimer_compte(account_id):
    navbar_mon_compte(account_id, "Supprimer mon compte")
    info = ctk.CTkFrame(master=app, fg_color="transparent")
    info.pack()
    carte = ctk.CTkFrame(master=app, corner_radius=corner1, fg_color=couleur2, border_width=border1, border_color=couleur1)        
    carte.pack(pady=(10, 20))

    info = ctk.CTkLabel(master=info ,text="Ton compte est sur le point d'√™tre supprim√©. √áa veut dire que toutes tes donn√©es " \
    "et ton acc√®s √† √† Sprintia sera perdu, et il n'y aura pas de retour en arri√®re possible.", font=(font_secondaire, taille2), wraplength=800)
    info.pack(padx=50, pady=10)
    info2 = ctk.CTkLabel(master=carte ,text="Es-tu vraiment certain de vouloir continuer ?", font=(font_principale, taille2),
                         text_color=couleur1)
    info2.pack(padx=50, pady=10) 

    options_suppr = {"Oui": "oui", "Non" : "non"}

    options = ctk.CTkComboBox(master=carte, values=list(options_suppr.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    options.pack(pady=10)
    options.set("S√©l√©ctionnez Oui ou Non")

    def valider(account_id):
        options_choisi = options.get()
        option = options_suppr[options_choisi]
        if option == "oui":
            try:
                curseur.execute("DELETE FROM Pauses_v2 WHERE account_id = ?", (account_id,))

                curseur.execute("DELETE FROM Objectif WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Comp√©tition WHERE account_id = ?", (account_id,))

                curseur.execute("DELETE FROM Activit√© WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Activit√©_ext√©rieur WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Activit√©_running WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Activit√©_int√©rieur WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Activit√©_musculation WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Activit√©_football WHERE account_id = ?", (account_id,))

                curseur.execute("DELETE FROM Account WHERE id = ?", (account_id,))

                curseur.execute("DELETE FROM Aide_rpe WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Aide_bienvenue WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Aide_objectif WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Aide_comp√©tition WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Aide_podcast WHERE account_id = ?", (account_id,))
                con.commit()
                messagebox.showinfo("Op√©ration r√©ussi", "Compte supprim√© avec succ√®s ! Au revoir !")
                vider_fenetre(app)
                inscription()
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la suppression du compte !")
            except Exception as e:            
                messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye !")
        else:
            messagebox.showinfo("Suppression de compte annul√©", "Ton compte n'a pas √©t√© supprim√© !")
            return
    button_check = ctk.CTkButton(master=app, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: valider(account_id))
    button_check.pack(padx=10, pady=15)

def ajouter_comp√©tition(account_id):
    sidebar_performance(account_id)

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=(20, 10))
    frame_tout = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner1)
    frame_tout.pack()
    frame1 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame1.pack(pady=(10, 5), padx=10)
    frame2 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame2.pack(pady=(5, 5), padx=10)
    frame3 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame3.pack(pady=(5, 10), padx=10)
    frame4 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame4.pack(pady=20)

    Titre = ctk.CTkLabel(master=frame ,text="Ajouter une comp√©tition", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20, side="left")

    option = ["√âv√©nement Principal", "√âv√©nement Secondaire", "√âv√©nement tertiaire"]
    app.bind('<Return>', lambda event: sql_ajout√©(account_id))

    date_entry = ctk.CTkEntry(master=frame1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=(0, 5))    
    sport_entry = ctk.CTkEntry(master=frame1, placeholder_text="Sport", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="right", padx=(5, 0))

    nom_entry = ctk.CTkEntry(master=frame2, placeholder_text="Nom de la comp√©tition", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    nom_entry.pack(side="left", padx=(0, 5))
    objectif_entry = ctk.CTkEntry(master=frame2, placeholder_text="Objectif", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    objectif_entry.pack(side="right", padx=(5, 0))

    lieu_entry = ctk.CTkEntry(master=frame3, placeholder_text="Lieu (optionnel)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    lieu_entry.pack(side="left", padx=(0, 5))
    priorite_entry = ctk.CTkComboBox(master=frame3, values=option, font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    priorite_entry.pack(side="right", padx=(5, 0))
    priorite_entry.set("Priorit√©")

    def sql_ajout√©(account_id):
        nom = nom_entry.get().strip()
        date_str = date_entry.get().strip()
        sport = sport_entry.get().strip()
        objectif = objectif_entry.get().strip()
        lieu_avant = lieu_entry.get().strip()
        priorit√©_avant = priorite_entry.get().strip()
        if priorit√©_avant == "Priorit√©":
            priorit√© = None
        else:
            priorit√© = priorit√©_avant
        if not lieu_avant :
            lieu = None
        else:
            lieu = lieu_avant

        if not nom or not date_str or not sport or not objectif:
            messagebox.showerror("Erreur", "Veuille √† remplir tous les champs !")
            return
        try:
            date_conversion = datetime.strptime(date_str, '%d-%m-%Y')
            date = date_conversion.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur de format de date", "La date doit √™tre au format JJ-MM-AAAA !")
            return
        else:
            try:
                curseur.execute("INSERT INTO Comp√©tition (account_id, nom, date, sport, objectif, lieu, priorit√©) VALUES (?, ?, ?, ?, ?, ?, ?)", (account_id, nom, date, sport, objectif, lieu, priorit√©))
                con.commit()
                messagebox.showinfo("Enregistr√©", "Ta comp√©tition a √©t√© enregistr√©, bonne chance !")
                vider_fenetre(app)
                comp√©tition(account_id)
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de la comp√©tition !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_enregistrer = ctk.CTkButton(master=frame4, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: sql_ajout√©(account_id))
    button_enregistrer.pack(side="left", padx=5)
    button_back = ctk.CTkButton(master=frame4, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), comp√©tition(account_id)])
    button_back.pack(side="left", padx=5)

def supprimer_comp√©tition(account_id):
    sidebar_performance(account_id)

    Titre = ctk.CTkLabel(master=app ,text="Supprimer une comp√©tition", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(pady=10)

    app.bind('<Return>', lambda event: supression(account_id))
    choix_entry = ctk.CTkEntry(master=frame1, placeholder_text="ID de la comp√©tition √† supprimer", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=350)
    choix_entry.pack(pady=10, side="left", padx=10)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
        curseur.execute("SELECT id, sport, nom, date, lieu FROM Comp√©tition WHERE account_id = ?", (account_id,))
        result = curseur.fetchall()
        headers = ["ID", "Sport", "Nom", "Date", "Lieu"]
        for col_idx, header_text in enumerate(headers):
            label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
            label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
            tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if result:
            for row_idx, activite in enumerate(result):
                for col_idx, data in enumerate(activite):
                    if col_idx == 3:
                        date = datetime.strptime(str(data), '%Y-%m-%d')
                        data = date.strftime('%d-%m-%Y')
                    label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                    label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
        else:
            pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©.", font=(font_principale, taille2))
            pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)

        def supression(account_id):
            choix = choix_entry.get().strip()
            try:
                choix_id_saisi = int(choix)
                ids_competitions_disponibles = [comp[0] for comp in result]

                if choix_id_saisi in ids_competitions_disponibles:
                    competition_id_db = choix_id_saisi
                    curseur.execute("DELETE FROM Comp√©tition WHERE id = ? AND account_id = ?", (competition_id_db, account_id))
                    con.commit()
                    messagebox.showinfo("Suppression r√©ussie", "Comp√©tition supprim√©e avec succ√®s.")
                    vider_fenetre(app)
                    comp√©tition(account_id)
                else:
                    messagebox.showerror("Erreur", "L'ID de la comp√©tition saisie n'existe pas ou n'appartient pas √† ton compte !")
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la suppression de la comp√©tition !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes comp√©titions !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: supression(account_id))
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: [vider_fenetre(app), comp√©tition(account_id)])
    button_retour.pack(side="left", padx=5, pady=20)

def modifier_comp√©tition_√©tape2(account_id, result_id):    
    id_modifier = result_id[0][0]
    sidebar_performance(account_id)
    try:
        curseur.execute("SELECT date, sport, nom, objectif, lieu, priorit√© FROM Comp√©tition WHERE id = ? AND account_id = ?",(id_modifier, account_id))
        data_comp√©tition = curseur.fetchall()
        premiere_ligne = data_comp√©tition[0]
        date1 = premiere_ligne[0]
        date_conversion = datetime.strptime(date1, "%Y-%m-%d")
        date_value = date_conversion.strftime("%d-%m-%Y")
        sport_value = premiere_ligne[1]
        nom_value = premiere_ligne[2]
        objectif_value = premiere_ligne[3]
        lieu_value = premiere_ligne[4]
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la modification de ta comp√©tition !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=(20, 10))
    frame_tout = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner1)
    frame_tout.pack()
    frame1 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame1.pack(pady=(10, 5), padx=10)
    frame2 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame2.pack(pady=(5, 5), padx=10)
    frame3 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame3.pack(pady=(5, 10), padx=10)
    frame4 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame4.pack(pady=20)

    Titre = ctk.CTkLabel(master=frame ,text="Modifier une comp√©tition", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20, side="left")

    option = ["√âv√©nement Principal", "√âv√©nement Secondaire", "√âv√©nement tertiaire"]
    app.bind('<Return>', lambda event: sql_ajout√©(account_id))

    date_entry = ctk.CTkEntry(master=frame1, placeholder_text=f"{date_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=(0, 5))    
    sport_entry = ctk.CTkEntry(master=frame1, placeholder_text=f"{sport_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="right", padx=(5, 0))

    nom_entry = ctk.CTkEntry(master=frame2, placeholder_text=f"{nom_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    nom_entry.pack(side="left", padx=(0, 5))
    objectif_entry = ctk.CTkEntry(master=frame2, placeholder_text=f"{objectif_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    objectif_entry.pack(side="right", padx=(5, 0))

    lieu_entry = ctk.CTkEntry(master=frame3, placeholder_text=f"{lieu_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    lieu_entry.pack(side="left", padx=(0, 5))
    priorite_entry = ctk.CTkComboBox(master=frame3, values=option, font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    priorite_entry.pack(side="right", padx=(5, 0))
    priorite_entry.set("Priorit√©")

    def sql_ajout√©(account_id):
        nom = nom_entry.get().strip()
        date_str = date_entry.get().strip()
        sport = sport_entry.get().strip()
        objectif = objectif_entry.get().strip()
        lieu = lieu_entry.get().strip()
        priorit√© = priorite_entry.get().strip()

        if not sport:
            sport = sport_value
        if not date_str:
            date_str = date_value
        if not objectif:
            objectif = objectif_value
        if not nom:
            nom = nom_value
        if not lieu:
            lieu = lieu_value

        if priorit√© == "Priorit√©":
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Priorit√©' !")
            return
        try:
            date_conversion = datetime.strptime(date_str, '%d-%m-%Y')
            date = date_conversion.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur de format de date", "La date doit √™tre au format JJ-MM-AAAA !")
            return
        else:
            try:
                curseur.execute("UPDATE Comp√©tition SET nom = ?, date = ?, sport = ?, objectif = ?, lieu = ?, priorit√© = ? WHERE id = ? AND account_id = ?", 
                                (nom, date, sport, objectif, lieu, priorit√©, id_modifier, account_id))
                con.commit()
                messagebox.showinfo("Enregistr√©", "Ta comp√©tition a √©t√© modifi√©e avec succ√®s !")
                vider_fenetre(app)
                comp√©tition(account_id)
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la modification de la comp√©tition !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_enregistrer = ctk.CTkButton(master=frame4, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: sql_ajout√©(account_id))
    button_enregistrer.pack(side="left", padx=5)
    button_back = ctk.CTkButton(master=frame4, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), modifier_comp√©tition_√©tape1(account_id)])
    button_back.pack(side="left", padx=5)
    aide_comp√©tition(account_id)

def modifier_comp√©tition_√©tape1(account_id):
    sidebar_performance(account_id)

    Titre = ctk.CTkLabel(master=app ,text="Modifier une comp√©tition", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(padx=50, pady=(20, 0))

    app.bind('<Return>', lambda event: valider(account_id))
    choix_entry = ctk.CTkEntry(frame1, placeholder_text="ID de la comp√©tition √† modifier", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=300)
    choix_entry.pack(pady=10, side="left", padx=5)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
        curseur.execute("SELECT id, nom, date, sport, lieu, priorit√© FROM Comp√©tition WHERE account_id = ?", (account_id,))
        result = curseur.fetchall()
        headers = ["ID", "Nom", "Date", "Sport", "Lieu", "Priorit√©"]

        for col_idx, header_text in enumerate(headers): #_idx= index de colonne
            label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                 fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                 height=40, wraplength=130)
            label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
            tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if result:
            for row_idx, activite in enumerate(result):
                for col_idx, data in enumerate(activite):
                    if col_idx == 2:
                        date = datetime.strptime(data, '%Y-%m-%d')
                        data = date.strftime('%d-%m-%Y')
                    label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                         text_color=couleur_text, wraplength=130)
                    label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
        else:
            pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucune comp√©tition futur n'a √©t√© enregistr√©", font=(font_principale, taille1))
            pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)

        def valider(account_id):
            choix = choix_entry.get().strip()
            try:
                if not choix:
                    messagebox.showerror("Erreur", "ID ne peut pas √™tre vide ! Merci de saisir un identifiant !")
                try:
                    id = int(choix)
                    if id < 0:
                        messagebox.showerror("Erreur", "ID doit √™tre un nombre entier positif !")
                        return
                except:
                    messagebox.showerror("Erreur", "ID doit √™tre un nombre entier positif !")
                    return

                curseur.execute("SELECT id FROM Comp√©tition WHERE id = ? AND account_id = ?", (id, account_id))
                result_id = curseur.fetchall()
                if result_id:
                    vider_fenetre(app)
                    modifier_comp√©tition_√©tape2(account_id, result_id)
                else:
                    messagebox.showerror("Erreur", "ID de l'objectif saisi n'existe pas ou n'appartient pas √† ton compte !")
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la modification de la comp√©tition !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes comp√©titions !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, veuillez r√©essayer !")
    button_check = ctk.CTkButton(master=frame_boutons, text="Suivant", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: valider(account_id))
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), comp√©tition(account_id)])
    button_retour.pack(side="left", padx=5, pady=20)

def toute_comp√©tition(account_id):
    sidebar_performance(account_id)

    Titre = ctk.CTkLabel(master=app, text="Toutes les comp√©titions", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=(25, 10))

    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
            curseur.execute("SELECT nom, date, sport, objectif, lieu, priorit√© FROM Comp√©tition WHERE account_id = ? ORDER BY date ASC", (account_id,))
            comp√©tition_result = curseur.fetchall()

            headers = ["Nom", "Date", "Sport", "Objectif", "Lieu", "Priorit√©"]

            for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=15, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)

            if comp√©tition_result:
                for row_idx, activite in enumerate(comp√©tition_result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=15, pady=15, sticky="ew")
            else:
                pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucune comp√©tition n'a √©t√© enregistr√©e.", font=(font_principale, taille1))
                pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes comp√©titions !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_retour = ctk.CTkButton(master=app, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), comp√©tition(account_id)])
    button_retour.pack(padx=10, pady=20)

def comp√©tition(account_id):
    sidebar_performance(account_id)

    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=20)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(20, 5))
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Charge d'entra√Ænement":
            app.after(0, lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
        elif choix == "Objectif":
            app.after(0, lambda: [vider_fenetre(app), objectifs(account_id)])
        elif choix == "Comp√©tition":
            app.after(0, lambda: [vider_fenetre(app), comp√©tition(account_id)])
        else:
            app.after(0, lambda: [vider_fenetre(app), indulgence_de_course(account_id)])
    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Charge d'entra√Ænement", "Indulgence de course", "Objectif", "Comp√©tition"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Comp√©tition")
    button_autre = ctk.CTkButton(master=navbar, text="üîö Toutes les comp√©titions", fg_color=couleur2, hover_color=couleur2_hover,
                                    font=(font_principale, taille3), text_color=couleur1, height=button_height, corner_radius=corner2,
                                    width=260,
                                    command=lambda: [vider_fenetre(app), toute_comp√©tition(account_id)])
    button_autre.pack(side="left", padx=10)

    button_ajouter = ctk.CTkButton(master=frame_boutons, text="‚ûï  Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                           command=lambda: [vider_fenetre(app), ajouter_comp√©tition(account_id)])
    button_ajouter.pack(side="left", padx=2)
    button_modifier = ctk.CTkButton(master=frame_boutons, text="‚úèÔ∏è  Modifier", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                           command=lambda: [vider_fenetre(app), modifier_comp√©tition_√©tape1(account_id)])
    button_modifier.pack_forget()
    button_delete = ctk.CTkButton(master=frame_boutons, text="üóëÔ∏è  Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                           command=lambda: [vider_fenetre(app), supprimer_comp√©tition(account_id)])
    button_delete.pack_forget()
    try:
            curseur.execute("SELECT nom, date, sport, objectif, lieu, priorit√© FROM Comp√©tition WHERE account_id = ? AND date >= ? ORDER BY date ASC", (account_id, date_actuelle))
            comp√©tition_result = curseur.fetchall()

            headers = ["Nom", "Date", "Sport", "Objectif", "Lieu", "Priorit√©"]

            for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=15, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)

            if comp√©tition_result:
                for row_idx, activite in enumerate(comp√©tition_result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=15, pady=15, sticky="ew")
                button_modifier.pack(side="left", padx=2)
                button_delete.pack(side="left", padx=2)
            else:
                pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucune comp√©tition futur n'a √©t√© enregistr√©e.", font=(font_principale, taille1))
                pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes comp√©titions !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def ajouter_objectif(account_id):
    sidebar_performance(account_id)

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=(20, 10))
    frame_tout = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner1)
    frame_tout.pack()
    frame1 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame1.pack(pady=(10, 5), padx=10)
    frame2 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame2.pack(pady=(5, 5), padx=10)
    frame3 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame3.pack(pady=(5, 10), padx=10)
    frame4 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame4.pack(pady=20)

    options_statut = {"Pas encore d√©marr√©":"Pas encore d√©marr√©", "En cours": "En cours", "Atteint" : "Atteint", "Non-atteint" : "Non-atteint"}
    options_niveau = {"D√©butant": "D√©butant", "Fondations": "Fondations", "Interm√©diaire" : "Interm√©diaire", "Avanc√©": "Avanc√©", "Expert": "Expert", "Ma√Ætrise": "Ma√Ætrise"}
    Titre = ctk.CTkLabel(master=frame ,text="Ajouter un objectif", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    app.bind('<Return>', lambda event: sql_ajout√©(account_id))
    sport_entry = ctk.CTkEntry(master=frame1, placeholder_text="Sport", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="left", padx=(0, 5))
    date_entry = ctk.CTkEntry(master=frame1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="right", padx=(5, 0))

    objectif_entry = ctk.CTkEntry(master=frame2, placeholder_text="Objectif", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    objectif_entry.pack(side="left", padx=(0, 5))
    fr√©quence_entry = ctk.CTkEntry(master=frame2, placeholder_text="Fr√©quence (ex: 2x/semaine)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    fr√©quence_entry.pack(side="right", padx=(5, 0))

    niveau_entry = ctk.CTkComboBox(master=frame3, values=list(options_niveau.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    niveau_entry.pack(side="left", padx=(0, 5))
    niveau_entry.set("Niveau actuel")
    statut_entry = ctk.CTkComboBox(master=frame3, values=list(options_statut.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    statut_entry.pack(side="right", padx=(5, 0))
    statut_entry.set("Statut de l'objectif")

    def sql_ajout√©(account_id):
        sport = sport_entry.get().strip()
        date_str = date_entry.get().strip()
        objectif = objectif_entry.get().strip()
        fr√©quence = fr√©quence_entry.get().strip()
        niveau_choisi = niveau_entry.get()
        niveau = options_niveau[niveau_choisi]
        statut_choisi = statut_entry.get()
        statut = options_statut[statut_choisi]

        if not sport or not date_str or not objectif or not fr√©quence or not niveau or not statut:
            messagebox.showerror("Erreur", "Merci de remplir tous les champs !")
            return
        try:
            date_conversion = datetime.strptime(date_str, '%d-%m-%Y')
            date = date_conversion.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur", "La date doit √™tre au format JJ-MM-AAAA !")
            return
        else:
            try:
                curseur.execute("INSERT INTO Objectif (account_id, sport, date, objectif, fr√©quence, niveau_d√©but, statut) VALUES (?, ?, ?, ?, ?, ?, ?)", (account_id, sport, date, objectif, fr√©quence, niveau, statut))
                con.commit()
                messagebox.showinfo("Enregistr√©", "Ton objectif a √©t√© enregistr√©, bonne chance !")
                vider_fenetre(app)
                objectifs(account_id)
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de ton objectif !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_enregistrer = ctk.CTkButton(master=frame4, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                        command=lambda: sql_ajout√©(account_id))
    button_enregistrer.pack(side="left", padx=5)
    button_back = ctk.CTkButton(master=frame4, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), objectifs(account_id)])
    button_back.pack(side="left", padx=5)

def modifier_objectif_√©tape2(account_id, result_id):    
    id_modifier = result_id[0][0]
    sidebar_performance(account_id)
    try:
        curseur.execute("SELECT date, objectif, fr√©quence, sport FROM Objectif WHERE id = ? AND account_id = ?",(id_modifier, account_id))
        data_objectif = curseur.fetchall()
        premiere_ligne = data_objectif[0]
        date1 = premiere_ligne[0]
        date_conversion = datetime.strptime(date1, "%Y-%m-%d")
        date_value = date_conversion.strftime("%d-%m-%Y")
        objectif_value = premiere_ligne[1]
        frequence_value = premiere_ligne[2]
        sport_value = premiere_ligne[3]
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la modification de ton objectif !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=(20, 10))
    frame_tout = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner1)
    frame_tout.pack()
    frame1 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame1.pack(pady=(10, 5), padx=10)
    frame2 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame2.pack(pady=(5, 5), padx=10)
    frame3 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame3.pack(pady=(5, 10), padx=10)
    frame4 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame4.pack(pady=20)

    options_statut = {"Pas encore d√©marr√©":"Pas encore d√©marr√©", "En cours": "En cours", "Atteint" : "Atteint", "Non-atteint" : "Non-atteint"}
    options_niveau = {"D√©butant": "D√©butant", "Fondations": "Fondations", "Interm√©diaire" : "Interm√©diaire", "Avanc√©": "Avanc√©", "Expert": "Expert", "Ma√Ætrise": "Ma√Ætrise"}
    
    Titre = ctk.CTkLabel(master=frame ,text="Modifier un objectif", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    app.bind('<Return>', lambda event: sql_ajout√©(account_id))
    sport_entry = ctk.CTkEntry(master=frame1, placeholder_text=f"{sport_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="left", padx=(0, 5))
    date_entry = ctk.CTkEntry(master=frame1, placeholder_text=f"{date_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="right", padx=(5, 0))

    objectif_entry = ctk.CTkEntry(master=frame2, placeholder_text=f"{objectif_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    objectif_entry.pack(side="left", padx=(0, 5))
    fr√©quence_entry = ctk.CTkEntry(master=frame2, placeholder_text=f"{frequence_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    fr√©quence_entry.pack(side="right", padx=(5, 0))

    niveau_entry = ctk.CTkComboBox(master=frame3, values=list(options_niveau.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    niveau_entry.pack(side="left", padx=(0, 5))
    niveau_entry.set("Level final")
    statut_entry = ctk.CTkComboBox(master=frame3, values=list(options_statut.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    statut_entry.pack(side="right", padx=(5, 0))
    statut_entry.set("Statut de l'objectif")

    def sql_ajout√©(account_id):
        sport = sport_entry.get().strip()
        date_str = date_entry.get().strip()
        objectif = objectif_entry.get().strip()
        fr√©quence = fr√©quence_entry.get().strip()
        niveau_choisi = niveau_entry.get()
        try:
            niveau = options_niveau[niveau_choisi]
        except Exception: 
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Niveau final' !")
            return
        statut_choisi = statut_entry.get()
        try:
            statut = options_statut[statut_choisi]
        except Exception:
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Statut de l'objectif' !")
            return
        if not sport:
            sport = sport_value
        if not date_str:
            date_str = date_value
        if not objectif:
            objectif = objectif_value
        if not fr√©quence:
            fr√©quence = frequence_value
        try:
            date_conversion = datetime.strptime(date_str, '%d-%m-%Y')
            date = date_conversion.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur", "La date doit √™tre au format JJ-MM-AAAA !")
            return
        else:
            try:
                curseur.execute("UPDATE Objectif SET sport = ?, date = ?, objectif = ?, fr√©quence = ?, niveau_fin = ?, statut = ? WHERE id = ? AND account_id = ?",
                    (sport, date, objectif, fr√©quence, niveau, statut, id_modifier, account_id))
                con.commit()
                messagebox.showinfo("Enregistr√©", "Ton objectif a √©t√© modifi√© avec succ√®s!")
                vider_fenetre(app)
                objectifs(account_id)
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la modification de ton objectif !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_enregistrer = ctk.CTkButton(master=frame4, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                        command=lambda: sql_ajout√©(account_id))
    button_enregistrer.pack(side="left", padx=5)
    button_back = ctk.CTkButton(master=frame4, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), modifier_objectif_√©tape1(account_id)])
    button_back.pack(side="left", padx=5)
    aide_objectif(account_id)

def modifier_objectif_√©tape1(account_id):
    sidebar_performance(account_id)

    Titre = ctk.CTkLabel(master=app ,text="Modifier un objectif", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(padx=50, pady=(20, 0))

    app.bind('<Return>', lambda event: valider(account_id))
    choix_entry = ctk.CTkEntry(frame1, placeholder_text="ID de l'objectif √† modifier", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    choix_entry.pack(pady=10, side="left", padx=5)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
        curseur.execute("SELECT id, sport, date, niveau_d√©but, niveau_fin, statut FROM Objectif WHERE account_id = ?", (account_id,))
        result = curseur.fetchall()
        headers = ["ID", "Sport", "Date", "Level d√©but", "Level fin", "Statut"]

        for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if result:
                for row_idx, activite in enumerate(result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 2:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
        else:
            pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©", font=(font_principale, taille1))
            pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)

        def valider(account_id):
            choix = choix_entry.get().strip()
            try:
                if not choix:
                    messagebox.showerror("Erreur", "ID ne peut pas √™tre vide ! Merci de saisir un identifiant !")
                try:
                    id = int(choix)
                    if id < 0:
                        messagebox.showerror("Erreur", "ID doit √™tre un nombre entier positif !")
                        return
                except:
                    messagebox.showerror("Erreur", "ID doit √™tre un nombre entier positif !")
                    return

                curseur.execute("SELECT id FROM Objectif WHERE id = ? AND account_id = ?", (id, account_id))
                result_id = curseur.fetchall()
                if result_id:
                    vider_fenetre(app)
                    modifier_objectif_√©tape2(account_id, result_id)
                else:
                    messagebox.showerror("Erreur", "ID de l'objectif saisi n'existe pas ou n'appartient pas √† ton compte !")
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la modification de l'objectif !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes objectifs !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, veuillez r√©essayer !")
    button_check = ctk.CTkButton(master=frame_boutons, text="Suivant", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: valider(account_id))
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), objectifs(account_id)])
    button_retour.pack(side="left", padx=5, pady=20)

def supprimer_objectif(account_id):
    sidebar_performance(account_id)

    Titre = ctk.CTkLabel(master=app ,text="Supprimer un objectif", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(pady=10)

    app.bind('<Return>', lambda event: supression(account_id))
    choix_entry = ctk.CTkEntry(master=frame1, placeholder_text="ID de l'objectif √† supprimer", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    choix_entry.pack(pady=10, side="left", padx=10)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
        curseur.execute("SELECT id, sport, date, objectif, statut FROM Objectif WHERE account_id = ?", (account_id,))
        result = curseur.fetchall()
        headers = ["ID", "Sport", "Date", "Objectif", "Statut"]
        for col_idx, header_text in enumerate(headers):
            label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
            label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
            tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if result:
            for row_idx, activite in enumerate(result):
                for col_idx, data in enumerate(activite):
                    if col_idx == 2:
                        date = datetime.strptime(str(data), '%Y-%m-%d')
                        data = date.strftime('%d-%m-%Y')
                    label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                    label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
        else:
            pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©.", font=(font_principale, taille2))
            pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)

        def supression(account_id):
            choix = choix_entry.get().strip()
            try:
                choix_id_saisi = int(choix)
                ids_objectifs_disponibles = [obj[0] for obj in result]

                if choix_id_saisi in ids_objectifs_disponibles:
                    objectif_id_db = choix_id_saisi
                    curseur.execute("DELETE FROM Objectif WHERE id = ? AND account_id = ?", (objectif_id_db, account_id))
                    con.commit()
                    messagebox.showinfo("Suppression r√©ussie", "Objectif supprim√© avec succ√®s.")
                    vider_fenetre(app)
                    objectifs(account_id)
                else:
                    messagebox.showerror("Erreur", "L'ID de l'objectif saisi n'existe pas ou n'appartient pas √† ton compte !")
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la suppression de l'objectif !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes objectifs !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: supression(account_id))
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: [vider_fenetre(app), objectifs(account_id)])
    button_retour.pack(side="left", padx=5, pady=20)

def tout_objectif(account_id):
    sidebar_performance(account_id)

    Titre = ctk.CTkLabel(master=app, text="Tous les objectifs", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=(25, 10))

    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
            curseur.execute("SELECT sport, date, objectif, fr√©quence, niveau_d√©but, niveau_fin, statut FROM Objectif WHERE account_id = ? ORDER BY date ASC", (account_id,))
            objectif_result = curseur.fetchall()

            headers = ["Sport", "Date", "Objectif", "Fr√©quence", "Level d√©but", "Level fin", "Statut"]

            for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)
            if objectif_result:
                for row_idx, activite in enumerate(objectif_result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
            else:
                pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©.", font=(font_principale, taille1))
                pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes objectifs !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_retour = ctk.CTkButton(master=app, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), objectifs(account_id)])
    button_retour.pack(padx=10, pady=20)

def objectifs(account_id):
    sidebar_performance(account_id)
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=20)
    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(20, 5))
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Charge d'entra√Ænement":
            app.after(0, lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
        elif choix == "Objectif":
            app.after(0, lambda: [vider_fenetre(app), objectifs(account_id)])
        elif choix == "Comp√©tition":
            app.after(0, lambda: [vider_fenetre(app), comp√©tition(account_id)])
        else:
            app.after(0, lambda: [vider_fenetre(app), indulgence_de_course(account_id)])
    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Charge d'entra√Ænement", "Indulgence de course", "Objectif", "Comp√©tition"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Objectif")
    button_autre = ctk.CTkButton(master=navbar, text="üîö Tous les objectifs", fg_color=couleur2, hover_color=couleur2_hover,
                                    font=(font_principale, taille3), text_color=couleur1, height=button_height, corner_radius=corner2,
                                    width=260,
                                    command=lambda: [vider_fenetre(app), tout_objectif(account_id)])
    button_autre.pack(side="left", padx=10)

    button_ajouter = ctk.CTkButton(master=frame_boutons, text="‚ûï  Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), ajouter_objectif(account_id)])
    button_ajouter.pack(side="left", padx=2)
    button_modifier = ctk.CTkButton(master=frame_boutons, text="‚úèÔ∏è  Modifier", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), modifier_objectif_√©tape1(account_id)])
    button_modifier.pack_forget()
    button_delete = ctk.CTkButton(master=frame_boutons, text="üóëÔ∏è Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), supprimer_objectif(account_id)])
    button_delete.pack_forget()

    try:
        curseur.execute("SELECT sport, date, objectif, fr√©quence, niveau_d√©but, niveau_fin, statut FROM Objectif WHERE account_id = ? AND date >= ? ORDER BY date ASC", (account_id, date_actuelle))
        objectif_result = curseur.fetchall()

        headers = ["Sport", "Date", "Objectif", "Fr√©quence", "Level d√©but", "Level fin", "Statut"]

        for col_idx, header_text in enumerate(headers): #_idx= index de colonne
            label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                    fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                    height=40, wraplength=130)
            label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
            tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if objectif_result:
            for row_idx, activite in enumerate(objectif_result):
                for col_idx, data in enumerate(activite):
                    if col_idx == 1:
                        date = datetime.strptime(data, '%Y-%m-%d')
                        data = date.strftime('%d-%m-%Y')
                    label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                        text_color=couleur_text, wraplength=130)
                    label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
            button_modifier.pack(side="left", padx=2)
            button_delete.pack(side="left", padx=2)
        else:
            pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©.", font=(font_principale, taille1))
            pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes objectifs!")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def indulgence_de_course(account_id):
    sidebar_performance(account_id)
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=20)

    D28J = date_actuelle - timedelta(days=28)
    D28J_str = D28J.strftime('%Y-%m-%d')
    curseur.execute("SELECT distance FROM activit√©_running WHERE account_id = ? AND date_activit√© >= ?", (account_id, D28J_str))
    distance28J = [row[0] for row in curseur.fetchall()]
    distance_moyenne_des_derniers_28_jours = sum(distance28J) / len(distance28J) if distance28J else 0
    if distance_moyenne_des_derniers_28_jours < 10:
        distance_maximumconseill√©_d√©but = distance_moyenne_des_derniers_28_jours*1.18
        distance_maximumconseill√©_fin = distance_moyenne_des_derniers_28_jours*1.25
    elif 10 <= distance_moyenne_des_derniers_28_jours <= 20:
        distance_maximumconseill√©_d√©but = distance_moyenne_des_derniers_28_jours*1.15
        distance_maximumconseill√©_fin = distance_moyenne_des_derniers_28_jours*1.20
    elif 20 <= distance_moyenne_des_derniers_28_jours <= 40:
        distance_maximumconseill√©_d√©but = distance_moyenne_des_derniers_28_jours*1.12
        distance_maximumconseill√©_fin = distance_moyenne_des_derniers_28_jours*1.15
    elif 40 <= distance_moyenne_des_derniers_28_jours <= 60:
        distance_maximumconseill√©_d√©but = distance_moyenne_des_derniers_28_jours*1.09
        distance_maximumconseill√©_fin = distance_moyenne_des_derniers_28_jours*1.12
    else:
        distance_maximumconseill√©_d√©but = distance_moyenne_des_derniers_28_jours*1.06
        distance_maximumconseill√©_fin = distance_moyenne_des_derniers_28_jours*1.10

    D7J = date_actuelle - timedelta(days=7)
    D7J_str = D7J.strftime('%Y-%m-%d')
    curseur.execute("SELECT distance FROM activit√©_running WHERE account_id = ? AND date_activit√© >= ?", (account_id, D7J_str))
    distance7J = [row[0] for row in curseur.fetchall()]
    distance_des_derniers_7_jours = sum(distance7J) if distance7J else 0

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Charge d'entra√Ænement":
            app.after(0, lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
        elif choix == "Objectif":
            app.after(0, lambda: [vider_fenetre(app), objectifs(account_id)])
        elif choix == "Comp√©tition":
            app.after(0, lambda: [vider_fenetre(app), comp√©tition(account_id)])
        else:
            app.after(0, lambda: [vider_fenetre(app), indulgence_de_course(account_id)])
    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Charge d'entra√Ænement", "Indulgence de course", "Objectif", "Comp√©tition"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover,
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Indulgence de course")
    button_autre = ctk.CTkButton(master=navbar, text="‚è∏Ô∏è Mettre en pause les analyses", fg_color=couleur2, hover_color=couleur2_hover,
                                    font=(font_principale, taille3), text_color=couleur1, height=button_height, corner_radius=corner2,
                                    command=lambda: [vider_fenetre(app), mettre_en_pause_les_analyses_depuis_indulgence(account_id)])
    button_autre.pack(side="left", padx=10)

    boite_distance_course_gauche = ctk.CTkFrame(master=app, border_width=border2, border_color=couleur1, corner_radius=corner1,
                                             fg_color=couleur_fond)
    boite_distance_course_gauche.pack(fill="both", expand=True, side="left", padx=(40, 10), pady=(30, 40))
    h1_boite_distance_course = ctk.CTkFrame(master=boite_distance_course_gauche, fg_color=couleur_fond)
    h1_boite_distance_course.pack(pady=5)

    boite_analyse_kilom√©trage = ctk.CTkFrame(master=boite_distance_course_gauche, border_width=border2, border_color=couleur1, corner_radius=corner1, fg_color=couleur2)
    boite_analyse_kilom√©trage.pack(fill="both", expand=True, padx=15, pady=5)
    distance_7_jours = ctk.CTkFrame(master=boite_analyse_kilom√©trage, corner_radius=corner1, fg_color=couleur1)
    distance_7_jours.pack(fill="both", expand=True, padx=10, pady=(10, 5))
    distance_maximum = ctk.CTkFrame(master=boite_analyse_kilom√©trage, corner_radius=corner1, fg_color=couleur1)
    distance_maximum.pack(fill="both", expand=True, padx=10, pady=(5, 10))

    boite_statut = ctk.CTkFrame(master=boite_distance_course_gauche, border_width=border2, border_color=couleur1, corner_radius=corner1, fg_color=couleur2)
    boite_statut.pack(fill="both", expand=True, padx=15, pady=(5, 15))
    h1_zone = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    h1_zone.pack(fill="both", expand=True, padx=10, pady=(10, 5))
    interpr√©tation = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    interpr√©tation.pack(fill="both", expand=True, pady=(5, 10), padx=10)

    boite_distance_course_droit = ctk.CTkFrame(master=app, border_width=border2, border_color=couleur1, corner_radius=corner1,
                                             fg_color=couleur_fond)
    boite_distance_course_droit.pack(fill="both", expand=True, side="right", padx=(10, 40), pady=(30, 40))

    boite_statut = ctk.CTkFrame(master=boite_distance_course_droit, border_width=border2, border_color=couleur1, corner_radius=corner1, fg_color=couleur2)
    boite_statut.pack(fill="both", expand=True, pady=15, padx=15)
    distance_moyenne_28J = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    distance_moyenne_28J.pack(fill="both", expand=True, padx=10, pady=(10, 5))
    conseil = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    conseil.pack(fill="both", expand=True, pady=(5, 10), padx=10)
    
    info = ctk.CTkFrame(master=boite_distance_course_droit, corner_radius=corner1, fg_color=couleur1)
    info.pack(fill="both", expand=True, padx=15, pady=(0, 15))

    h1 = ctk.CTkLabel(master=h1_boite_distance_course, font=(font_secondaire, taille2), text="7 derniers jours")
    h1.pack(padx=10, pady=(5, 0))
    distance_7J = ctk.CTkLabel(distance_7_jours, text=f"Distance (7 jours) : {distance_des_derniers_7_jours:.2f} km", font=(font_principale , taille2),
                                    width=300, wraplength=300)
    distance_7J.pack(fill="both", expand=True, padx=10, pady=10)

    distance_moyenne_du_mois = ctk.CTkLabel(distance_moyenne_28J, text=f"Distance moyenne (28 jours) : {distance_moyenne_des_derniers_28_jours:.2f} km", font=(font_principale, taille2),
                                width=300, wraplength=500)
    distance_moyenne_du_mois.pack(fill="both", expand=True, padx=10, pady=10)  
    pause = verifier_pause(account_id)
    if pause == "blessure":
        Distance_maximal_conseill√© = ctk.CTkLabel(distance_maximum, text=f"Distance maximale hebdomadaire conseill√©e : actuellement en pause", font=(font_secondaire, taille2),
                                        width=300, wraplength=300)
        Distance_maximal_conseill√©.pack(fill="both", expand=True, padx=10, pady=10)
        zone = ctk.CTkLabel(master=h1_zone, text="‚õëÔ∏è Mode blessure : suivi d√©sactiv√©", font=(font_secondaire, taille2),
                                width=300, wraplength=300, text_color="#c60000")
        zone.pack(fill="both", expand=True, padx=10, pady=10)                 
        interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Tu es bless√© pour le moment.", font=(font_principale, taille3),
                                        width=300, wraplength=300)
        interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)      
        conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Prends vraiment le temps de laisser ton corps se r√©g√©n√©rer en profondeur, afin de revenir encore plus fort et plus d√©termin√© que jamais.", font=(font_principale, taille3),
                                    width=300, wraplength=500)
        conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)
    elif pause == "vacances":
        Distance_maximal_conseill√© = ctk.CTkLabel(distance_maximum, text=f"Distance maximale hebdomadaire conseill√©e : actuellement en pause", font=(font_secondaire, taille2),
                                        width=300, wraplength=300)
        Distance_maximal_conseill√©.pack(fill="both", expand=True, padx=10, pady=10)
        zone = ctk.CTkLabel(master=h1_zone, text="üèñÔ∏è Mode vacances : pas d'analyse !", font=(font_secondaire, taille2),
                                width=300, wraplength=300, text_color="#6AC100")
        zone.pack(fill="both", expand=True, padx=10, pady=10)                 
        interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Tu es actuellement en vacances.", font=(font_principale, taille3),
                                        width=300, wraplength=300)
        interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)      
        conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Profite de cette pause pour te ressourcer, appr√©cier les moments de d√©tente et les repas, et reviens encore plus motiv√© !", font=(font_principale, taille3),
                                    width=300, wraplength=500)
        conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)
    elif pause == "suspendre":
        Distance_maximal_conseill√© = ctk.CTkLabel(distance_maximum, text=f"Distance maximale hebdomadaire conseill√©e : actuellement en pause", font=(font_secondaire , taille3),
                                        width=300, wraplength=300)
        Distance_maximal_conseill√©.pack(fill="both", expand=True, padx=10, pady=10)
        zone = ctk.CTkLabel(master=h1_zone, text="üí§ Mode suspension activ√© : aucune analyse en cours", font=(font_secondaire, taille2),
                                width=300, wraplength=300, text_color="#6AC100")
        zone.pack(fill="both", expand=True, padx=10, pady=10)                 
        interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Tes analyses sont temporairement en pause pendant ce mode suspension.", font=(font_principale, taille3),
                                        width=300, wraplength=300)
        interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)      
        conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Profite-en pour te reposer sans pression, on reprend les suivis d√®s ton retour √† l‚Äôentra√Ænement !", font=(font_principale, taille3),
                                    width=300, wraplength=500)
        conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)
    else:
        if distance_moyenne_des_derniers_28_jours == 0:
            Distance_maximal_conseill√© = ctk.CTkLabel(distance_maximum, text=f"Distance maximale hebdomadaire conseill√©e :\nDonn√©es insuffisantes", font=(font_secondaire, taille2),
                                            width=300, wraplength=300)
            Distance_maximal_conseill√©.pack(fill="both", expand=True, padx=10, pady=10)

            zone = ctk.CTkLabel(master=h1_zone, text="üö´ Donn√©es insuffisantes", font=(font_secondaire, taille2),
                                        width=300, wraplength=300, text_color="#c60000")
            zone.pack(fill="both", expand=True, padx=10, pady=10)              
            interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="L'interpr√©tation de votre zone d'indulgence de course ne peut pas √™tre d√©termin√©e.", font=(font_principale, taille3),
                                            width=300, wraplength=300)
            interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)
                    
            conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Pour pouvoir obtenir des interpr√©tations et des conseils de course. Fais une s√©ance de sport pour lancer les analyses et √©valuer ton indulgence de course.", font=(font_principale, taille3),
                                            width=300, wraplength=500)
            conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)
        else:
            Distance_maximal_conseill√© = ctk.CTkLabel(distance_maximum, text=f"Distance hebdomadaire conseill√©e entre :\n{distance_maximumconseill√©_d√©but:.1f} et {distance_maximumconseill√©_fin:.1f} km", font=(font_secondaire, taille2),
                                            width=300, wraplength=300)
            Distance_maximal_conseill√©.pack(fill="both", expand=True, padx=10, pady=10)

            if distance_moyenne_des_derniers_28_jours < distance_des_derniers_7_jours < distance_maximumconseill√©_fin:
                zone = ctk.CTkLabel(master=h1_zone, text="üöÄ Zone optimale pour progresser", font=(font_secondaire, taille2),
                                            width=300, wraplength=300, text_color="#00BA47")
                zone.pack(fill="both", expand=True, padx=10, pady=10)              
                interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Tu es en train de progresser en course, bravo ! Tu as fais le plus dur !", font=(font_principale, taille3),
                                                width=300, wraplength=300)
                interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)
                        
                conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Pour continuer √† avancer et voir des r√©sultats sur le long terme, fais en sorte de maintenir ce volume d‚Äôentra√Ænement chaque semaine. C‚Äôest la r√©gularit√© qui te permettra de progresser de mani√®re stable, efficace et id√©al pour √©viter les blessures. Continue comme √ßa !", font=(font_principale, taille3),
                                                width=300, wraplength=500)
                conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)

            elif distance_des_derniers_7_jours > distance_maximumconseill√©_fin:
                zone = ctk.CTkLabel(master=h1_zone, text="ü§ï Zone optimale pour se blesser", font=(font_secondaire, taille2),
                                            width=300, wraplength=300, text_color="#c60000")
                zone.pack(fill="both", expand=True, padx=10, pady=10)              
                interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Ton volume kilom√©trique hebdomadaire est actuellement tr√®s √©lev√© par rapport √† d'habitude.", font=(font_principale, taille3),
                                                width=300, wraplength=300)
                interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)
                        
                conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Prends quelques jours de pause sans courir pour permettre √† ton corps de bien r√©cup√©rer. La course √† pied sollicite √©norm√©ment tes muscles et articulations, et encha√Æner sans repos augmente le risque de blessure. Ce temps de r√©cup√©ration est essentiel pour revenir plus fort et √©viter la surcharge.", font=(font_principale, taille3),
                                                width=300, wraplength=500)
                conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)

            elif distance_des_derniers_7_jours == distance_moyenne_des_derniers_28_jours:
                zone = ctk.CTkLabel(master=h1_zone, text="üò¥ Zone optimale pour stagner", font=(font_secondaire, taille2),
                                            width=300, wraplength=300, text_color="#00C073")
                zone.pack(fill="both", expand=True, padx=10, pady=10)              
                interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Ton volume est stable mais l√©g√®rement trop bas pour progresser. Tu maintiens ton niveau, mais tu risques de plafonner.", font=(font_principale, taille3),
                                                width=300, wraplength=300)
                interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)
                conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Augmente progressivement ton volume hebdomadaire. De petites augmentations r√©guli√®res te permettront de sortir de la stagnation sans te blesser, et de retrouver une dynamique de progression.", font=(font_principale, taille3),
                                                width=300, wraplength=500)
                conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)

            else:
                zone = ctk.CTkLabel(master=h1_zone, text="‚è¨ Zone optimale pour perdre du niveau", font=(font_secondaire, taille2),
                                            width=300, wraplength=300, text_color="#C01802")
                zone.pack(fill="both", expand=True, padx=10, pady=10)              
                interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Ton volume kilom√©trique hebdomadaire est actuellement en dessous des niveaux optimaux pour progresser. Tu en fais moins que d'habitude !", font=(font_principale, taille3),
                                                width=300, wraplength=300)
                interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)
                        
                conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Si tu restes 3 √† 4 jours sans courir alors que ton corps est habitu√© √† un certain volume d‚Äôentra√Ænement, tu risques de perdre en endurance et en progression. La course √† pied demande une r√©gularit√© pour maintenir tes capacit√©s et continuer √† avancer. Trop r√©duire ton entra√Ænement peut te faire r√©gresser.", font=(font_principale, taille3),
                                                width=300, wraplength=500)
                conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)

    titre_c_quoi = ctk.CTkLabel(master=info, text="C'est quoi l'indulgence de course ?", font=(font_secondaire, taille2), wraplength=500)
    titre_c_quoi.pack(fill="both", expand=True, pady=(10, 10), padx=10)
    c_quoi = ctk.CTkLabel(master=info, 
                          text="L‚Äôindulgence de course t‚Äôaide √† ajuster ton kilom√©trage des 7 derniers jours pour rester dans une progression optimale, sans d√©passer ta limite. Tu peux ainsi continuer √† t‚Äôam√©liorer tout en r√©duisant les risques de blessure. Cette analyse est un guide, mais n‚Äôoublie jamais d‚Äô√©couter les signaux de ton corps. Une fonctionnalit√© adapt√©e √† tous les niveaux !",
                            font=(font_principale, taille3), wraplength=500)
    c_quoi.pack(fill="both", expand=True, padx=10, pady=(5, 10))

def charge_entra√Ænement(account_id):
    sidebar_performance(account_id)
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=20)

    fig = None
    canvas = None
    def fermer_graphique_pause(account_id):
        plt.close(fig)
        mettre_en_pause_les_analyses(account_id)
    def fermer_graphique_mode():    
        nonlocal fig
        if fig:
            plt.close(fig)
            fig = None

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if fig is None:
            if choix == "Charge d'entra√Ænement":
                app.after(0, lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
            elif choix == "Indulgence de course":
                app.after(0, lambda: [vider_fenetre(app), indulgence_de_course(account_id)])
            elif choix == "Objectif":
                app.after(0, lambda: [vider_fenetre(app), objectifs(account_id)])
            elif choix == "Comp√©tition":
                app.after(0, lambda: [vider_fenetre(app), comp√©tition(account_id)])
        else:
            if choix == "Charge d'entra√Ænement":
                app.after(0, lambda: [fermer_graphique_mode(), vider_fenetre(app), charge_entra√Ænement(account_id)])
            elif choix == "Indulgence de course":
                app.after(0, lambda: [fermer_graphique_mode(), vider_fenetre(app), indulgence_de_course(account_id)])
            elif choix == "Objectif":
                app.after(0, lambda: [fermer_graphique_mode(), vider_fenetre(app), objectifs(account_id)])
            elif choix == "Comp√©tition":
                app.after(0, lambda: [fermer_graphique_mode(), vider_fenetre(app), comp√©tition(account_id)])
    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Charge d'entra√Ænement", "Indulgence de course", "Objectif", "Comp√©tition"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Charge d'entra√Ænement")
    button_autre = ctk.CTkButton(master=navbar, text="‚è∏Ô∏è Mettre en pause les analyses", fg_color=couleur2, hover_color=couleur2_hover,
                                    font=(font_principale, taille3), text_color=couleur1, height=button_height, corner_radius=corner2,
                                    command=lambda: [vider_fenetre(app), fermer_graphique_pause(account_id)])
    button_autre.pack(side="left", padx=10)

    charge_aigue = 0.0
    charge_chronique = 0.0
    try:
        ca = date_actuelle - timedelta(days=7)
        ca_str = ca.strftime('%Y-%m-%d')
        curseur.execute("SELECT charge FROM Activit√© WHERE account_id = ? AND date_activit√© >= ?", (account_id, ca_str))
        charges_aigue = [row[0] for row in curseur.fetchall()]

        cc = date_actuelle - timedelta(days=28)
        cc_str = cc.strftime('%Y-%m-%d')
        curseur.execute("SELECT date_activit√©, charge FROM Activit√© WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© ASC", (account_id, cc_str))
        data_pour_graphique = curseur.fetchall()

        charge_aigue = sum(charges_aigue) / len(charges_aigue) if charges_aigue else 0
        #On prend le 2√®me √©l√©ment des data pour graphique pour avoir les charges et ne pas prendre les dates
        charge_chronique = sum([row[1] for row in data_pour_graphique]) / len(data_pour_graphique) if data_pour_graphique else 0
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors du calcul de charge d'entra√Ænement !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    parent_frame = ctk.CTkFrame(master=app, fg_color="transparent")
    parent_frame.pack(fill="both", expand=True, pady=10)

    boite_charge_entra√Ænement = ctk.CTkFrame(master=parent_frame, border_width=border2, border_color=couleur1, corner_radius=corner1,
                                             fg_color=couleur_fond)
    boite_charge_entra√Ænement.pack(fill="both", expand=True, side="left", padx=10, pady=(0, 10))
    h1_boite_charge_entra√Ænement = ctk.CTkFrame(master=boite_charge_entra√Ænement, fg_color=couleur_fond)
    h1_boite_charge_entra√Ænement.pack(pady=5)

    boite_analyse = ctk.CTkFrame(master=boite_charge_entra√Ænement, border_width=border2, border_color=couleur1, corner_radius=corner1, fg_color=couleur2)
    boite_analyse.pack(fill="both", expand=True, padx=15, pady=5)
    aigue = ctk.CTkFrame(master=boite_analyse, corner_radius=corner1, fg_color=couleur1)
    aigue.pack(fill="both", expand=True, padx=10, pady=(10, 5))
    chronique = ctk.CTkFrame(master=boite_analyse, corner_radius=corner1, fg_color=couleur1)
    chronique.pack(fill="both", expand=True, padx=10, pady=5)
    ratio_frame = ctk.CTkFrame(master=boite_analyse, corner_radius=corner1, fg_color=couleur1)
    ratio_frame.pack(fill="both", expand=True, padx=10, pady=(5, 10))

    boite_statut = ctk.CTkFrame(master=boite_charge_entra√Ænement, border_width=border2, border_color=couleur1, corner_radius=corner1, fg_color=couleur2)
    boite_statut.pack(fill="both", expand=True, padx=15, pady=(5, 15))
    h1_result_optimale = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    h1_result_optimale.pack(fill="both", expand=True, padx=10, pady=(10, 5))
    interpr√©tation = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    interpr√©tation.pack(fill="both", expand=True, padx=10, pady=5)
    conseil = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    conseil.pack(fill="both", expand=True, pady=(5, 10), padx=10)
    
    boite = ctk.CTkFrame(master=parent_frame, border_width=border2, border_color=couleur1, corner_radius=corner1,
                                             fg_color=couleur_fond)
    boite.pack(fill="both", expand=True, side="right", padx=10, pady=(0, 10))
    graphique = ctk.CTkFrame(master=boite, corner_radius=corner1, fg_color="white")
    graphique.pack(fill="both", expand=True, padx=15, pady=(15, 10))
    info = ctk.CTkFrame(master=boite, corner_radius=corner1, fg_color=couleur1)
    info.pack(fill="both", expand=True, padx=15, pady=(0, 15))

    #rappel pour mettre le test a droite "anchor="w""
    h1 = ctk.CTkLabel(master=h1_boite_charge_entra√Ænement, font=(font_secondaire, taille2), text="Analyse")
    h1.pack(padx=10, pady=(5, 0))
    result_analyse = ctk.CTkLabel(master=aigue, text=f"Charge aigu√´ (7 jours) : {charge_aigue:.1f}", font=(font_principale , taille3),
                                    width=300, wraplength=280)
    result_analyse.pack(fill="both", expand=True, padx=10, pady=10)
    result_analyse2 = ctk.CTkLabel(master=chronique, text=f"Charge chronique (28 jours) : {charge_chronique:.1f}", font=(font_principale, taille3),
                                    width=300, wraplength=280)
    result_analyse2.pack(fill="both", expand=True, padx=10, pady=10)
    pause = verifier_pause(account_id)
    if pause == "blessure":
        result_analyse3 = ctk.CTkLabel(master=ratio_frame, text="Ratio : actuellement en pause", font=(font_secondaire, taille2),
                        width=300, wraplength=280)
        result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
        cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="‚õëÔ∏è Mode blessure : suivi d√©sactiv√©", font=(font_principale, taille3),
                                        width=300, wraplength=280, text_color="#c60000")
        cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)           
        interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Tu es bless√© pour le moment", font=(font_principale, taille3),
                                    width=300, wraplength=280)
        interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)              
        conseil_statut = ctk.CTkLabel(master=conseil, text="Prends vraiment le temps de laisser ton corps se r√©g√©n√©rer en profondeur, afin de revenir encore plus fort et plus d√©termin√© que jamais.", font=(font_principale, taille3),
                                        width=300, wraplength=280)
        conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
    elif pause == "vacances":
        result_analyse3 = ctk.CTkLabel(master=ratio_frame, text="Ratio : actuellement en pause", font=(font_secondaire, taille2),
                        width=300, wraplength=280)
        result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
        cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üèñÔ∏è Mode vacances : pas d'analyse !", font=(font_principale, taille3),
                                        width=300, wraplength=280, text_color="#6AC100")
        cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)          
        interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Tu es actuellement en vacances.", font=(font_principale, taille3),
                                    width=300, wraplength=280)
        interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)               
        conseil_statut = ctk.CTkLabel(master=conseil, text="Profite de cette pause pour te ressourcer, appr√©cier les moments de d√©tente et les repas, et reviens encore plus motiv√© !", font=(font_principale, taille3),
                                        width=300, wraplength=280)
        conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
    elif pause == "suspendre":
        result_analyse3 = ctk.CTkLabel(master=ratio_frame, text="Ratio : actuellement en pause", font=(font_secondaire, taille2),
                        width=300, wraplength=280)
        result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
        cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üí§ Mode suspension activ√© : aucune analyse en cours.", font=(font_principale, taille3),
                                        width=300, wraplength=280, text_color="#6AC100")
        cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)
        interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Tes analyses sont temporairement en pause pendant ce mode suspension.", font=(font_principale, taille3),
                                    width=300, wraplength=280)
        interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)
        conseil_statut = ctk.CTkLabel(master=conseil, text="Profite-en pour te reposer sans pression, on reprend les suivis d√®s ton retour √† l‚Äôentra√Ænement !", font=(font_principale, taille3),
                                        width=300, wraplength=280)
        conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
    else :
        if charge_chronique > 0:
            ratio = charge_aigue / charge_chronique
        else:
            ratio = None
        if ratio is not None:
            result_analyse3 = ctk.CTkLabel(master=ratio_frame, text=f"Ratio : {ratio:.2f}", font=(font_secondaire, taille2),
                            width=300, wraplength=280)
            result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
            if ratio < 0.5: 
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üõå R√©cup√©ration active", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#75B7DD")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Charge tr√®s basse. Tu laisse ton corps se reposer mais jusqu'√† quand !", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)                
                conseil_statut = ctk.CTkLabel(master=conseil, text="Fais une activit√© physique r√©guli√®re pour reprendre en main ton entra√Ænement et √©viter de perdre ton niveau actuel.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            elif 0.5 <= ratio <= 0.8:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üò¥ Sous-entra√Ænement", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#CBC500")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Tu es entrain de perdre du niveau, attention !", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                conseil_statut = ctk.CTkLabel(master=conseil, text="Tu pourrais augmenter l√©g√®rement l'intensit√© de tes entra√Ænements si tu veux basculer en mode maintien et stabiliser tes performances.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            elif 0.8 <= ratio <= 0.9:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üîÑ Maintien", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#00C073")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Charge adapt√©e pour conserver ton niveau", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                conseil_statut = ctk.CTkLabel(master=conseil, text="Allonge de 5 minutes tes s√©ances pour basculer en mode progression optimale et am√©liorer tes performances.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            elif 0.9 <= ratio <= 1.1:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üü¢ Progression optimale", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#00BA47")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Charge id√©ale pour am√©liorer tes performances", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                conseil_statut = ctk.CTkLabel(master=conseil, text="Continue comme √ßa pour progresser ! Garde cette m√™me r√©gularit√© dans tes entra√Ænements pour rester en mode progression optimale.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            elif 1.1 < ratio <= 1.3:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üí™ Progression √©l√©v√©e", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#99c800")#3d71a5
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Tu progresse vite mais fait attention aux blessures",
                                                    font=(font_principale, taille3), width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)                
                conseil_statut = ctk.CTkLabel(master=conseil, text="Surveille bien la fatigue de ton corps pour √©viter les blessures‚Äâ: en gardant cette charge deux semaines, le risque reste limit√©.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            else:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="‚ö†Ô∏è Surentra√Ænement", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#c60000")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Risque √©lev√© de blessure", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)                
                conseil_statut = ctk.CTkLabel(master=conseil, text="Prends 2 √† 3 jours de pause pour laisser ton corps r√©cup√©rer et r√©duire les risques de blessure.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
        else:
            result_analyse3 = ctk.CTkLabel(master=ratio_frame, text="Ratio : 0.0", font=(font_secondaire, taille2),
                                                width=300, wraplength=280)
            result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
            cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üö´ Donn√©es insuffisantes", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#c60000")
            cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
            interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="L'interpr√©tation ne peut pas √™tre d√©termin√©e.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
            interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)                
            conseil_statut = ctk.CTkLabel(master=conseil, text="Fais une s√©ance de sport pour lancer les analyses et √©valuer ta charge actuelle.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
            conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)   
    try:   
        if data_pour_graphique:
            dates_graphique = [datetime.strptime(row[0], '%Y-%m-%d') for row in data_pour_graphique]
            charges_graphique = [row[1] for row in data_pour_graphique]

            fig, ax = plt.subplots(figsize=(12, 4))
            sns.lineplot(x=dates_graphique, y=charges_graphique, marker="o", color="black")

            ax.axhline(y=charge_chronique, color=couleur1, linestyle="--", label="Charge chronique")
            ax.set_title("√âvolution de la charge chronique")
            ax.set_xlabel("Date")
            ax.set_ylabel("Charge chronique")

            canvas = FigureCanvasTkAgg(fig, master=graphique)
            canvas.draw()
            canvas.get_tk_widget().pack(fill="both", expand=True , pady=15, padx=15)
        else:
            not_data = ctk.CTkFrame(master=graphique, corner_radius=corner1, fg_color=couleur1)
            not_data.pack(expand=True, fill="both", padx=10, pady=10)
            pas_de_donn√©es = ctk.CTkLabel(master=not_data, text="Pas assez de donn√©es pour afficher un graphique.\nAjoute quelques s√©ances d'entra√Ænement pour voir votre √©volution !",
                                          font=(font_secondaire, taille2), wraplength=575)
            pas_de_donn√©es.pack(padx=15, pady=15)
            button_creer_activite = ctk.CTkButton(master=not_data, text="‚ûï Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                                            corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                            command=lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id)])
            button_creer_activite.pack(padx=(20, 2), pady=5)
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    titre_c_quoi = ctk.CTkLabel(master=info, text="C'est quoi la charge d'entra√Ænement ?", font=(font_secondaire, taille2), wraplength=600)
    titre_c_quoi.pack(fill="both", expand=True, pady=(10, 10), padx=10)
    c_quoi = ctk.CTkLabel(master=info, 
                            text="La charge d'entra√Ænement sert √† optimiser ta progression sans te cramer, en trouvant le juste √©quilibre entre l'effort fourni et la r√©cup√©ration n√©cessaire. C'est ton meilleur ami pour √©viter les blessures et planifier tes s√©ances sportives intelligemment.",
                            font=(font_principale, taille3), wraplength=600)
    c_quoi.pack(fill="both", expand=True, padx=10, pady=(5, 10))

def mon_compte(account_id):
    navbar_mon_compte(account_id, "Mon compte")
    info = ctk.CTkFrame(master=app, corner_radius=corner1, fg_color=couleur1)
    info.pack(padx=15, pady=20)

    curseur.execute("SELECT sport FROM Account WHERE id = ?", (account_id,))
    result1 = curseur.fetchall()
    sport = result1[0][0]
    curseur.execute("SELECT bio FROM Account WHERE id = ?", (account_id,))
    result2 = curseur.fetchall()
    bio = result2[0][0]
    curseur.execute("SELECT username FROM Account WHERE id = ?", (account_id,))
    result3 = curseur.fetchall()
    username = result3[0][0]

    info = ctk.CTkLabel(master=info ,text=
                        f"Ton ID : {account_id}\n\nTon pseudo : {username}\n\nTon sport favoris : {sport if sport is not None else "Tu n'as pas de sport."}\n\nTa bio : {bio if bio is not None else "Tu n'as pas de bio."}", 
                        font=(font_principale, taille2), justify="left", wraplength=800)
    info.pack(padx=20, pady=20)

def parametre(account_id):
    sidebar_param√®tre(account_id)

    def actu():
        messagebox.showinfo("Information", "Ton navigateur par d√©faut va s'ouvrir pour que tu puisses avoir acc√®s aux actualit√©s sur Sprintia.")
        webbrowser.open("https://github.com/Gabriel0925/Sprintia/tree/main/Actu")
    def beta_testeur():
        messagebox.showwarning("Information", "Ton navigateur va s'ouvrir pour que tu puisses t√©l√©charger le programme b√™ta. Juste un rappel important : une version b√™ta n‚Äôest pas adapt√©e √† tous les utilisateurs. Je t‚Äôinvite √† bien consulter la documentation avant de commencer.")
        webbrowser.open("https://github.com/Gabriel0925/Sprintia/tree/main/Programme%20B%C3%8ATA")

    Titre = ctk.CTkLabel(master=app ,text="Param√®tres", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=50, pady=20)

    frame_bouton = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_bouton.pack(pady=(20,0), padx=10)
    frame_bouton1 = ctk.CTkFrame(master=frame_bouton, fg_color="transparent")
    frame_bouton1.pack(pady=(20,0), padx=10)
    frame_bouton2 = ctk.CTkFrame(master=frame_bouton, fg_color="transparent")
    frame_bouton2.pack(pady=(10,0), padx=10)
    frame_bouton3 = ctk.CTkFrame(master=frame_bouton, fg_color="transparent")
    frame_bouton3.pack(pady=(10,0), padx=10)
    frame_bouton4 = ctk.CTkFrame(master=frame_bouton, fg_color="transparent")
    frame_bouton4.pack(pady=(10,0), padx=10)
    frame_bouton5 = ctk.CTkFrame(master=frame_bouton, fg_color="transparent")
    frame_bouton5.pack(pady=(10,20), padx=10)

    button_autre = ctk.CTkButton(master=frame_bouton1, text="üë§ Mon Compte",
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3), fg_color=couleur2, 
                           hover_color=couleur2_hover, text_color=couleur1, 
                           command=lambda: [vider_fenetre(app), mon_compte(account_id)])
    button_autre.pack(side="left" ,padx=10, pady=0)
    button_info = ctk.CTkButton(master=frame_bouton1, text="üì¢ √Ä propos", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1, 
                           command=lambda: [vider_fenetre(app), a_propos(account_id)])
    button_info.pack(side="left", pady=0, padx=10)
    button_nouveaut√© = ctk.CTkButton(master=frame_bouton2, text="‚ú® Quoi de neuf dans Sprintia 3.1", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), quoi_de_neuf(account_id)])
    button_nouveaut√©.pack(side="left", pady=0, padx=10)
    button_avis = ctk.CTkButton(master=frame_bouton2, text="üÜï Proposer une fonction", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1, 
                           command=lambda: [vider_fenetre(app), proposer_fonction(account_id)])
    button_avis.pack(side="left", pady=0, padx=10) 
    button_avis = ctk.CTkButton(master=frame_bouton3, text="üï∑Ô∏è  Signaler un bug", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1, 
                           command=lambda: [vider_fenetre(app), signaler_bug(account_id)])
    button_avis.pack(side="left", pady=0, padx=10) 
    button_avis = ctk.CTkButton(master=frame_bouton3, text="üí¨ R√©diger un avis", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1, 
                           command=lambda: [vider_fenetre(app), avis(account_id)])
    button_avis.pack(side="left", pady=0, padx=10)
    button_avis = ctk.CTkButton(master=frame_bouton4, text="üì∞ Actu Sprintia", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1, 
                           command=actu)
    button_avis.pack(side="left", pady=0, padx=10)   
    button_avis = ctk.CTkButton(master=frame_bouton4, text="üß™ Rejoindre la b√™ta", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1, 
                           command=beta_testeur)
    button_avis.pack(side="left", pady=0, padx=10)      
    button_deco = ctk.CTkButton(master=frame_bouton5, text="üö™D√©connexion",
                            corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                            fg_color="#AC1724", hover_color="#E32131",
                            command=lambda: [vider_fenetre(app), connexion()])
    button_deco.pack(side="left" ,padx=10, pady=0)

def interface_exercice(account_id, type_de_cat√©gorie, headers, requ√™te_sql):
    global periode_s√©l√©ctionner #global = pour dire que la variable existe en dehors de la fonction et que je vais la modifier
    sidebar_exercice(account_id)

    boite2 = ctk.CTkFrame(master=app, fg_color="transparent", corner_radius=corner3)
    boite2.pack(side="top", fill="x", pady=20)
    topbar = ctk.CTkFrame(master=boite2, fg_color="transparent", corner_radius=corner3)
    topbar.pack(anchor="center")
    element_topbar = ctk.CTkFrame(master=topbar, fg_color="transparent")
    element_topbar.pack()

    boite_semi_header = ctk.CTkFrame(master=app, fg_color="transparent")
    boite_semi_header.pack(side="top", pady=10)

    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)

    button_supprimer = ctk.CTkButton(master=element_topbar, text="üóëÔ∏è Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=lambda: supprimer_activit√©(account_id, avoir_periode(combo_periode.get(), options_periode)))
    button_supprimer.pack(side="right", padx=2, pady=5)
    button_creer_activite = ctk.CTkButton(master=element_topbar, text="‚ûï Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id)])
    button_creer_activite.pack(side="right", padx=(20, 2), pady=5)
    info = ctk.CTkLabel(master=element_topbar, text="Historique d'entra√Ænement", font=(font_secondaire, taille1), text_color=couleur_text)
    info.pack(side="right", padx=20)
    options_periode = {"1 semaine": 7, "1 mois": 30, "3 mois": 90, "6 mois": 180, "1 an": 365, "Tout voir": 9999}
    combo_periode = ctk.CTkComboBox(master=element_topbar, values=list(options_periode.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur2, button_color=couleur2, fg_color=couleur2,
                                    corner_radius=corner2, width=220, dropdown_fg_color=couleur2, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    combo_periode.pack(side="right", padx=(10, 20), pady=5)
    def avoir_periode(selection_text, options_dict):
        jours_a_soustraire = options_dict[selection_text]
        date_debut = date_actuelle - timedelta(days=jours_a_soustraire)
        return date_debut.strftime('%Y-%m-%d')
    
    def mise_mode(choix):
        choix = mode_activit√©.get()
        navigation = {
            "Ext√©rieur": lambda: [vider_fenetre(app), exercice_ext√©rieur(account_id)],
            "Int√©rieur": lambda: [vider_fenetre(app), exercice_int√©rieur(account_id)],
            "Musculation": lambda: [vider_fenetre(app), exercice_musculation(account_id)],
            "Football": lambda: [vider_fenetre(app), exercice_football(account_id)],
            "Tous": lambda: [vider_fenetre(app), exercice(account_id)],
            "Course": lambda: [vider_fenetre(app), exercice_course(account_id)]
        }
        app.after(0, navigation[choix])

    mode_activit√© = ctk.CTkSegmentedButton(master=boite_semi_header, values=["Tous", "Ext√©rieur", "Int√©rieur", "Course", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set(type_de_cat√©gorie)
    if type_de_cat√©gorie == "Musculation":
        wraplength_tableau = 100
    elif type_de_cat√©gorie == "Tous":
        wraplength_tableau = 180
    elif type_de_cat√©gorie == "Course":
        wraplength_tableau = 100
    else:
        wraplength_tableau = 130

    if type_de_cat√©gorie == "Musculation":
        padx_tableau = 2
    elif type_de_cat√©gorie == "Tous":
        padx_tableau = 15
    elif type_de_cat√©gorie == "Course":
        padx_tableau = 2
    elif type_de_cat√©gorie == "Int√©rieur":
        padx_tableau = 15
    elif type_de_cat√©gorie == "Football":
        padx_tableau = 8
    elif type_de_cat√©gorie == "Ext√©rieur":
        padx_tableau = 10

    def mettre_a_jour_historique(selection):
        global periode_s√©l√©ctionner
        periode_s√©l√©ctionner = selection
        for widget in tableau_frame.winfo_children():
            widget.grid_remove()
        try:
            jours_a_soustraire = options_periode[selection]
            date_debut = date_actuelle - timedelta(days=jours_a_soustraire)
            p√©riode_str_pour_requete = date_debut.strftime('%Y-%m-%d')
            curseur.execute(f"{requ√™te_sql}", (account_id, p√©riode_str_pour_requete))
            activites = curseur.fetchall()
            for colonne, header_text in enumerate(headers):
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=wraplength_tableau)
                label.grid(row=0, column=colonne, padx=padx_tableau, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(colonne, weight=1)
            if activites:
                for ligne, activite in enumerate(activites):
                    for colonne, data in enumerate(activite):
                        try:
                            if colonne == 1:
                                data = datetime.strptime(str(data), '%Y-%m-%d').strftime('%d-%m-%Y')
                        except:
                            if colonne == 0:
                                data = datetime.strptime(str(data), '%Y-%m-%d').strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=ligne + 1, column=colonne, padx=10, pady=15, sticky="ew")
            else:
                pas_donnees = ctk.CTkLabel(master=tableau_frame, text="Aucune activit√© enregistr√©e pour cette p√©riode.", font=(font_principale, taille1))
                pas_donnees.grid(row=1, column=0, columnspan=len(headers), pady=20)
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de ton historique !")
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    combo_periode.configure(command=mettre_a_jour_historique)
    combo_periode.set(periode_s√©l√©ctionner)
    mettre_a_jour_historique(periode_s√©l√©ctionner)
    aide_bienvenue(account_id)

def exercice_course(account_id):
    requ√™te_sql = "SELECT date_activit√©, dur√©e, rpe, nom, distance, allure, d√©nivel√©, vitesse_max FROM Activit√©_running WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
    headers = ["Date", "Dur√©e", "RPE", "Type", "Distance", "Allure", "D√©nivel√©", "Vitesse max"]
    interface_exercice(account_id, "Course", headers, requ√™te_sql)

def exercice_int√©rieur(account_id):
    requ√™te_sql = "SELECT sport, date_activit√©, dur√©e, rpe, nom FROM Activit√©_int√©rieur WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
    headers = ["Sport", "Date", "Dur√©e", "RPE", "Type"]
    interface_exercice(account_id, "Int√©rieur", headers, requ√™te_sql)

def exercice_football(account_id):
    requ√™te_sql = "SELECT date_activit√©, dur√©e, rpe, type_de_s√©ances, humeur, but, passe_d√©cisive, score FROM Activit√©_football WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
    headers = ["Date", "Dur√©e", "RPE", "Type", "Humeur", "But", "Passe D", "Score"]
    interface_exercice(account_id, "Football", headers, requ√™te_sql)

def exercice_musculation(account_id):
    requ√™te_sql = "SELECT date_activit√©, lieu, dur√©e, rpe, √©quipement, muscle_travaill√©, r√©p√©titions, s√©rie, volume FROM Activit√©_musculation WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
    headers = ["Date", "Lieu", "Dur√©e", "RPE", "Type", "Muscle", "R√©p", "S√©rie", "Volume"]
    interface_exercice(account_id, "Musculation", headers, requ√™te_sql)

def exercice_ext√©rieur(account_id):
    requ√™te_sql = "SELECT sport, date_activit√©, dur√©e, rpe, nom, distance, d√©nivel√© FROM Activit√©_ext√©rieur WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
    headers = ["Sport", "Date", "Dur√©e", "RPE", "Type", "Distance", "D√©nivel√©"]
    interface_exercice(account_id, "Ext√©rieur", headers, requ√™te_sql)

def exercice(account_id):
    requ√™te_sql = "SELECT sport, date_activit√©, dur√©e, rpe, ROUND(charge, 1) FROM Activit√© WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
    headers = ["Sport", "Date", "Dur√©e", "RPE", "Charge d'entra√Ænement"]
    interface_exercice(account_id, "Tous", headers, requ√™te_sql)

def connexion():
    cadre_connection = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_connection.pack(fill="both", expand=True)

    boite_g√©ante = ctk.CTkFrame(master=cadre_connection, fg_color="transparent")        
    boite_g√©ante.place(relx=0.5, rely=0.5, anchor=ctk.CENTER)
    boite1 = ctk.CTkFrame(master=boite_g√©ante, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color="transparent")        
    boite1.pack(side="left", pady=10, padx=20, fill="both", expand=True)
    titre = ctk.CTkFrame(master=boite1, fg_color="transparent")        
    titre.pack(pady=(20, 10), padx=20)
    message = ctk.CTkFrame(master=boite1, fg_color="transparent")        
    message.pack(pady=(0, 10), padx=10)
    frame_bouton = ctk.CTkFrame(master=boite1, fg_color="transparent")
    frame_bouton.pack(fill="x", pady=(20, 10), padx=20)
    carte_connexion = ctk.CTkFrame(master=boite1, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(fill="x", pady=(20, 5), padx=20)  
    bouton_action = ctk.CTkFrame(master=boite1, fg_color="transparent")        
    bouton_action.pack(fill="x", pady=5, padx=20)
    boite2 = ctk.CTkFrame(master=boite_g√©ante, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color="transparent")        
    boite2.pack(side="right", pady=10, padx=20, fill="both", expand=True)
    img = ctk.CTkFrame(master=boite2, fg_color="transparent")        
    img.pack(pady=20, padx=20)

    Titre = ctk.CTkLabel(master=titre ,text="Bienvenue sur Sprintia\n", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack()
    messages = ctk.CTkLabel(master=message ,text="Content de te revoir !", font=(font_principale, taille2), text_color=couleur_text)
    messages.pack()

    button_connection = ctk.CTkButton(master=frame_bouton, text="‚úîÔ∏è Connexion", fg_color=couleur1, hover_color=couleur1_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), connexion()])
    button_connection.pack(expand=True, fill="x", side="left", padx=1)
    button_inscription = ctk.CTkButton(master=frame_bouton, text="Inscription", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                           command=lambda: [vider_fenetre(app), inscription()])
    button_inscription.pack(expand=True, fill="x", side="right", padx=1)

    app.bind('<Return>', lambda event: verifier_identifiants())
    username_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Pseudo", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white")
    username_entry.pack(fill="x", pady=(10, 5), padx=10)
    password_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Mot de passe", show="*", border_color=couleur1,fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white")
    password_entry.pack(fill="x", pady=(0, 10), padx=10)

    def verifier_identifiants():
        username = username_entry.get().strip()
        password = password_entry.get().strip()

        if not username or not password:
            messagebox.showerror("Champs manquants", "Le pseudo et le mot de passe ne peuvent pas √™tre vides")
            return
        hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()
        try:
            curseur.execute("SELECT id FROM Account WHERE username = ? AND password = ?", (username, hashed_password))
            result = curseur.fetchone()

            if result:
                account_id = result[0]
                vider_fenetre(app)
                exercice(account_id)
            else:
                messagebox.showerror("Erreur", "Identifiants incorrects, r√©essaye !")
        except sqlite3.Error as e:
            messagebox.showwarning("Erreur", "Erreur de base de donn√©es lors de la connexion √† ton compte !")
        except Exception as e:
            messagebox.showwarning("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_valider = ctk.CTkButton(master=bouton_action, text="Se connecter", fg_color=couleur1, hover_color=couleur1_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille2), command=verifier_identifiants)
    button_valider.pack(fill="x", pady=(0, 10))

    mon_image_pil = Image.open(mode_image)
    largeur_img = 300
    hauteur_img = 400
    image_redimensionner = mon_image_pil.resize((largeur_img, hauteur_img), Image.Resampling.LANCZOS)
    CTk_image = ctk.CTkImage(light_image=image_redimensionner, dark_image=image_redimensionner, size=(largeur_img, hauteur_img))
    label_image = ctk.CTkLabel(master=img, image=CTk_image, text="")
    label_image.pack()

def inscription():
    cadre_inscription = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_inscription.pack(fill="both", expand=True)

    boite_g√©ante = ctk.CTkFrame(master=cadre_inscription, fg_color="transparent")        
    boite_g√©ante.place(relx=0.5, rely=0.5, anchor=ctk.CENTER)
    boite1 = ctk.CTkFrame(master=boite_g√©ante, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color="transparent")        
    boite1.pack(side="left", pady=10, padx=20, fill="both", expand=True)
    titre = ctk.CTkFrame(master=boite1, fg_color="transparent")        
    titre.pack(pady=(20, 10), padx=20)
    message = ctk.CTkFrame(master=boite1, fg_color="transparent")        
    message.pack(pady=(0, 10), padx=10)
    frame_bouton = ctk.CTkFrame(master=boite1, fg_color="transparent")
    frame_bouton.pack(fill="x", pady=(20, 10), padx=20)
    carte_inscription = ctk.CTkFrame(master=boite1, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_inscription.pack(fill="x", pady=(20, 5), padx=20)  
    bouton_action = ctk.CTkFrame(master=boite1, fg_color="transparent")        
    bouton_action.pack(fill="x", pady=5, padx=20)
    boite2 = ctk.CTkFrame(master=boite_g√©ante, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color="transparent")        
    boite2.pack(side="right", pady=10, padx=20, fill="both", expand=True)
    img = ctk.CTkFrame(master=boite2, fg_color="transparent")        
    img.pack(fill="both", expand=True, padx=20, pady=50)

    Titre = ctk.CTkLabel(master=titre ,text="Bienvenue sur Sprintia\n", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack()
    message = ctk.CTkLabel(master=message ,text="Pr√™t √† atteindre tes objectifs sportifs ? Tu es au bon endroit !", font=(font_principale, taille2), 
                           text_color=couleur_text, wraplength=400)
    message.pack()

    button_connection = ctk.CTkButton(master=frame_bouton, text="Connexion", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                           command=lambda: [vider_fenetre(app), connexion()])
    button_connection.pack(expand=True, fill="x", side="left", padx=1)
    button_inscription = ctk.CTkButton(master=frame_bouton, text="‚úîÔ∏è  Inscription", fg_color=couleur1, hover_color=couleur1_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), inscription()])
    button_inscription.pack(expand=True, fill="x", side="right", padx=1)

    app.bind('<Return>', lambda event: verifier_identifiants_connexion())
    username_entry = ctk.CTkEntry(master=carte_inscription, placeholder_text="Pseudo", border_color=couleur1,fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white")
    username_entry.pack(fill="x", pady=(10, 5), padx=10)
    password_entry = ctk.CTkEntry(master=carte_inscription, placeholder_text="Mot de passe", show="*", border_color=couleur1,fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white")
    password_entry.pack(fill="x", pady=(0, 5), padx=10)
    password_confirm= ctk.CTkEntry(master=carte_inscription, placeholder_text="Confirmer mot de passe", show="*", border_color=couleur1,
                                   fg_color=couleur1, height=entry_height, font=(font_principale, taille3), corner_radius=corner1, 
                                   placeholder_text_color ="white", text_color="white")
    password_confirm.pack(fill="x", pady=(0, 10), padx=10)
    
    def verifier_identifiants_connexion():
        username = username_entry.get().strip()
        password = password_entry.get().strip()
        password_confirmation = password_confirm.get().strip()
        password_encode = password.encode("UTF-8")
        try:
            if not username_entry or not password_entry:
                messagebox.showerror("Champs manquants", "Le pseudo et le mot de passe ne peuvent pas √™tre vides !")
                return
            if password != password_confirmation:
                messagebox.showerror("Erreur", "Les mots de passe ne correspondent pas !")
                return
            if (password_valide(password)):
                sha256 = hashlib.sha256()
                sha256.update(password_encode)
                hashed_password = sha256.hexdigest()
                curseur.execute("INSERT INTO Account (username, password) VALUES (?, ?)", (username, hashed_password))
                con.commit()
                account_id = curseur.lastrowid
                messagebox.showinfo("Inscription r√©ussie", f"Bienvenue {username} !")
                vider_fenetre(app)
                exercice(account_id)
        except sqlite3.IntegrityError as e:
            messagebox.showerror("Erreur", "Ce pseudo est d√©j√† utilis√©. Essaye d'en utiliser un autre !")
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'inscription !")
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_valider = ctk.CTkButton(master=bouton_action, text="S'incrire", fg_color=couleur1, hover_color=couleur1_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille2), command=verifier_identifiants_connexion)
    button_valider.pack(fill="x", pady=(0, 10))

    mon_image_pil = Image.open(mode_image)
    largeur_img = 300
    hauteur_img = 400
    image_redimensionner = mon_image_pil.resize((largeur_img, hauteur_img), Image.Resampling.LANCZOS)
    CTk_image = ctk.CTkImage(light_image=image_redimensionner, dark_image=image_redimensionner, size=(largeur_img, hauteur_img))
    label_image = ctk.CTkLabel(master=img, image=CTk_image, text="")
    label_image.pack()

def mettre_√†_jour_base_de_don√©es():
    try:
        curseur.execute("DROP TABLE Pauses")
    except sqlite3.Error as e:
        pass
    try:
        curseur.execute("DROP TABLE Aide")
    except sqlite3.Error as e:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√©_football ADD COLUMN score TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Aide ADD COLUMN modifier_objectif TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Aide ADD COLUMN modifier_comp√©tition TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Aide ADD COLUMN bienvenue TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√©_football DROP COLUMN distance")
        curseur.execute("ALTER TABLE Activit√©_football DROP COLUMN r√©p√©titions")
        curseur.execute("ALTER TABLE Activit√©_football DROP COLUMN s√©rie")
        curseur.execute("ALTER TABLE Activit√©_football DROP COLUMN volume")
        curseur.execute("ALTER TABLE Activit√©_football DROP COLUMN √©quipement")
        curseur.execute("ALTER TABLE Activit√©_football DROP COLUMN lieu")
        curseur.execute("ALTER TABLE Activit√©_football DROP COLUMN d√©nivel√©")
        curseur.execute("ALTER TABLE Activit√©_football DROP COLUMN fatigue")
        curseur.execute("ALTER TABLE Activit√©_football DROP COLUMN douleur")
        curseur.execute("ALTER TABLE Activit√©_football DROP COLUMN climat")
        curseur.execute("ALTER TABLE Activit√©_football DROP COLUMN nom")
        curseur.execute("ALTER TABLE Activit√©_football DROP COLUMN muscle_travaill√©")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN distance")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN r√©p√©titions")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN s√©rie")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN volume")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN √©quipement")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN lieu")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN d√©nivel√©")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN fatigue")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN douleur")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN climat")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN muscle_travaill√©")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN humeur")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN but")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN passe_d√©cisive")
        curseur.execute("ALTER TABLE Activit√©_int√©rieur DROP COLUMN type_de_s√©ances")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√©_musculation DROP COLUMN fatigue")
        curseur.execute("ALTER TABLE Activit√©_musculation DROP COLUMN douleur")
        curseur.execute("ALTER TABLE Activit√©_musculation DROP COLUMN passe_d√©cisive")
        curseur.execute("ALTER TABLE Activit√©_musculation DROP COLUMN type_de_s√©ances")
        curseur.execute("ALTER TABLE Activit√©_musculation DROP COLUMN distance")
        curseur.execute("ALTER TABLE Activit√©_musculation DROP COLUMN d√©nivel√©")
        curseur.execute("ALTER TABLE Activit√©_musculation DROP COLUMN climat")
        curseur.execute("ALTER TABLE Activit√©_musculation DROP COLUMN nom")
        curseur.execute("ALTER TABLE Activit√©_musculation DROP COLUMN humeur")
        curseur.execute("ALTER TABLE Activit√©_musculation DROP COLUMN but")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN douleur")
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN climat")
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN fatigue")
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN muscle_travaill√©")
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN r√©p√©titions")
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN s√©rie")
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN volume")
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN √©quipement")
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN lieu")
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN humeur")
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN but")
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN passe_d√©cisive")
        curseur.execute("ALTER TABLE Activit√©_ext√©rieur DROP COLUMN type_de_s√©ances")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN muscle_travaill√©")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN douleur")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN climat")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN distance")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN d√©nivel√©")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN but")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN r√©p√©titions")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN s√©rie")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN volume")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN √©quipement")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN lieu")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN fatigue")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN nom")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN humeur")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN passe_d√©cisive")
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN type_de_s√©ances")
    except sqlite3.OperationalError:
        pass
    connexion()

def maj_base_de_donn√©es():
    sport_premi√®re_√©tape = "course"
    sport_deuxi√®me_√©tape = "pied"
    sport = "course"
    trail = "trail"
    ultrafond = "ultrafond"
    sport2_premi√®re_√©tape = "course"
    sport2_deuxi√®me_√©tape = "piste"
    sport3_premi√®re_√©tape = "tapis"
    sport3_deuxi√®me_√©tape = "course"
    appris = "fait"
    try:
        # Le %% √ßa cr√©er une recherche et le LIKE √ßa va faire une recherche qui contient "course" et "pied" √ßa veut dire que peut importe ce qu'il y a au milieu ca le transferera quand meme
        curseur.execute("INSERT INTO Activit√©_running (account_id, date_activit√©, sport, dur√©e, distance, d√©nivel√©, rpe, charge, nom) SELECT account_id, date_activit√©, sport, dur√©e, distance, d√©nivel√©, rpe, charge, nom FROM Activit√© WHERE LOWER(sport) LIKE ? AND LOWER(sport) LIKE ?", (f"%{sport_premi√®re_√©tape}%", f"%{sport_deuxi√®me_√©tape}%"))
        curseur.execute("INSERT INTO Activit√©_running (account_id, date_activit√©, sport, dur√©e, distance, d√©nivel√©, rpe, charge, nom) SELECT account_id, date_activit√©, sport, dur√©e, distance, d√©nivel√©, rpe, charge, nom FROM Activit√© WHERE LOWER(sport) LIKE ? AND LOWER(sport) LIKE ?", (f"%{sport2_premi√®re_√©tape}%", f"%{sport2_deuxi√®me_√©tape}%"))
        curseur.execute("INSERT INTO Activit√©_running (account_id, date_activit√©, sport, dur√©e, distance, d√©nivel√©, rpe, charge, nom) SELECT account_id, date_activit√©, sport, dur√©e, distance, d√©nivel√©, rpe, charge, nom FROM Activit√© WHERE LOWER(sport) LIKE ? AND LOWER(sport) LIKE ?", (f"%{sport3_premi√®re_√©tape}%", f"%{sport3_deuxi√®me_√©tape}%"))
        curseur.execute("INSERT INTO Activit√©_running (account_id, date_activit√©, sport, dur√©e, distance, d√©nivel√©, rpe, charge, nom) SELECT account_id, date_activit√©, sport, dur√©e, distance, d√©nivel√©, rpe, charge, nom FROM Activit√© WHERE LOWER(sport) = ?", (sport,))
        curseur.execute("INSERT INTO Activit√©_running (account_id, date_activit√©, sport, dur√©e, distance, d√©nivel√©, rpe, charge, nom) SELECT account_id, date_activit√©, sport, dur√©e, distance, d√©nivel√©, rpe, charge, nom FROM Activit√© WHERE LOWER(sport) = ?", (trail,))
        curseur.execute("INSERT INTO Activit√©_running (account_id, date_activit√©, sport, dur√©e, distance, d√©nivel√©, rpe, charge, nom) SELECT account_id, date_activit√©, sport, dur√©e, distance, d√©nivel√©, rpe, charge, nom FROM Activit√© WHERE LOWER(sport) = ?", (ultrafond,))
        curseur.execute("INSERT INTO Maj_base_de_donn√©e (action) VALUES (?)", (appris,))
        con.commit()
        con.commit()
        mettre_√†_jour_base_de_don√©es()
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©e lors de la mise √† jour de ta base de donn√©es !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

if __name__ == "__main__":
    try:
        con = sqlite3.connect("data_base.db")
        curseur = con.cursor()

        curseur.execute('''CREATE TABLE IF NOT EXISTS Account (id INTEGER PRIMARY KEY AUTOINCREMENT,username TEXT UNIQUE NOT NULL,password TEXT NOT NULL, sport TEXT, bio TEXT)''')
        
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√© (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,rpe INTEGER,charge INTEGER,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_ext√©rieur (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,distance NUMERIC,d√©nivel√© INTEGER,rpe INTEGER,charge INTEGER,nom TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_running (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,distance NUMERIC, vitesse_max NUMERIC, d√©nivel√© INTEGER,rpe INTEGER,charge INTEGER,nom TEXT, allure TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_int√©rieur (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,rpe INTEGER,charge INTEGER,nom TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_musculation (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,muscle_travaill√© TEXT, r√©p√©titions TEXT, s√©rie TEXT, volume NUMERIC, √©quipement TEXT, lieu  TEXT,rpe INTEGER,charge INTEGER,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_football (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER, score TEXT, rpe INTEGER,charge INTEGER,humeur TEXT, but TEXT, passe_d√©cisive TEXT, type_de_s√©ances TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        
        curseur.execute('''CREATE TABLE IF NOT EXISTS Comp√©tition (id INTEGER PRIMARY KEY AUTOINCREMENT,nom TEXT NOT NULL,date TEXT NOT NULL,sport TEXT NOT NULL,objectif TEXT NOT NULL, lieu TEXT,priorit√© TEXT,account_id INTEGER,FOREIGN KEY (account_id) REFERENCES Account(id))''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Objectif (id INTEGER PRIMARY KEY AUTOINCREMENT,sport TEXT NOT NULL,date TEXT NOT NULL,objectif TEXT NOT NULL,fr√©quence TEXT NOT NULL,niveau_d√©but TEXT NOT NULL,niveau_fin TEXT,statut TEXT, account_id INTEGER,FOREIGN KEY (account_id) REFERENCES Account(id))''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Pauses_v2 (id INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER NOT NULL,type TEXT CHECK(type IN ('vacances', 'blessure', 'suspendre')),date_debut TEXT DEFAULT CURRENT_DATE,date_fin TEXT,FOREIGN KEY (account_id) REFERENCES Account(id)  )''')

        curseur.execute('''CREATE TABLE IF NOT EXISTS Aide_rpe (account_id INTEGER NOT NULL,aide TEXT, FOREIGN KEY (account_id) REFERENCES Account(id)  )''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Aide_bienvenue (account_id INTEGER NOT NULL,aide TEXT, FOREIGN KEY (account_id) REFERENCES Account(id)  )''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Aide_objectif (account_id INTEGER NOT NULL,aide TEXT, FOREIGN KEY (account_id) REFERENCES Account(id)  )''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Aide_comp√©tition (account_id INTEGER NOT NULL,aide TEXT, FOREIGN KEY (account_id) REFERENCES Account(id)  )''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Aide_podcast (account_id INTEGER NOT NULL,aide TEXT, FOREIGN KEY (account_id) REFERENCES Account(id)  )''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Maj_base_de_donn√©e (action TEXT)''')
        con.commit()
        ctk.set_appearance_mode("System")
        app = ctk.CTk(fg_color=couleur_fond)
        app.geometry("1050x600")
        app.title("Sprintia")
        try:
            curseur.execute("SELECT username FROM Account")
            result_premiere = curseur.fetchone()
            if result_premiere:
                curseur.execute("SELECT action FROM Maj_base_de_donn√©e")
                result_maj = curseur.fetchone()
                if result_maj and result_maj[0] == "fait": # result[0] = parce que fetchone renvoie ('fait',)
                    mettre_√†_jour_base_de_don√©es()
                else:
                    maj_base_de_donn√©es()
            else:
                curseur.execute("INSERT INTO Maj_base_de_donn√©e (action) VALUES ('fait')")
                mettre_√†_jour_base_de_don√©es()
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es !")
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
        app.protocol("WM_DELETE_WINDOW", fermer_app)
        app.bind("<Control-w>", lambda event: fermer_app())
        app.mainloop()
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la connexion √† la base de donn√©es !")
        con.close()
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    con.close()
