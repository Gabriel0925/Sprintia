import customtkinter as ctk
from CTkMessagebox import CTkMessagebox
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from PIL import Image
import sqlite3
import hashlib
from datetime import datetime, timedelta
from datetime import date
from datetime import time as Time
import matplotlib.pyplot as plt
import seaborn as sns
import webbrowser
from urllib.parse import quote #pour remplir les champs (destinataire,...) dans une app mail

# Couleur
mode_actuel = ctk.get_appearance_mode()
if mode_actuel == "Dark":
    couleur1 = "#3d71a5"
    couleur1_hover = "#4a8bcb"
    couleur2 = "#8CB1C1"
    couleur2_hover = "#ABD1E1"
    couleur_fond = "#131d34"
    couleur_text = "#fbfcfb"
    mode_image = "Logo Sprintia Sombre.png"
else:
    couleur1 = "#4989bc"
    couleur1_hover = "#56a8ea"
    couleur2 = "#B6D8F2"
    couleur2_hover = "#D1EAFD"
    couleur_fond = "#fdfcfa"
    couleur_text = "#3a3a3a"
    mode_image = "Logo Sprintia Clair.png"

# Police d'√©criture
taille1 = 28
taille2 = 20
taille3 = 16
font_principale = "DejaVu Sans"
font_secondaire = "DejaVu Sans Bold"
# Corner Radius
corner1 = 35
corner2 = 5
corner3 = 0
# Bordure
border1 = 2
border2 = 1
# Taille CTkEntry
entry_height = 45
# Taille CTkButton
button_height = 50
button_width = 180

#variables
date_actuelle = date.today()

#heure
maintenant = datetime.now()
heure_actuelle_objet = maintenant.time()
heure_debut = Time(hour=18, minute=0)
heure_fin = Time(hour=23, minute=59)

def vider_fenetre(app):
    for widget in app.winfo_children():
        widget.destroy()

def fermer_app():
    con.close()
    app.quit()

def password_valide(password):
    SpecialSymbol =['$', '@', '#', '%', '?', '!']
    val = True

    if len(password) < 6:
        CTkMessagebox(
            title="Mot de passe invalide",
            message="La longueur doit √™tre d'au moins 6 caract√®res",
            icon="cancel"
        )
        val = False

    if len(password) > 20:
        CTkMessagebox(
            title="Mot de passe invalide",
            message="La longueur ne doit pas d√©passer 20 caract√®res",
            icon="cancel"
        )
        val = False

    if not any(char.isdigit() for char in password):
        CTkMessagebox(
            title="Mot de passe invalide",
            message="Le mot de passe doit contenir au moins un chiffre",
            icon="cancel"
        )
        val = False

    if not any(char.isupper() for char in password):
        CTkMessagebox(
            title="Mot de passe invalide",
            message="Le mot de passe doit contenir au moins une lettre majuscule",
            icon="cancel"
        )
        val = False

    if not any(char.islower() for char in password):
        CTkMessagebox(
            title="Mot de passe invalide",
            message="Le mot de passe doit contenir au moins une lettre minuscule",
            icon="cancel"
        )
        val = False

    if not any(char in SpecialSymbol for char in password):
        CTkMessagebox(
            title="Mot de passe invalide",
            message="Le mot de passe doit contenir au moins un des symboles sp√©ciaux : $@#%?!",
            icon="cancel"
        )
        val = False
    if val:
        return val

def reglage_par_default():
    ctk.set_appearance_mode("System")
    connection()

def a_propos(account_id, username, password):
    cadre_maj = ctk.CTkFrame(master=app, fg_color=couleur_fond)      
    cadre_maj.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_maj, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    frame_maj = ctk.CTkFrame(master=cadre_maj, fg_color="transparent")
    frame_maj.pack(pady=10)
    titre_frame = ctk.CTkFrame(master=frame_maj, fg_color="transparent")
    titre_frame.pack(side="left" , pady=10)
    bouton = ctk.CTkFrame(master=frame_maj, fg_color="transparent")
    bouton.pack(side="right", pady=10, padx=(50, 0))

    Titre = ctk.CTkLabel(master=titre_frame ,text="√Ä propos", font=(font_secondaire, taille1))
    Titre.pack(pady=20)
    button_back = ctk.CTkButton(master=bouton, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_back.pack(side="left", padx=5, pady=10)

    frame_slogan = ctk.CTkFrame(master=cadre_maj, fg_color="transparent")
    frame_slogan.pack(padx=10, pady=(20, 10))
    slogan = ctk.CTkLabel(master=frame_slogan, text="Sprintia est con√ßue pour vous aid√©s avant et apr√®s un entra√Ænement",
                          font=(font_principale, taille2))
    slogan.pack()

    frame_tout = ctk.CTkFrame(master=cadre_maj, fg_color=couleur2, corner_radius=corner1)
    frame_tout.pack(pady=(20, 10))
    frame_version = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame_version.pack(padx=10, pady=(10, 5))
    frame_dev = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame_dev.pack(padx=10, pady=(5, 10))

    version = ctk.CTkLabel(master=frame_version, text="Version Sprintia : ",
                          font=(font_principale, taille2), text_color=couleur1)
    version.pack(side="left", padx=10, pady=5)
    num_version = ctk.CTkLabel(master=frame_version, text="3.0.1",
                          font=(font_principale, taille2), text_color=couleur1)
    num_version.pack(side="left", padx=10, pady=5)
    nom_dev = ctk.CTkLabel(master=frame_dev, text="Sprintia est d√©velopp√© par Gabriel Chapet",
                          font=(font_principale, taille2), text_color=couleur1)
    nom_dev.pack(side="right", padx=10, pady=5)

    conteneur = ctk.CTkFrame(master=cadre_maj, fg_color=couleur_fond, corner_radius=corner1,
                             border_width=border1, border_color=couleur1)
    conteneur.pack(fill="x", expand=True, padx=25, pady=10)
    sous_titre= ctk.CTkLabel(master=conteneur, text="Pourquoi j'ai cr√©√© Sprintia ?", font=(font_secondaire, taille2))
    sous_titre.pack(pady=10)
    pourquoi = ctk.CTkLabel(master=conteneur, text="J'ai lanc√© Sprintia parce que pour moi, on n'a pas besoin de d√©penser des fortunes pour avoir de la qualit√©. C'est un peu comme avec" \
                        "les montres connect√©es : on ne devrait pas √™tre oblig√© d'acheter la toute derni√®re et la plus ch√®re pour pouvoir profiter des derni√®res fonctionnalit√©s." \
                        "De plus, certains constructeurs de montre connect√©es ce permettre de mettre un abonnement pour pouvoir b√©nifici√© de tout les fonctionnalit√©s !" \
                        "Du coup, j'ai d√©cid√© de cr√©er Sprintia pour faire les choses √† ma mani√®re !",
                        font=(font_principale, taille3), wraplength=950)
    pourquoi.pack(padx=10)
    sous_titre2= ctk.CTkLabel(master=conteneur, text="Qui suis-je ?", font=(font_secondaire, taille2))
    sous_titre2.pack(pady=10)
    quisuisje = ctk.CTkLabel(master=conteneur, 
                            text="J'adore le sport, la tech et l'imformatique. Ce que j'adore dans le sport," \
                            " c'est les algorithmes qui vont m'aider √† m'entra√Æner et √† progresser dans mon sport, sans avoir de coach." \
                            " Je d√©veloppe Sprintia pour vous aider √† vous entra√Æner gratuitement sans mat√©riel. Le seul mat√©riel requis" \
                            " pour faire fonctionner les algorithmes c'est une montre avec un chrono ou m√™me un smartphone peut suffire pour utiliser Sprintia.",
                            font=(font_principale, taille3),  wraplength=950)
    quisuisje.pack(padx=10, pady=10)

def verifier_pause(account_id):
    #AND date_fin IS NULL = Cible uniquement les pause non termin√©s.
    curseur.execute("""SELECT type FROM Pauses WHERE account_id = ? AND date_fin IS NULL""", (account_id,))
    result = curseur.fetchone()
    return result[0] if result else None

def supprimer_activit√©(account_id, username, password, p√©riode_str):
    vider_fenetre(app)
    cadre_activit√© = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_activit√©.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w", command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    frame = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame.pack(pady=(20, 10))
    carte_connexion = ctk.CTkFrame(master=cadre_activit√©, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(pady=(20, 5), padx=20) 

    Titre = ctk.CTkLabel(master=frame, text="Supprimer une activit√©", 
                font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    app.bind('<Return>', lambda event: supression(account_id, username, password))
    choix_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="ID de l'activit√© √† supprimer", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    choix_entry.pack(pady=10, side="left", padx=10)

    frame_boutons = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
            curseur.execute("SELECT id_activit√©, date_activit√©, nom, sport, dur√©e, distance, rpe FROM Activit√© WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC", (account_id, p√©riode_str))
            activites = curseur.fetchall()

            headers = ["ID", "Date", "Nom", "Sport", "Dur√©e (min)", "Distance", "RPE"]

            for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40)
                label.grid(row=0, column=col_idx, padx=15, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)

            if activites:
                for row_idx, activite in enumerate(activites):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            date_activit√© = datetime.strptime(data, '%Y-%m-%d')
                            data = date_activit√©.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=15, pady=15, sticky="ew")
            else:
                pas_donnees = ctk.CTkLabel(master=tableau_frame, text="Aucune activit√© enregistr√©e pour cette p√©riode.", font=(font_principale, taille1))
                pas_donnees.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de la r√©cup√©ration de l'historique.",
                icon="cancel"
            )
    except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    def supression(account_id, username, password):
            choix = choix_entry.get().strip()
            try:
                choix_id_saisi = int(choix)
                ids_objectifs_disponibles = [obj[0] for obj in activites]

                if choix_id_saisi in ids_objectifs_disponibles:
                    objectif_id_db = choix_id_saisi
                    curseur.execute("DELETE FROM Activit√© WHERE id_activit√© = ? AND account_id = ?", (objectif_id_db, account_id))
                    con.commit()
                    CTkMessagebox(
                        title="Suppression r√©ussie",
                        message="Activit√© supprim√©e avec succ√®s.",
                        icon="check"
                    )
                    app.after(1500, lambda: [vider_fenetre(app), supprimer_activit√©(account_id, username, password, p√©riode_str)])
                else:
                    CTkMessagebox(
                        title="Erreur",
                        message="L'ID de l'activit√© saisie n'existe pas ou n'appartient pas √† votre compte.",
                        icon="cancel"
                    )
            except sqlite3.Error as e:
                CTkMessagebox(
                    title="Erreur base de donn√©es",
                    message="Erreur de base de donn√©es lors de la suppression de l'activit√©.",
                    icon="cancel"
                )
            except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: supression(account_id, username, password))
    button_check.pack(side="left", padx=2, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_retour.pack(side="left", padx=2, pady=20)

def ajouter_activit√©_int√©rieur(account_id, username, password):
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}

    cadre_principal = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_principal.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_principal, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w", command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    frame1 = ctk.CTkFrame(master=cadre_principal, fg_color="transparent")        
    frame1.pack(pady=20)
    navbar = ctk.CTkFrame(master=cadre_principal, fg_color="transparent")
    navbar.pack(pady=(0, 10))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter une activit√©", 
                font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id, username, password)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_int√©rieur(account_id, username, password)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_musculation(account_id, username, password)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_fooball(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Ext√©rieur", "Int√©rieur", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Int√©rieur")
    bouton_retour = ctk.CTkButton(master=navbar, text="üîô Retour", corner_radius=corner2, fg_color=couleur2, hover_color=couleur2_hover, 
                                height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    bouton_retour.pack(side="left", padx=10)

    frame_activit√© = ctk.CTkFrame(master=cadre_principal, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(padx=10, pady=(10, 0))
    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=10, pady=(20, 10))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=10, pady=10)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=10, pady=(10, 20))
    frame_champs4 = ctk.CTkFrame(master=cadre_principal, fg_color="transparent")
    frame_champs4.pack(padx=10, pady=(40, 10))

    app.bind('<Return>', lambda event: enregistrer())

    date_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=10)
    sport_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Sport", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="left", padx=10)
    duree_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Dur√©e (min)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    duree_entry.pack(side="left", padx=10)

    rpe_label = ctk.CTkLabel(master=frame_champs2, text="RPE", font=(font_principale, taille3), text_color=couleur_text)
    rpe_label.pack(side="left", padx=(75, 0))
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs2, width=400, height=20, from_=1, to=10, number_of_steps=9, command=valeur_rpe,
                              progress_color=couleur1, button_color=couleur1, button_hover_color=couleur1_hover,
                              corner_radius=10, button_length=15, fg_color=couleur_text)
    rpe_entry.pack(side="left", padx=10)
    nom_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Nom", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    nom_entry.pack(side="left", padx=(75, 10))

    fatigue_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_fatigue.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    fatigue_entry.pack(side="left", padx=10)
    fatigue_entry.set("Fatigue post-entra√Ænement")

    douleur_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_douleur.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    douleur_entry.pack(side="left", padx=10)
    douleur_entry.set("Douleur post-entra√Ænement")

    def enregistrer():
        nom = nom_entry.get().strip()
        date_str = date_entry.get().strip()
        date_obj = datetime.strptime(date_str, '%d-%m-%Y')
        if date_obj > datetime.now():
            CTkMessagebox(
                title="Erreur", 
                message="La date ne peut pas √™tre dans le futur", 
                icon="cancel"
            )
            return 
        date = date_obj.strftime('%Y-%m-%d')
        
        sport = sport_entry.get().strip()
        if not sport:
            CTkMessagebox(
                title="Erreur",
                message="Le sport est obligatoire", 
                icon="cancel")
            return 
        try:
            duree = int(duree_entry.get().strip())
            if duree <= 0:
                raise ValueError
        except ValueError:
            CTkMessagebox(
                title="Erreur", 
                message="Dur√©e invalide (entier positif requis)", 
                icon="cancel"
            )
            return 
        try:
            rpe = int(rpe_entry.get())
            if not 1 <= rpe <= 10:
                raise ValueError
        except ValueError:
            CTkMessagebox(
                title="Erreur", 
                message="RPE invalide (1-10 requis)", 
                icon="cancel"
            )
            return
        douleur = Options_douleur.get(douleur_entry.get().strip())
        fatigue = Options_fatigue.get(fatigue_entry.get().strip())
        if fatigue is None:
            CTkMessagebox(
                title="Erreur", 
                message="Valeur de fatigue invalide", 
                icon="cancel"
            )
            return
        if douleur is None:
            CTkMessagebox(
                title="Erreur", 
                message="Valeur de douleur invalide", 
                icon="cancel"
            )
            return
                                            
        charge_de_base = duree * rpe
        
        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        modificateurs_climat = [0.95, 1.1, 1.05, 1.2]
        
        charge_d = charge_de_base * modificateurs_douleur[douleur]
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge = score_fatigue * charge_d
        try:
            curseur.execute("""INSERT INTO Activit√©_int√©rieur (date_activit√©, sport, dur√©e, rpe, fatigue, douleur, charge, account_id, nom) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, fatigue, douleur, charge, account_id, nom))
            con.commit()
            curseur.execute("""INSERT INTO Activit√© (date_activit√©, sport, dur√©e, rpe, fatigue, douleur, charge, account_id, nom) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, fatigue, douleur, charge, account_id, nom))
            con.commit()
            CTkMessagebox(
                title="Succ√®s",
                message="Votre activit√© a bien √©t√© enregistr√©e !",
                icon="check"
            )
            app.after(1500, lambda: [vider_fenetre(app), ajouter_activit√©_int√©rieur(account_id, username, password)])
        except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de l'ajout de votre activit√©.",
                icon="cancel"
            )
            return
        except Exception as e:
            CTkMessagebox(
                title="Erreur",
                message="Une erreur inattendue s'est produite, veuillez r√©essayer.",
                icon="cancel"
            )
            return
    bouton_valider = ctk.CTkButton(master=frame_champs4, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3), command=lambda : enregistrer())
    bouton_valider.pack(side="left", padx=10)

def ajouter_activit√©_musculation(account_id, username, password):
    Options_matos = ["Poids de corps", "Avec √©quipement"]
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}
    Options_lieu = {"Salle de sport": "salle de sport", "Domicile": "domicile", "Ext√©rieur": "ext√©rieur"}

    cadre_principal = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_principal.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_principal, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w", command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    frame1 = ctk.CTkFrame(master=cadre_principal, fg_color="transparent")        
    frame1.pack(pady=20)
    navbar = ctk.CTkFrame(master=cadre_principal, fg_color="transparent")
    navbar.pack(pady=(0, 10))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter une activit√©", 
                font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id, username, password)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_int√©rieur(account_id, username, password)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_musculation(account_id, username, password)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_fooball(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Ext√©rieur", "Int√©rieur", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Musculation")
    bouton_retour = ctk.CTkButton(master=navbar, text="üîô Retour", corner_radius=corner2, fg_color=couleur2, hover_color=couleur2_hover, 
                                height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    bouton_retour.pack(side="left", padx=10)

    frame_activit√© = ctk.CTkFrame(master=cadre_principal, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(padx=10, pady=(10, 0))
    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=10, pady=(20, 10))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=10, pady=10)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=10, pady=10)
    frame_champs4 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs4.pack(padx=10, pady=(10, 20))
    frame_champs5 = ctk.CTkFrame(master=cadre_principal, fg_color="transparent")
    frame_champs5.pack(padx=10, pady=(40, 10))

    app.bind('<Return>', lambda event: enregistrer())

    date_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=10)
    duree_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Dur√©e (min)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    duree_entry.pack(side="left", padx=10)
    matos_entry = ctk.CTkComboBox(master=frame_champs1, values=Options_matos, font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    matos_entry.pack(side="left", padx=10)
    matos_entry.set("Type d'entra√Ænement")

    rpe_label = ctk.CTkLabel(master=frame_champs2, text="RPE", font=(font_principale, taille3), text_color=couleur_text)
    rpe_label.pack(side="left", padx=(75, 0))
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs2, width=400, height=20, from_=1, to=10, number_of_steps=9, command=valeur_rpe,
                              progress_color=couleur1, button_color=couleur1, button_hover_color=couleur1_hover,
                              corner_radius=10, button_length=15, fg_color=couleur_text)
    rpe_entry.pack(side="left", padx=10)
    muscle_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Muscle travaill√©", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    muscle_entry.pack(side="left", padx=(75, 10))

    fatigue_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_fatigue.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    fatigue_entry.pack(side="left", padx=10)
    fatigue_entry.set("Fatigue post-entra√Ænement")

    douleur_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_douleur.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    douleur_entry.pack(side="left", padx=10)
    douleur_entry.set("Douleur post-entra√Ænement")
    lieu_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_lieu.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    lieu_entry.pack(side="left", padx=10)
    lieu_entry.set("Lieu de la s√©ance")

    rep_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Nombre total de r√©p√©titions", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    rep_entry.pack(side="left", padx=10)
    serie_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Nombre total de s√©rie", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    serie_entry.pack(side="left", padx=10)
    volume_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Volume total (ex : 5.5 kg)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    volume_entry.pack(side="left", padx=10)

    def enregistrer():
        muscle_travaill√© = muscle_entry.get().strip()
        r√©p√©titions = rep_entry.get().strip()
        s√©rie = serie_entry.get().strip()
        volume = volume_entry.get().strip()
        if volume:
            try:
                volume_total = float(volume)
                if volume_total < 0:
                    raise ValueError
            except ValueError:
                CTkMessagebox(
                    title="Erreur", 
                    message="Volume total invalide (entier positif requis)", 
                    icon="cancel"
                )
                return
        else:
            volume_total = None
        date_str = date_entry.get().strip()
        date_obj = datetime.strptime(date_str, '%d-%m-%Y')
        if date_obj > datetime.now():
            CTkMessagebox(
                title="Erreur", 
                message="La date ne peut pas √™tre dans le futur", 
                icon="cancel"
            )
            return 
        date = date_obj.strftime('%Y-%m-%d')
        
        try:
            duree = int(duree_entry.get().strip())
            if duree <= 0:
                raise ValueError
        except ValueError:
            CTkMessagebox(
                title="Erreur", 
                message="Dur√©e invalide (entier positif requis)", 
                icon="cancel"
            )
            return 
        try:
            rpe = int(rpe_entry.get())
            if not 1 <= rpe <= 10:
                raise ValueError
        except ValueError:
            CTkMessagebox(
                title="Erreur", 
                message="RPE invalide (1-10 requis)", 
                icon="cancel"
            )
            return
        douleur = Options_douleur.get(douleur_entry.get().strip())
        fatigue = Options_fatigue.get(fatigue_entry.get().strip())
        lieu = Options_lieu.get(lieu_entry.get().strip())
        √©quipement = matos_entry.get().strip()
        if fatigue is None:
            CTkMessagebox(
                title="Erreur", 
                message="Valeur de fatigue invalide", 
                icon="cancel"
            )
            return
        if douleur is None:
            CTkMessagebox(
                title="Erreur", 
                message="Valeur de douleur invalide", 
                icon="cancel"
            )
            return
        if lieu is None:
            CTkMessagebox(
                title="Erreur", 
                message="Valeur du lieu invalide", 
                icon="cancel"
            )
            return
        if √©quipement is None:
            CTkMessagebox(
                title="Erreur", 
                message="Valeur du type d'entra√Ænement invalide", 
                icon="cancel"
            )
            return
        sport = "Musculation"
                                            
        charge_de_base = duree * rpe
        
        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        if √©quipement == "Avec √©quipement":
            facteur_matos = 1.1
        else:
            facteur_matos = 1.0
        
        charge_d = charge_de_base * modificateurs_douleur[douleur]
        charge_c = charge_d * facteur_matos
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge = score_fatigue * charge_c
        try:
            curseur.execute("""INSERT INTO Activit√©_musculation (date_activit√©, sport, dur√©e, rpe, fatigue, douleur, charge, account_id, muscle_travaill√©, r√©p√©titions, s√©rie, volume, √©quipement, lieu) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, fatigue, douleur, charge, account_id, muscle_travaill√©, r√©p√©titions, s√©rie, volume_total, √©quipement, lieu))
            con.commit()
            curseur.execute("""INSERT INTO Activit√© (date_activit√©, sport, dur√©e, rpe, fatigue, douleur, charge, account_id, muscle_travaill√©, r√©p√©titions, s√©rie, volume, √©quipement, lieu) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, fatigue, douleur, charge, account_id, muscle_travaill√©, r√©p√©titions, s√©rie, volume_total, √©quipement, lieu))
            con.commit()
            CTkMessagebox(
                title="Succ√®s",
                message="Votre activit√© a bien √©t√© enregistr√©e !",
                icon="check"
            )
            app.after(1500, lambda: [vider_fenetre(app), ajouter_activit√©_musculation(account_id, username, password)])
        except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de l'ajout de votre activit√©.",
                icon="cancel"
            )
            return
        except Exception as e:
            CTkMessagebox(
                title="Erreur",
                message="Une erreur inattendue s'est produite, veuillez r√©essayer.",
                icon="cancel"
            )
            return
    bouton_valider = ctk.CTkButton(master=frame_champs5, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3), command=lambda : enregistrer())
    bouton_valider.pack(side="left", padx=10)

def ajouter_activit√©_fooball(account_id, username, password):
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_climat = {"Normal": 0, "Chaud": 1, "Froid": 2, "Difficile": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}
    Options_type = ["Entra√Ænement", "Match", "Tournoi", "City"]

    cadre_principal = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_principal.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_principal, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w", command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    frame1 = ctk.CTkFrame(master=cadre_principal, corner_radius=20, fg_color="transparent")        
    frame1.pack(pady=20)
    navbar = ctk.CTkFrame(master=cadre_principal, fg_color="transparent")
    navbar.pack(pady=(0, 10))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter une activit√©", 
                font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id, username, password)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_int√©rieur(account_id, username, password)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_musculation(account_id, username, password)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_fooball(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Ext√©rieur", "Int√©rieur", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Football")
    bouton_retour = ctk.CTkButton(master=navbar, text="üîô Retour", corner_radius=corner2, fg_color=couleur2, hover_color=couleur2_hover, 
                                height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    bouton_retour.pack(side="left", padx=10)

    frame_activit√© = ctk.CTkFrame(master=cadre_principal, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(padx=10, pady=(10, 0))
    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=10, pady=(20, 10))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=10, pady=10)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=10, pady=10)
    frame_champs4 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs4.pack(padx=10, pady=(10, 20))
    frame_champs5 = ctk.CTkFrame(master=cadre_principal, fg_color="transparent")
    frame_champs5.pack(padx=10, pady=(40, 10))

    app.bind('<Return>', lambda event: enregistrer())

    date_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=10)
    duree_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Dur√©e (min)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    duree_entry.pack(side="left", padx=10)
    type_entry = ctk.CTkComboBox(master=frame_champs1, values=Options_type, font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    type_entry.pack(side="left", padx=10)
    type_entry.set("Type de s√©ance de foot")

    rpe_label = ctk.CTkLabel(master=frame_champs2, text="RPE", font=(font_principale, taille3), text_color=couleur_text)
    rpe_label.pack(side="left", padx=(75, 0))
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs2, width=400, height=20, from_=1, to=10, number_of_steps=9, command=valeur_rpe,
                              progress_color=couleur1, button_color=couleur1, button_hover_color=couleur1_hover,
                              corner_radius=10, button_length=15, fg_color=couleur_text)
    rpe_entry.pack(side="left", padx=10)
    humeur_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Humeur d'apr√®s match", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    humeur_entry.pack(side="left", padx=(75, 10))

    fatigue_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_fatigue.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    fatigue_entry.pack(side="left", padx=10)
    fatigue_entry.set("Fatigue post-entra√Ænement")

    douleur_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_douleur.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    douleur_entry.pack(side="left", padx=10)
    douleur_entry.set("Douleur post-entra√Ænement")
    climat_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_climat.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    climat_entry.pack(side="left", padx=10)
    climat_entry.set("Climat √† l'entra√Ænement")

    but_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Nombre de but", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    but_entry.pack(side="left", padx=10)
    passe_d_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Nombre de passe d√©cisive", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    passe_d_entry.pack(side="left", padx=10)

    def enregistrer():
        humeur = humeur_entry.get().strip()
        passe_d√©cisive1 = passe_d_entry.get().strip()
        type_de_s√©ances = type_entry.get().strip()
        if passe_d√©cisive1:
            try:
                passe_d√©cisive = int(passe_d√©cisive1)
                if passe_d√©cisive < 0:
                    raise ValueError
            except ValueError:
                CTkMessagebox(
                    title="Erreur", 
                    message="Nombre de passe d√©cisive invalide (entier positif requis)", 
                    icon="cancel"
                )
                return
        else:
            passe_d√©cisive = None
        but1 = but_entry.get().strip()
        if but1:
            try:
                but = int(but1)
                if but < 0:
                    raise ValueError
            except ValueError:
                CTkMessagebox(
                    title="Erreur", 
                    message="Nombre de but invalide (entier positif requis)", 
                    icon="cancel"
                )
                return
        else:
            but = None
        date_str = date_entry.get().strip()
        date_obj = datetime.strptime(date_str, '%d-%m-%Y')
        if date_obj > datetime.now():
            CTkMessagebox(
                title="Erreur", 
                message="La date ne peut pas √™tre dans le futur", 
                icon="cancel"
            )
            return 
        date = date_obj.strftime('%Y-%m-%d')
        
        sport = "Football"
        try:
            duree = int(duree_entry.get().strip())
            if duree <= 0:
                raise ValueError
        except ValueError:
            CTkMessagebox(
                title="Erreur", 
                message="Dur√©e invalide (entier positif requis)", 
                icon="cancel"
            )
            return 
        try:
            rpe = int(rpe_entry.get())
            if not 1 <= rpe <= 10:
                raise ValueError
        except ValueError:
            CTkMessagebox(
                title="Erreur", 
                message="RPE invalide (1-10 requis)", 
                icon="cancel"
            )
            return
        douleur = Options_douleur.get(douleur_entry.get().strip())
        climat = Options_climat.get(climat_entry.get().strip())
        fatigue = Options_fatigue.get(fatigue_entry.get().strip())
        if fatigue is None:
            CTkMessagebox(
                title="Erreur", 
                message="Valeur de fatigue invalide", 
                icon="cancel"
            )
            return
        if douleur is None:
            CTkMessagebox(
                title="Erreur", 
                message="Valeur de douleur invalide", 
                icon="cancel"
            )
            return
        if climat is None:
            CTkMessagebox(
                title="Erreur", 
                message="Valeur de climat invalide", 
                icon="cancel"
            )
            return
        if type_de_s√©ances is None:
            CTkMessagebox(
                title="Erreur", 
                message="Type de s√©ance de foot invalide", 
                icon="cancel"
            )
            return

        if type_de_s√©ances == "Entra√Ænement":  
            coef_foot = 1        
        elif type_de_s√©ances == "Match":
            coef_foot = 1.2
        elif type_de_s√©ances == "City":
            coef_foot = 0.9
        else:  
            coef_foot = 1.4
        charge_de_base = duree * rpe
        
        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        modificateurs_climat = [0.95, 1.1, 1.05, 1.2]
        
        charge_d = charge_de_base * modificateurs_douleur[douleur]
        charge_c = charge_d * modificateurs_climat[climat]
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge_av = score_fatigue * charge_c
        charge =  charge_av*coef_foot
        try:
            curseur.execute("""INSERT INTO Activit√©_football (date_activit√©, sport, dur√©e, rpe, fatigue, douleur, climat, charge, account_id, humeur, but, passe_d√©cisive, type_de_s√©ances) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, fatigue, douleur, climat, charge, account_id, humeur, but, passe_d√©cisive, type_de_s√©ances))
            con.commit()
            curseur.execute("""INSERT INTO Activit√© (date_activit√©, sport, dur√©e, rpe, fatigue, douleur, climat, charge, account_id, humeur, but, passe_d√©cisive, type_de_s√©ances) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, rpe, fatigue, douleur, climat, charge, account_id, humeur, but, passe_d√©cisive, type_de_s√©ances))
            con.commit()
            CTkMessagebox(
                title="Succ√®s",
                message="Votre activit√© a bien √©t√© enregistr√©e !",
                icon="check"
            )
            app.after(1500, lambda: [vider_fenetre(app), ajouter_activit√©_fooball(account_id, username, password)])
        except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de l'ajout de votre activit√©.",
                icon="cancel"
            )
            return
        except Exception as e:
            CTkMessagebox(
                title="Erreur",
                message="Une erreur inattendue s'est produite, veuillez r√©essayer.",
                icon="cancel"
            )
            return
    bouton_valider = ctk.CTkButton(master=frame_champs5, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3), command=lambda : enregistrer())
    bouton_valider.pack(side="left", padx=10)

def ajouter_activit√©_ext√©rieur(account_id, username, password):
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_climat = {"Normal": 0, "Chaud": 1, "Froid": 2, "Difficile": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}

    cadre_principal = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_principal.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_principal, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w", command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    frame1 = ctk.CTkFrame(master=cadre_principal, corner_radius=20, fg_color="transparent")        
    frame1.pack(pady=20)
    navbar = ctk.CTkFrame(master=cadre_principal, fg_color="transparent")
    navbar.pack(pady=(0, 10))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter une activit√©", 
                font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id, username, password)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_int√©rieur(account_id, username, password)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_musculation(account_id, username, password)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_activit√©_fooball(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Ext√©rieur", "Int√©rieur", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Ext√©rieur")
    bouton_retour = ctk.CTkButton(master=navbar, text="üîô Retour", corner_radius=corner2, fg_color=couleur2, hover_color=couleur2_hover, 
                                height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    bouton_retour.pack(side="left", padx=10)

    frame_activit√© = ctk.CTkFrame(master=cadre_principal, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(padx=10, pady=(10, 0))
    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=10, pady=(20, 10))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=10, pady=10)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=10, pady=10)
    frame_champs4 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs4.pack(padx=10, pady=(10, 20))
    frame_champs5 = ctk.CTkFrame(master=cadre_principal, fg_color="transparent")
    frame_champs5.pack(padx=10, pady=(40, 10))

    app.bind('<Return>', lambda event: enregistrer())

    date_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=10)
    sport_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Sport", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="left", padx=10)
    duree_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Dur√©e (min)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    duree_entry.pack(side="left", padx=10)

    rpe_label = ctk.CTkLabel(master=frame_champs2, text="RPE", font=(font_principale, taille3), text_color=couleur_text)
    rpe_label.pack(side="left", padx=(75, 0))
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs2, width=400, height=20, from_=1, to=10, number_of_steps=9, command=valeur_rpe,
                              progress_color=couleur1, button_color=couleur1, button_hover_color=couleur1_hover,
                              corner_radius=10, button_length=15, fg_color=couleur_text)
    rpe_entry.pack(side="left", padx=10)
    nom_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Nom", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    nom_entry.pack(side="left", padx=(75, 10))

    fatigue_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_fatigue.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    fatigue_entry.pack(side="left", padx=10)
    fatigue_entry.set("Fatigue post-entra√Ænement")

    douleur_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_douleur.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    douleur_entry.pack(side="left", padx=10)
    douleur_entry.set("Douleur post-entra√Ænement")
    climat_entry = ctk.CTkComboBox(master=frame_champs3, values=list(Options_climat.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    climat_entry.pack(side="left", padx=10)
    climat_entry.set("Climat √† l'entra√Ænement")

    distance_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="Distance (km)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    distance_entry.pack(side="left", padx=10)
    denivele_entry = ctk.CTkEntry(master=frame_champs4, placeholder_text="D√©nivel√© (m)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    denivele_entry.pack(side="left", padx=10)

    def enregistrer():
        nom = nom_entry.get().strip()
        date_str = date_entry.get().strip()
        date_obj = datetime.strptime(date_str, '%d-%m-%Y')
        if date_obj > datetime.now():
            CTkMessagebox(
                title="Erreur", 
                message="La date ne peut pas √™tre dans le futur", 
                icon="cancel"
            )
            return 
        date = date_obj.strftime('%Y-%m-%d')
        
        sport = sport_entry.get().strip()
        if not sport:
            CTkMessagebox(
                title="Erreur",
                message="Le sport est obligatoire", 
                icon="cancel")
            return 
        try:
            duree = int(duree_entry.get().strip())
            if duree <= 0:
                raise ValueError
        except ValueError:
            CTkMessagebox(
                title="Erreur", 
                message="Dur√©e invalide (entier positif requis)", 
                icon="cancel"
            )
            return 
        try:
            rpe = int(rpe_entry.get())
            if not 1 <= rpe <= 10:
                raise ValueError
        except ValueError:
            CTkMessagebox(
                title="Erreur", 
                message="RPE invalide (1-10 requis)", 
                icon="cancel"
            )
            return
        douleur = Options_douleur.get(douleur_entry.get().strip())
        climat = Options_climat.get(climat_entry.get().strip())
        fatigue = Options_fatigue.get(fatigue_entry.get().strip())
        if fatigue is None:
            CTkMessagebox(
                title="Erreur", 
                message="Valeur de fatigue invalide", 
                icon="cancel"
            )
            return
        if douleur is None:
            CTkMessagebox(
                title="Erreur", 
                message="Valeur de douleur invalide", 
                icon="cancel"
            )
            return
        if climat is None:
            CTkMessagebox(
                title="Erreur", 
                message="Valeur de climat invalide", 
                icon="cancel"
            )
            return
        distance = None
        denivele = None
        try:
            dist_str = distance_entry.get().strip()
            if dist_str:
                distance = float(dist_str)
                if distance <= 0:
                    CTkMessagebox(
                        title="Erreur", 
                        message="La distance doit √™tre sup√©rieur √† 0.", 
                        icon="cancel"
                    ) 
                    return
        except ValueError:
            CTkMessagebox(
                title="Erreur", 
                message="Distance invalide (nombre positif requis)", 
                icon="cancel"
            )
            return
        try:
            deniv_str = denivele_entry.get().strip()
            if deniv_str:
                denivele = int(deniv_str)
                if denivele <= 0:
                    CTkMessagebox(
                        title="Erreur", 
                        message="Le d√©nivel√© doit √™tre sup√©rieur √† 0.", 
                        icon="cancel"
                    ) 
                    return       
        except ValueError:
            CTkMessagebox(
                title="Erreur", 
                message="D√©nivel√© invalide (entier positif requis)", 
                icon="cancel"
            )
            return
                                            
        charge_de_base = duree * rpe
        
        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        modificateurs_climat = [0.95, 1.1, 1.05, 1.2]
        
        charge_d = charge_de_base * modificateurs_douleur[douleur]
        charge_c = charge_d * modificateurs_climat[climat]
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge = score_fatigue * charge_c
        try:
            curseur.execute("""INSERT INTO Activit√©_ext√©rieur (date_activit√©, sport, dur√©e, distance, rpe, fatigue, douleur, climat, charge, account_id, nom, d√©nivel√©) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, distance, rpe, fatigue, douleur, climat, charge, account_id, nom, denivele))
            con.commit()
            curseur.execute("""INSERT INTO Activit√© (date_activit√©, sport, dur√©e, distance, rpe, fatigue, douleur, climat, charge, account_id, nom, d√©nivel√©) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, duree, distance, rpe, fatigue, douleur, climat, charge, account_id, nom, denivele))
            con.commit()
            CTkMessagebox(
                title="Succ√®s",
                message="Votre activit√© a bien √©t√© enregistr√©e !",
                icon="check"
            )
            app.after(1500, lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id, username, password)])
        except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de l'ajout de votre activit√©.",
                icon="cancel"
            )
            return
        except Exception as e:
            CTkMessagebox(
                title="Erreur",
                message="Une erreur inattendue s'est produite, veuillez r√©essayer.",
                icon="cancel"
            )
            return
    bouton_valider = ctk.CTkButton(master=frame_champs5, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3), command=lambda : enregistrer())
    bouton_valider.pack(side="left", padx=10)

def imc(account_id, username, password):
    cadre_imc = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_imc.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_imc, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    navbar = ctk.CTkFrame(master=cadre_imc, fg_color="transparent")
    navbar.pack(pady=20)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Pr√©dicteur de performance":
            app.after(0, lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
        elif choix == "Zones cardiaque":
            app.after(0, lambda: [vider_fenetre(app), zone_fc(account_id, username, password)])
        elif choix == "Calculateur IMC":
            app.after(0, lambda: [vider_fenetre(app), imc(account_id, username, password)])
        elif choix == "Estimation VMA":
            app.after(0, lambda: [vider_fenetre(app), VMA(account_id, username, password)])
        elif choix == "Estimation VO2max":
            app.after(0, lambda: [vider_fenetre(app), VO2MAX(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, 
                                            values=["Pr√©dicteur de performance", "Zones cardiaque", "Calculateur IMC", "Estimation VMA", "Estimation VO2max"],
                                            height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                            corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                            fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                            text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Calculateur IMC")

    carte_connexion = ctk.CTkFrame(master=cadre_imc, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(pady=(20, 5), padx=20) 
    app.bind('<Return>', lambda event: calcul_imc(account_id, username, password))
    poids_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Poids (kg)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    poids_entry.pack(pady=(11, 5), padx=10)
    taille_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Taille (cm)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    taille_entry.pack(pady=(5, 11), padx=10)

    cadre_result = ctk.CTkFrame(master=cadre_imc, corner_radius=corner1, fg_color=couleur2)
    cadre_result.pack(pady=10)

    result = ctk.CTkLabel(master=cadre_result, text="üîí Votre confidentialit√© est notre priorit√© : nous calculons votre temps de course\n directement sur votre appareil et ne stockons pas cette donn√©e.",
                           font=(font_secondaire, taille2), text_color=couleur1)
    result.pack(padx=50, pady=10)

    def calcul_imc(account_id, username, password):
        try:
            poids = float(poids_entry.get().strip())
            taille_conversion = float(taille_entry.get().strip())
            taille = taille_conversion/100

            if poids <= 0 or taille <= 0:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur : La taille et le poids doivent √™tre sup√©rieur √† 0",
                    icon="cancel"
                )
            if not poids or not taille:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur : La taille et le poids ne peuvent pas √™tre vides",
                    icon="cancel"
                )
            else:
                imc = poids / (taille ** 2)

                if imc <= 18.5:
                    interpr√©tation = "Insuffisance pond√©rale (maigreur)"
                elif 18.5 <= imc <= 24.9:
                    interpr√©tation = "Corpulence normale"
                elif 25 <= imc <= 29.9:
                    interpr√©tation = "Surpoids"
                elif 30 <= imc <= 34.9:
                    interpr√©tation = "Ob√©sit√© mod√©r√©e (niveau 1)"
                elif 35 <= imc <= 39.9:
                    interpr√©tation = "Ob√©sit√© s√©v√®re (niveau 2)"
                elif imc >= 40:
                    interpr√©tation = "Ob√©sit√© morbide (niveau 3)"
                else:
                    interpr√©tation = "Une erreur est survenue, veuillez r√©esayer plus tard"
                    
                result.configure(text=f"Votre IMC est : {imc:.2f}\n{interpr√©tation}")
        except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_check = ctk.CTkButton(master=cadre_imc, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: calcul_imc(account_id, username, password))
    button_check.pack(padx=10, pady=10)

def VO2MAX(account_id, username, password):
    cadre_vo2Max = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_vo2Max.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_vo2Max, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    navbar = ctk.CTkFrame(master=cadre_vo2Max, fg_color="transparent")
    navbar.pack(pady=20)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Pr√©dicteur de performance":
            app.after(0, lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
        elif choix == "Zones cardiaque":
            app.after(0, lambda: [vider_fenetre(app), zone_fc(account_id, username, password)])
        elif choix == "Calculateur IMC":
            app.after(0, lambda: [vider_fenetre(app), imc(account_id, username, password)])
        elif choix == "Estimation VMA":
            app.after(0, lambda: [vider_fenetre(app), VMA(account_id, username, password)])
        elif choix == "Estimation VO2max":
            app.after(0, lambda: [vider_fenetre(app), VO2MAX(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, 
                                            values=["Pr√©dicteur de performance", "Zones cardiaque", "Calculateur IMC", "Estimation VMA", "Estimation VO2max"],
                                            height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                            corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                            fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                            text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Estimation VO2max")

    carte_connexion = ctk.CTkFrame(master=cadre_vo2Max, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(pady=(20, 5), padx=20) 
    app.bind('<Return>', lambda event: calcul_VO2MAX(account_id, username, password))
    vma_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="VMA", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    vma_entry.pack(pady=(11, 5), padx=10)

    combo_genre = ctk.CTkComboBox(master=carte_connexion, values=["Homme", "Femme"], font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    combo_genre.pack(pady=5, padx=10)
    combo_genre.set("S√©lectionnez votre genre")

    age_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="√Çge", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    age_entry.pack(pady=(5, 11), padx=10)

    cadre_result = ctk.CTkFrame(master=cadre_vo2Max, corner_radius=corner1, fg_color=couleur2)
    cadre_result.pack(pady=10)

    result = ctk.CTkLabel(master=cadre_result, text="üîí Votre confidentialit√© est notre priorit√© : nous calculons votre temps de course\n directement sur votre appareil et ne stockons pas cette donn√©e.",
                           font=(font_secondaire, taille2), text_color=couleur1)
    result.pack(padx=50, pady=10)

    def calcul_VO2MAX(account_id, username, password):
        try:
            vma = float(vma_entry.get().strip())
            age = float(age_entry.get().strip())
            genre = combo_genre.get().strip()

            if vma <= 0:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur : La VMA doit √™tre sup√©rieur √† 0",
                    icon="cancel"
                )
                return
            if age < 14:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur : L'√¢ge minimum pour cette fonction est de 14 ans",
                    icon="info"
                )
                return
            if not vma or not age:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur : La VMA et l'√¢ge ne peuvent pas √™tre vides",
                    icon="cancel"
                )
                return
            else:
                vo2max = vma*3.5
                if genre == "Homme":
                    if 14 <= age <= 17 :
                        if vo2max >= 58:
                            interpr√©tation = "Sup√©rieur"
                        elif 54 <= vo2max <= 58:
                            interpr√©tation = "Excellent"
                        elif 50 <= vo2max <= 53:
                            interpr√©tation = "Bon"
                        elif 46 <= vo2max <= 49:
                            interpr√©tation = "Moyen"
                        else:
                            interpr√©tation = "Faible"
                    if 18 <= age <= 25 :
                        if vo2max >= 56:
                            interpr√©tation = "Sup√©rieur"
                        elif 52 <= vo2max <= 56:
                            interpr√©tation = "Excellent"
                        elif 48 <= vo2max <= 51:
                            interpr√©tation = "Bon"
                        elif 44 <= vo2max <= 47:
                            interpr√©tation = "Moyen"
                        else:
                            interpr√©tation = "Faible"
                    if 26 <= age <= 35 :
                        if vo2max >= 51:
                            interpr√©tation = "Sup√©rieur"
                        elif 47 <= vo2max <= 51:
                            interpr√©tation = "Excellent"
                        elif 43 <= vo2max <= 46:
                            interpr√©tation = "Bon"
                        elif 39 <= vo2max <= 42:
                            interpr√©tation = "Moyen"
                        else:
                            interpr√©tation = "Faible"
                    if 36 <= age <= 45 :
                        if vo2max >= 45:
                            interpr√©tation = "Sup√©rieur"
                        elif 41 <= vo2max <= 45:
                            interpr√©tation = "Excellent"
                        elif 37 <= vo2max <= 40:
                            interpr√©tation = "Bon"
                        elif 33 <= vo2max <= 36:
                            interpr√©tation = "Moyen"
                        else:
                            interpr√©tation = "Faible"
                    if 46 <= age <= 55 :
                        if vo2max >= 41:
                            interpr√©tation = "Sup√©rieur"
                        elif 37 <= vo2max <= 41:
                            interpr√©tation = "Excellent"
                        elif 33 <= vo2max <= 36:
                            interpr√©tation = "Bon"
                        elif 29 <= vo2max <= 32:
                            interpr√©tation = "Moyen"
                        else:
                            interpr√©tation = "Faible"
                    if 56 <= age <= 65 :
                        if vo2max >= 37:
                            interpr√©tation = "Sup√©rieur"
                        elif 33 <= vo2max <= 37:
                            interpr√©tation = "Excellent"
                        elif 29 <= vo2max <= 32:
                            interpr√©tation = "Bon"
                        elif 25 <= vo2max <= 28:
                            interpr√©tation = "Moyen"
                        else:
                            interpr√©tation = "Faible"
                    if age >= 65 :
                        if vo2max >= 33:
                            interpr√©tation = "Sup√©rieur"
                        elif 29 <= vo2max <= 33:
                            interpr√©tation = "Excellent"
                        elif 25 <= vo2max <= 28:
                            interpr√©tation = "Bon"
                        elif 21 <= vo2max <= 24:
                            interpr√©tation = "Moyen"
                        else:
                            interpr√©tation = "Faible"
                elif genre == "Femme":
                    if 14 <= age <= 17 :
                        if vo2max >= 52:
                            interpr√©tation = "Sup√©rieur"
                        if 48 <= vo2max <= 52:
                            interpr√©tation = "Excellent"
                        if 44 <= vo2max <= 47:
                            interpr√©tation = "Bon"
                        if 40 <= vo2max <= 43:
                            interpr√©tation = "Moyen"
                        if vo2max <= 40:
                            interpr√©tation = "Faible"
                    if 18 <= age <= 25 :
                        if vo2max >= 48:
                            interpr√©tation = "Sup√©rieur"
                        if 44 <= vo2max <= 48:
                            interpr√©tation = "Excellent"
                        if 40 <= vo2max <= 43:
                            interpr√©tation = "Bon"
                        if 36 <= vo2max <= 39:
                            interpr√©tation = "Moyen"
                        if vo2max <= 36:
                            interpr√©tation = "Faible"
                    if 26 <= age <= 35 :
                        if vo2max >= 42:
                            interpr√©tation = "Sup√©rieur"
                        if 38 <= vo2max <= 42:
                            interpr√©tation = "Excellent"
                        if 34 <= vo2max <= 37:
                            interpr√©tation = "Bon"
                        if 30 <= vo2max <= 33:
                            interpr√©tation = "Moyen"
                        if vo2max <= 30:
                            interpr√©tation = "Faible"
                    if 36 <= age <= 45 :
                        if vo2max >= 37:
                            interpr√©tation = "Sup√©rieur"
                        if 33 <= vo2max <= 37:
                            interpr√©tation = "Excellent"
                        if 29 <= vo2max <= 32:
                            interpr√©tation = "Bon"
                        if 25 <= vo2max <= 28:
                            interpr√©tation = "Moyen"
                        if vo2max <= 25:
                            interpr√©tation = "Faible"
                    if 46 <= age <= 55 :
                        if vo2max >= 34:
                            interpr√©tation = "Sup√©rieur"
                        if 30 <= vo2max <= 34:
                            interpr√©tation = "Excellent"
                        if 26 <= vo2max <= 29:
                            interpr√©tation = "Bon"
                        if 22 <= vo2max <= 25:
                            interpr√©tation = "Moyen"
                        if vo2max <= 22:
                            interpr√©tation = "Faible"
                    if 56 <= age <= 65 :
                        if vo2max >= 30:
                            interpr√©tation = "Sup√©rieur"
                        if 26 <= vo2max <= 30:
                            interpr√©tation = "Excellent"
                        if 22 <= vo2max <= 25:
                            interpr√©tation = "Bon"
                        if 18 <= vo2max <= 21:
                            interpr√©tation = "Moyen"
                        if vo2max <= 18:
                            interpr√©tation = "Faible"
                    if age >= 65 :
                        if vo2max >= 27:
                            interpr√©tation = "Sup√©rieur"
                        if 23 <= vo2max <= 27:
                            interpr√©tation = "Excellent"
                        if 19 <= vo2max <= 22:
                            interpr√©tation = "Bon"
                        if 15 <= vo2max <= 18:
                            interpr√©tation = "Moyen"
                        if vo2max <= 15:
                            interpr√©tation = "Faible"
                else:
                    interpr√©tation = "Sexe non valide. Veuillez s√©l√©ctionner Homme ou Femme."
                result.configure(text=f"Votre VO2max est de {vo2max:.2f} mL/min/kg. \n {interpr√©tation}")
        except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )

    button_check = ctk.CTkButton(master=cadre_vo2Max, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: calcul_VO2MAX(account_id, username, password))
    button_check.pack(padx=10, pady=20)

def VMA(account_id, username, password):
    cadre_vo2Max = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_vo2Max.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_vo2Max, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    navbar = ctk.CTkFrame(master=cadre_vo2Max, fg_color="transparent")
    navbar.pack(pady=20)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Pr√©dicteur de performance":
            app.after(0, lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
        elif choix == "Zones cardiaque":
            app.after(0, lambda: [vider_fenetre(app), zone_fc(account_id, username, password)])
        elif choix == "Calculateur IMC":
            app.after(0, lambda: [vider_fenetre(app), imc(account_id, username, password)])
        elif choix == "Estimation VMA":
            app.after(0, lambda: [vider_fenetre(app), VMA(account_id, username, password)])
        elif choix == "Estimation VO2max":
            app.after(0, lambda: [vider_fenetre(app), VO2MAX(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, 
                                            values=["Pr√©dicteur de performance", "Zones cardiaque", "Calculateur IMC", "Estimation VMA", "Estimation VO2max"],
                                            height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                            corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                            fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                            text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Estimation VMA")

    Info = ctk.CTkLabel(master=cadre_vo2Max ,text="Pour une estimation plus pr√©cise, utilisez la distance parcourue √† fond en 6 minutes.", font=(font_secondaire, taille2))
    Info.pack(padx=50, pady=10)

    carte_connexion = ctk.CTkFrame(master=cadre_vo2Max, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(pady=(20, 5), padx=20) 
    app.bind('<Return>', lambda event: calcul_VMA(account_id, username, password))
    distance_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Distance (km)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    distance_entry.pack(pady=(11, 5), padx=10)
    temps_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Temps (min)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    temps_entry.pack(pady=(5, 11), padx=10)

    cadre_result = ctk.CTkFrame(master=cadre_vo2Max, corner_radius=corner1, fg_color=couleur2)
    cadre_result.pack(pady=10)

    result = ctk.CTkLabel(master=cadre_result, text="üîí Votre confidentialit√© est notre priorit√© : nous calculons votre temps de course\n directement sur votre appareil et ne stockons pas cette donn√©e.",
                           font=(font_secondaire, taille2), text_color=couleur1)
    result.pack(padx=50, pady=10)

    def calcul_VMA(account_id, username, password):
        try:
            distance = float(distance_entry.get().strip())
            temps_autre = float(temps_entry.get().strip())
            temps = temps_autre/60

            if distance <= 0 or temps <=0:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur : La distance et le temps doivent √™tre sup√©rieur √† 0",
                    icon="cancel"
                )
            if not distance or not temps:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur : La distance et le temps ne peuvent pas √™tre vides",
                    icon="cancel"
                )
            else:
                vma = distance / temps

                if distance <= 2:
                    vma_estim√©e = vma*1
                elif 2 <= distance <= 3:
                    vma_estim√©e = vma*1.05
                elif 3 <= distance <= 6:
                    vma_estim√©e = vma*1.2
                elif 6 <= distance <= 12:
                    vma_estim√©e = vma*1.45
                elif 12 <= distance <= 25:
                    vma_estim√©e = vma*1.52
                elif 21.0975 <= distance <= 42.195:
                    vma_estim√©e = vma*1.6
                else:
                    vma_estim√©e = vma*1.8

                result.configure(text=f"Votre VMA est de {vma_estim√©e:.2f} km/h.")
        except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_check = ctk.CTkButton(master=cadre_vo2Max, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: calcul_VMA(account_id, username, password))
    button_check.pack(padx=10, pady=10)

def zone_fc(account_id, username, password):
    cadre_fc = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_fc.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_fc, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    navbar = ctk.CTkFrame(master=cadre_fc, fg_color="transparent")
    navbar.pack(pady=20)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Pr√©dicteur de performance":
            app.after(0, lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
        elif choix == "Zones cardiaque":
            app.after(0, lambda: [vider_fenetre(app), zone_fc(account_id, username, password)])
        elif choix == "Calculateur IMC":
            app.after(0, lambda: [vider_fenetre(app), imc(account_id, username, password)])
        elif choix == "Estimation VMA":
            app.after(0, lambda: [vider_fenetre(app), VMA(account_id, username, password)])
        elif choix == "Estimation VO2max":
            app.after(0, lambda: [vider_fenetre(app), VO2MAX(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, 
                                            values=["Pr√©dicteur de performance", "Zones cardiaque", "Calculateur IMC", "Estimation VMA", "Estimation VO2max"],
                                            height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                            corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                            fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                            text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Zones cardiaque")

    carte_connexion = ctk.CTkFrame(master=cadre_fc, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(pady=(20, 5), padx=20) 
    app.bind('<Return>', lambda event: calcul_zone(account_id, username, password))
    age_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="√Çge", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    age_entry.pack(pady=10, padx=10)

    cadre_result = ctk.CTkFrame(master=cadre_fc, corner_radius=corner1, fg_color=couleur2)
    cadre_result.pack(pady=10)

    result = ctk.CTkLabel(master=cadre_result, text="üîí Votre confidentialit√© est notre priorit√© : nous calculons votre temps de course\n directement sur votre appareil et ne stockons pas cette donn√©e.",
                           font=(font_secondaire, taille2), text_color=couleur1)
    result.pack(padx=50, pady=10)

    def calcul_zone(account_id, username, password):
        try:
            age = int(age_entry.get().strip())
            fc_max = 220 - age

            if age <= 0:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur : L'√¢ge doit √™tre sup√©rieur √† 0",
                    icon="cancel"
                )
            if not age:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur : L'√¢ge ne peut pas √™tre vide",
                    icon="cancel"
                )
            debut_zone1 = fc_max*0.50
            fin_zone1 = fc_max*0.60
            Zone1 = f"Zone 1 : R√©cup√©ration active - {debut_zone1:.0f}bpm √† {fin_zone1:.0f}bpm"
            debut_zone2 = fc_max*0.60
            fin_zone2 = fc_max*0.70
            Zone2 = f"Zone 2 : Fondamentale / Endurance de base - {debut_zone2:.0f}bpm √† {fin_zone2:.0f}bpm"
            debut_zone3 = fc_max*0.70
            fin_zone3 = fc_max*0.80
            Zone3 = f"Zone 3 : Seuil a√©robie / Endurance active - {debut_zone3:.0f}bpm √† {fin_zone3:.0f}bpm"
            debut_zone4 = fc_max*0.80
            fin_zone4 = fc_max*0.90
            Zone4 = f"Zone 4 :  Seuil ana√©robie / R√©sistance dure - {debut_zone4:.0f}bpm √† {fin_zone4:.0f}bpm"
            debut_zone5 = fc_max*0.90
            Zone5 = f"Zone 5 : Vitesse maximale a√©robie / Puissance maximale - {debut_zone5:.0f}bpm √† {fc_max:.0f}bpm"

            result.configure(text=f"Vos Zones de Fr√©quence Cardiaque\n\n{Zone1}\n{Zone2}\n{Zone3}\n{Zone4}\n{Zone5}")
        except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )   
    button_check = ctk.CTkButton(master=cadre_fc, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: calcul_zone(account_id, username, password))
    button_check.pack(padx=10, pady=10)

def predicteur_temps(account_id, username, password):
    cadre_fc = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_fc.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_fc, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    navbar = ctk.CTkFrame(master=cadre_fc, fg_color="transparent")
    navbar.pack(pady=20) 

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Pr√©dicteur de performance":
            app.after(0, lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
        elif choix == "Zones cardiaque":
            app.after(0, lambda: [vider_fenetre(app), zone_fc(account_id, username, password)])
        elif choix == "Calculateur IMC":
            app.after(0, lambda: [vider_fenetre(app), imc(account_id, username, password)])
        elif choix == "Estimation VMA":
            app.after(0, lambda: [vider_fenetre(app), VMA(account_id, username, password)])
        elif choix == "Estimation VO2max":
            app.after(0, lambda: [vider_fenetre(app), VO2MAX(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, 
                                            values=["Pr√©dicteur de performance", "Zones cardiaque", "Calculateur IMC", "Estimation VMA", "Estimation VO2max"],
                                            height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                            corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                            fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                            text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Pr√©dicteur de performance")

    Info = ctk.CTkLabel(master=cadre_fc ,text="N'oubliez pas que cette pr√©diction est une estimation bas√©e sur la\nth√©orie"\
                         " et peut varier en fonction de nombreux facteurs\nle jour de la course !", font=(font_secondaire, taille2),
                         text_color=couleur_text)
    Info.pack(padx=50, pady=10)

    carte_connexion = ctk.CTkFrame(master=cadre_fc, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(pady=(20, 5), padx=20) 
    app.bind('<Return>', lambda event: calcul_temps(account_id, username, password))
    vma_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="VMA", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    vma_entry.pack(pady=(11, 5), padx=10)
    distance_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Distance (km)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    distance_entry.pack(pady=(5, 11), padx=10)

    cadre_result = ctk.CTkFrame(master=cadre_fc, corner_radius=corner1, fg_color=couleur2)
    cadre_result.pack(pady=10)

    result = ctk.CTkLabel(master=cadre_result, text="üîí Votre confidentialit√© est notre priorit√© : nous calculons votre temps de course\n directement sur votre appareil et ne stockons pas cette donn√©e.",
                           font=(font_secondaire, taille2), text_color=couleur1)
    result.pack(padx=50, pady=10)

    def calcul_temps(account_id, username, password):
        try:
            distance = float(distance_entry.get().strip())
            vma = float(vma_entry.get().strip())

            if distance <= 0 or vma <=0:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur : La distance et le temps doivent √™tre sup√©rieur √† 0",
                    icon="cancel"
                )
            if not distance or not vma:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur : La distance et la vma ne peuvent pas √™tre vides",
                    icon="cancel"
                )
            if distance <= 2:
                vitesse_moyenne = vma*0.98
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"
            elif 2 <= distance <= 3:
                vitesse_moyenne = vma*0.94
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"
            elif 3 <= distance <= 6:
                vitesse_moyenne = vma*0.82
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"
            elif 6 <= distance <= 12:
                vitesse_moyenne = vma*0.77
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"
            elif 12 <= distance <= 25:
                vitesse_moyenne = vma*0.72
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"
            elif 21.0975 <= distance <= 42.195:
                vitesse_moyenne = vma*0.62
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"
            else:
                vitesse_moyenne = vma*0.55
                temps_calculer = distance/vitesse_moyenne
                heure = int(temps_calculer)
                minute_calculer = (temps_calculer-heure)*60
                minutes = int(minute_calculer)
                seconde = (minute_calculer-minutes)*60
                interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s"

            result.configure(text=f"{interpretation}")
        except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_check = ctk.CTkButton(master=cadre_fc, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: calcul_temps(account_id, username, password))
    button_check.pack(padx=10, pady=10)

def activer_pause(account_id, username, password, type_pause):
    curseur.execute("SELECT id FROM Pauses WHERE account_id = ? AND date_fin IS NULL", (account_id,))
    if curseur.fetchone():
        CTkMessagebox(
            title="Erreur",
            message="Une pause est d√©j√† active.",
            icon="cancel"
        )
        return
    #date('now') pour prendre direct la date aujourd'hui (c'est une fonction SQLite)
    curseur.execute("""INSERT INTO Pauses (account_id, type, date_debut)VALUES (?, ?, date('now'))""", (account_id, type_pause))
    con.commit()
    CTkMessagebox(
        title="Enregistr√©",
        message=f"Pause {type_pause} activ√©e !",
        icon="check"
    )
    app.after(0, lambda: [vider_fenetre(app), modifier_statut(account_id, username, password)])

def arreter_pause(account_id, username, password):
    curseur.execute("""UPDATE Pauses SET date_fin = date('now')WHERE account_id = ? AND date_fin IS NULL""", (account_id,))
    con.commit()
    CTkMessagebox(
        title="Enregistr√©",
        message="Reprise d'activit√© enregistr√©e !",
        icon="check"
    )
    app.after(0, lambda: [vider_fenetre(app), modifier_statut(account_id, username, password)])

def signaler_bug(account_id, username, password):
    cadre_avis = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_avis.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_avis, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    Titre = ctk.CTkLabel(master=cadre_avis ,text="Signaler un bug", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    info = ctk.CTkLabel(master=cadre_avis ,text="üì£ Nous vous remercions pour votre contribution au d√©veloppement de Sprintia." \
    "\nPour que le d√©veloppeur puisse bien comprendre le bug, il faudrait d√©tailler\nun maximum le bug que vous avez rencontr√©.", 
    font=(font_principale, taille2))
    info.pack(padx=50, pady=(20, 10))

    app.bind('<Return>', lambda event: envoyer())
    avis_entry = ctk.CTkTextbox(master=cadre_avis, width=700, height=300, corner_radius=corner1, fg_color=couleur2, font=(font_principale, taille3),
                                scrollbar_button_color=couleur1, scrollbar_button_hover_color=couleur1_hover, text_color=couleur1,
                                border_color=couleur1, border_width=border1)
    avis_entry.pack(pady=10, padx=10)
    avis_entry.insert("0.0", "Description du bug :\n")

    def envoyer():
        avis = avis_entry.get("1.0", "end").strip()
        if not avis:
            CTkMessagebox(
                title="Avis vide",
                message="Veuillez remplir le champs description de bug !",
                icon="cancel"
            )
            return
        #destinataire
        email_receiver = 'gabchap486@gmail.com'
        #objet
        subject = "Rapport de bug"
        body = f"Nom d'utilisateur: {username}\n\nMessage de l'utilisateur:\n{avis}"
        mailto_link = f"mailto:{email_receiver}?subject={quote(subject)}&body={quote(body)}"
        try:
            webbrowser.open(mailto_link)
            CTkMessagebox(
                title="Premi√®re √©tape termin√©e",
                message="Votre application mail par d√©faut s'est ouverte.\n" \
                "Veuillez simplement cliquer sur 'Envoyer' pour finaliser l'envoi de votre avis.",
                icon="info"
            )
        except Exception as e:
            CTkMessagebox(
                title="Erreur",
                message=f"Impossible d'ouvrir votre application mail.\nVeuillez v√©rifier que vous avez une application pour g√©rer vos mails.",
                icon="cancel"
            )
    frame_boutons = ctk.CTkFrame(master=cadre_avis, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: envoyer())
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_retour.pack(side="left", padx=5, pady=20)

def proposer_fonction(account_id, username, password):
    cadre_avis = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_avis.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_avis, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    Titre = ctk.CTkLabel(master=cadre_avis ,text="Proposer une fonction", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    info = ctk.CTkLabel(master=cadre_avis ,text="üì£ Nous vous remercions pour votre contribution au d√©veloppement de Sprintia." \
                "\nPour que le d√©veloppeur puisse bien comprendre ta demande, il faudrait d√©tailler\nun maximum ton id√©e de fonctionnalit√©",
                font=(font_principale, taille2))
    info.pack(padx=50, pady=(20, 10))

    app.bind('<Return>', lambda event: envoyer())
    avis_entry = ctk.CTkTextbox(master=cadre_avis, width=700, height=300, corner_radius=corner1, fg_color=couleur2, font=(font_principale, taille3),
                                scrollbar_button_color=couleur1, scrollbar_button_hover_color=couleur1_hover, text_color=couleur1,
                                border_color=couleur1, border_width=border1)
    avis_entry.pack(pady=10, padx=10)
    avis_entry.insert("0.0", "Description de votre fonctionnalit√© :\n")

    def envoyer():
        avis = avis_entry.get("1.0", "end").strip()
        if not avis:
            CTkMessagebox(
                title="Avis vide",
                message="Veuillez remplir le champs fonctionnalit√© !",
                icon="cancel"
            )
            return
        #destinataire
        email_receiver = 'gabchap486@gmail.com'
        #objet
        subject = "Proposition de nouvelle fonctionnalit√©"
        body = f"Nom d'utilisateur: {username}\n\nMessage de l'utilisateur:\n{avis}"
        mailto_link = f"mailto:{email_receiver}?subject={quote(subject)}&body={quote(body)}"
        try:
            webbrowser.open(mailto_link)
            CTkMessagebox(
                title="Premi√®re √©tape termin√©e",
                message="Votre application mail par d√©faut s'est ouverte.\n" \
                "Veuillez simplement cliquer sur 'Envoyer' pour finaliser l'envoi de votre avis.",
                icon="info"
            )
        except Exception as e:
            CTkMessagebox(
                title="Erreur",
                message=f"Impossible d'ouvrir votre application mail.\nVeuillez v√©rifier que vous avez une application pour g√©rer vos mails.",
                icon="cancel"
            )
    frame_boutons = ctk.CTkFrame(master=cadre_avis, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: envoyer())
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_retour.pack(side="left", padx=5, pady=20)

def avis (account_id, username, password):
    cadre_avis = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_avis.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_avis, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    Titre = ctk.CTkLabel(master=cadre_avis ,text="R√©diger un avis", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    info = ctk.CTkLabel(master=cadre_avis ,text="üì£ Nous vous remercions pour votre contribution au d√©veloppement de Sprintia.", 
                        font=(font_principale, taille2))
    info.pack(padx=50, pady=(20, 10))

    app.bind('<Return>', lambda event: envoyer())
    avis_entry = ctk.CTkTextbox(master=cadre_avis, width=700, height=300, corner_radius=corner1, fg_color=couleur2, font=(font_principale, taille3),
                                scrollbar_button_color=couleur1, scrollbar_button_hover_color=couleur1_hover, text_color=couleur1,
                                border_color=couleur1, border_width=border1)
    avis_entry.pack(pady=10, padx=10)
    avis_entry.insert("0.0", "Votre avis :\n")

    def envoyer():
        avis = avis_entry.get("1.0", "end").strip()
        if not avis:
            CTkMessagebox(
                title="Avis vide",
                message="Veuillez remplir le champs avis !",
                icon="cancel"
            )
            return
        #destinataire
        email_receiver = 'gabchap486@gmail.com'
        #objet
        subject = "Avis sur Sprintia"
        body = f"Nom d'utilisateur: {username}\n\nMessage de l'utilisateur:\n{avis}"
        mailto_link = f"mailto:{email_receiver}?subject={quote(subject)}&body={quote(body)}"
        try:
            webbrowser.open(mailto_link)
            CTkMessagebox(
                title="Premi√®re √©tape termin√©e",
                message="Votre application mail par d√©faut s'est ouverte.\n" \
                "Veuillez simplement cliquer sur 'Envoyer' pour finaliser l'envoi de votre avis.",
                icon="info"
            )
        except Exception as e:
            CTkMessagebox(
                title="Erreur",
                message=f"Impossible d'ouvrir votre application mail.\nVeuillez v√©rifier que vous avez une application pour g√©rer vos mails.",
                icon="cancel"
            )

    frame_boutons = ctk.CTkFrame(master=cadre_avis, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: envoyer())
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_retour.pack(side="left", padx=5, pady=20)

def modifier_statut(account_id, username, password):
    cadre_statut = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_statut.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_statut, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    Titre = ctk.CTkLabel(master=cadre_statut ,text="Mettre en pause les analyses", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=50, pady=20)
    info = ctk.CTkLabel(master=cadre_statut ,text="Si vous avez besoin de souffler, ou que vous vous √™tes bless√©, vous pouvez\nmettre en pause les" \
    "analyses pour vous reposer.", font=(font_principale, taille2))
    info.pack(padx=50, pady=(25, 10))

    frame = ctk.CTkFrame(master=cadre_statut, fg_color="transparent")
    frame.pack(pady=10)

    frame_boutons = ctk.CTkFrame(master=cadre_statut, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))

    curseur.execute("SELECT type FROM Pauses WHERE account_id = ? AND date_fin IS NULL", (account_id,))
    result = curseur.fetchall()
    if result == []:
        info_statut = ctk.CTkLabel(master=frame, text="Votre statut d'entra√Ænement actuel : Actif", font=(font_principale, taille2))
        info_statut.pack(padx=0, pady=10)
    elif result == [('vacances',)]:
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Votre statut d'entra√Ænement actuel: Vacances", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    elif result == [('blessure',)]:
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Votre statut d'entra√Ænement actuel : Blessure", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    else:
        CTkMessagebox(
            title="Erreur",
            message="Statut inconnu ou incoh√©rent.",
            icon="cancel"
        )
    options = {"Vacances": "Vacances", "Blessure": "Blessure", "Reprendre les analyses": "Reprendre"}
    combo_statut = ctk.CTkComboBox(master=frame, values=list(options.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    combo_statut.pack(pady=10)
    combo_statut.set("S√©l√©ctionnez la raison")

    def enregistrer_activit√©(account_id, username, password):
        statut_choisi = combo_statut.get()
        statut = options[statut_choisi]
        try:
            if statut == "Vacances":
                activer_pause(account_id, username, password, "vacances")
            elif statut == "Blessure":
                activer_pause(account_id, username, password, "blessure")
            elif statut == "Reprendre":
                arreter_pause(account_id, username, password)
        except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: enregistrer_activit√©(account_id, username, password))
    button_check.pack(side="left", padx=5, pady=10)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_retour.pack(side="left", padx=5, pady=10)

def modifier_password(account_id, username, password):
    cadre_statut = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_statut.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_statut, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    navbar = ctk.CTkFrame(master=cadre_statut, fg_color="transparent")
    navbar.pack(pady=20)
    frame2 = ctk.CTkFrame(master=cadre_statut, fg_color="transparent")        
    frame2.pack(pady=(10, 20))
    carte = ctk.CTkFrame(master=cadre_statut, corner_radius=corner1, fg_color=couleur2, border_width=border1, border_color=couleur1)        
    carte.pack(pady=(10, 20))

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Mon compte":
            app.after(0, lambda: [vider_fenetre(app), mon_compte(account_id, username, password)])
        elif choix == "Modifier":
            app.after(0, lambda: [vider_fenetre(app), modifier_compte(account_id, username, password)])
        elif choix == "Supprimer mon compte":
            app.after(0, lambda: [vider_fenetre(app), supprimer_compte(account_id, username, password)])
        elif choix == "Mots de passe oubli√©":
            app.after(0, lambda: [vider_fenetre(app), modifier_password(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Mon compte", "Modifier", "Supprimer mon compte", "Mots de passe oubli√©"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Mots de passe oubli√©")
    button_back = ctk.CTkButton(master=navbar, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_back.pack(side="left", padx=10)

    info = ctk.CTkLabel(master=frame2 ,text="Mots de passe oubli√© ? Pas de panique, remplissez le formulaire ci-dessus et votre mots de passe sera modifi√©",
                         font=(font_secondaire, taille2), wraplength=800)
    info.pack(padx=50)

    app.bind('<Return>', lambda event: new_username(account_id, username, password))
    password_entry = ctk.CTkEntry(master=carte, placeholder_text="Nouveau mots de passe", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=370)
    password_entry.pack(pady=(12, 5), padx=11)
    password_entry2 = ctk.CTkEntry(master=carte, placeholder_text="Confirmez votre nouveau mots de passe", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=370)
    password_entry2.pack(pady=(5, 12), padx=11)
    def new_username(account_id, username, password):
        new_password = password_entry.get()
        new_password2 = password_entry2.get()
        password_encode = new_password.encode("UTF-8")
        if new_password == new_password2:
            try:
                if not password_entry or not password_entry2:
                    CTkMessagebox(
                        title="Erreur",
                        message="Le mots de passe ne peut pas √™tre vide. Veuillez remplir tous les champs !",
                        icon="cancel"
                    )
                else:
                    if (password_valide(new_password)):
                        sha256 = hashlib.sha256()
                        sha256.update(password_encode)
                        hashed_password = sha256.hexdigest()
                        con.execute("UPDATE Account SET password = ? WHERE id = ?", (hashed_password, account_id))
                        con.commit()
                        CTkMessagebox(
                            title="Enregistr√©",
                            message="Votre mots de passe √† bien √©t√© modifi√© !",
                            icon="check"
                        )
            except sqlite3.Error as e:
                CTkMessagebox(
                    title="Erreur base de donn√©es",
                    message="Erreur de base de donn√©es lors du changement de mots de passe.",
                    icon="cancel"
                )
            except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
        else:
            CTkMessagebox(
                title="Erreur",
                message="Les mots de passe saisis ne correspondent pas.",
                icon="cancel"
            )
    button_check = ctk.CTkButton(master=cadre_statut, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: new_username(account_id, username, password))
    button_check.pack(padx=10, pady=15)

def modifier_compte(account_id, username, password):
    cadre_statut = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_statut.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_statut, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    navbar = ctk.CTkFrame(master=cadre_statut, fg_color="transparent")
    navbar.pack(pady=20)
    
    info_pack = ctk.CTkFrame(master=cadre_statut, corner_radius=corner1, fg_color=couleur2, border_width=border1, border_color=couleur1)
    info_pack.pack(pady=10)

    frame_username = ctk.CTkFrame(master=info_pack, fg_color="transparent")        
    frame_username.pack(padx=12, pady=(10, 5))
    frame_sport = ctk.CTkFrame(master=info_pack, fg_color="transparent")        
    frame_sport.pack(padx=12, pady=5)
    frame_bio = ctk.CTkFrame(master=info_pack, fg_color="transparent")        
    frame_bio.pack(padx=12, pady=(5, 10))

    enregistrer = ctk.CTkFrame(master=cadre_statut, fg_color="transparent")        
    enregistrer.pack(pady=20)

    curseur.execute("SELECT sport FROM Account WHERE id = ?", (account_id,))
    result = curseur.fetchall()
    sport = result[0][0]
    curseur.execute("SELECT bio FROM Account WHERE id = ?", (account_id,))
    result = curseur.fetchall()
    bio = result[0][0]
    curseur.execute("SELECT username FROM Account WHERE id = ?", (account_id,))
    result = curseur.fetchall()
    username = result[0][0]

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Mon compte":
            app.after(0, lambda: [vider_fenetre(app), mon_compte(account_id, username, password)])
        elif choix == "Modifier":
            app.after(0, lambda: [vider_fenetre(app), modifier_compte(account_id, username, password)])
        elif choix == "Supprimer mon compte":
            app.after(0, lambda: [vider_fenetre(app), supprimer_compte(account_id, username, password)])
        elif choix == "Mots de passe oubli√©":
            app.after(0, lambda: [vider_fenetre(app), modifier_password(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Mon compte", "Modifier", "Supprimer mon compte", "Mots de passe oubli√©"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Modifier")
    button_back = ctk.CTkButton(master=navbar, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_back.pack(side="left", padx=10)

    app.bind('<Return>', lambda event: enregistr√©())
    LABEL_WIDTH = 250
    pseudo_label = ctk.CTkLabel(master=frame_username, text="Votre pseudo : ", font=(font_secondaire, taille2), text_color=couleur1,
                                width=LABEL_WIDTH)
    pseudo_label.pack(side="left")
    pseudo_entry = ctk.CTkEntry(master=frame_username, placeholder_text=f"{username}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    pseudo_entry.pack(side="left", padx=(0, 10), pady=(12,0))

    sport_label = ctk.CTkLabel(master=frame_sport, text="Votre sport favoris : ", font=(font_secondaire, taille2), text_color=couleur1,
                               width=LABEL_WIDTH)
    sport_label.pack(side="left")
    sport_favoris_entry = ctk.CTkEntry(master=frame_sport, placeholder_text=f"{sport}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_favoris_entry.pack(side="left", padx=(0, 12))

    bio_label = ctk.CTkLabel(master=frame_bio, text="Votre bio : ", font=(font_secondaire, taille2), text_color=couleur1,
                              width=LABEL_WIDTH)
    bio_label.pack(side="left")
    bio_entry = ctk.CTkEntry(master=frame_bio, placeholder_text=f"{bio}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    bio_entry.pack(side="left", padx=(0, 10), pady=(0,11))

    def enregistr√©():
        new_username = pseudo_entry.get().strip()
        new_sport = sport_favoris_entry.get().strip()
        new_bio = bio_entry.get().strip()
        if not new_username:
            new_username = username
        if not new_sport:
            new_sport = sport
        if not new_bio:
            new_bio = bio
        try:
            con.execute("UPDATE Account SET username = ?, sport = ?, bio = ? WHERE id = ?", (new_username, new_sport, new_bio, account_id))
            con.commit()
            CTkMessagebox(
                title="Op√©ration r√©ussi",
                message="Votre compte a √©t√© mis √† jour avec succ√®s.",
                icon="check"
            )
        except sqlite3.IntegrityError as e:
            CTkMessagebox(
                title="Erreur base de donn√©es",
                message="Ce pseudo est d√©j√† utilis√©, veuillez r√©essayer avec un autre pseudo.",
                icon="cancel"
            )
        except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de la mise √† jour de votre compte.",
                icon="cancel"
            )
        except Exception as e:
            CTkMessagebox(
                title="Erreur",
                message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                icon="cancel"
            )
    button_enregistrer = ctk.CTkButton(master=enregistrer, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                         command=lambda: enregistr√©())
    button_enregistrer.pack(side="left", padx=10)

def supprimer_compte(account_id, username, password):
    cadre_statut = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_statut.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_statut, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    navbar = ctk.CTkFrame(master=cadre_statut, fg_color="transparent")
    navbar.pack(pady=20)
    info = ctk.CTkFrame(master=cadre_statut, fg_color="transparent")
    info.pack()
    carte = ctk.CTkFrame(master=cadre_statut, corner_radius=corner1, fg_color=couleur2, border_width=border1, border_color=couleur1)        
    carte.pack(pady=(10, 20))

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Mon compte":
            app.after(0, lambda: [vider_fenetre(app), mon_compte(account_id, username, password)])
        elif choix == "Modifier":
            app.after(0, lambda: [vider_fenetre(app), modifier_compte(account_id, username, password)])
        elif choix == "Supprimer mon compte":
            app.after(0, lambda: [vider_fenetre(app), supprimer_compte(account_id, username, password)])
        elif choix == "Mots de passe oubli√©":
            app.after(0, lambda: [vider_fenetre(app), modifier_password(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Mon compte", "Modifier", "Supprimer mon compte", "Mots de passe oubli√©"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Supprimer mon compte")
    button_retour = ctk.CTkButton(master=navbar, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_retour.pack(side="left", padx=10)

    info = ctk.CTkLabel(master=info ,text="Ton compte est sur le point d'√™tre supprim√©. √áa veut dire que toutes tes donn√©es" \
    "et ton acc√®s √† nos services seront perdus, et il n'y aura pas de retour en arri√®re possible.", font=(font_secondaire, taille2), wraplength=800)
    info.pack(padx=50, pady=10)
    info2 = ctk.CTkLabel(master=carte ,text="√ätes-vous vraiment certain de vouloir continuer ?", font=(font_principale, taille2),
                         text_color=couleur1)
    info2.pack(padx=50, pady=10) 

    options_suppr = {"Oui": "oui", "Non" : "non"}

    options = ctk.CTkComboBox(master=carte, values=list(options_suppr.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    options.pack(pady=10)
    options.set("S√©l√©ctionnez Oui ou Non")

    def valider(account_id, username, password):
        options_choisi = options.get()
        option = options_suppr[options_choisi]
        if option == "oui":
            try:
                curseur.execute("DELETE FROM Pauses WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Objectif WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Comp√©tition WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Activit√© WHERE account_id = ?", (account_id,))
                curseur.execute("DELETE FROM Account WHERE id = ?", (account_id,))
                con.commit()
                CTkMessagebox(
                    title="Op√©ration r√©ussi",
                    message="Compte supprim√© avec succ√®s ! Au revoir !",
                    icon="check"
                )
                app.after(1500, lambda: [vider_fenetre(app), inscription()])
            except sqlite3.Error as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur de base de donn√©es lors de la suppression du compte",
                    icon="cancel"
                )
            except Exception as e:
                CTkMessagebox(
                    title="Erreur inattendu",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer",
                    icon="cancel"
                )
        else:
            CTkMessagebox(
                title="Suppression de compte annul√©",
                message="Votre compte n'a pas √©t√© supprim√©",
                icon="info"
            )
    button_check = ctk.CTkButton(master=cadre_statut, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: valider(account_id, username, password))
    button_check.pack(padx=10, pady=15)

def ajouter_comp√©tition(account_id, username, password):
    cadre_activit√© = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_activit√©.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    frame = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame.pack(pady=(20, 10))
    frame_tout = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur2, corner_radius=corner1)
    frame_tout.pack()
    frame1 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame1.pack(pady=(10, 5), padx=10)
    frame2 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame2.pack(pady=(5, 5), padx=10)
    frame3 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame3.pack(pady=(5, 10), padx=10)
    frame4 = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame4.pack(pady=20)

    Titre = ctk.CTkLabel(master=frame ,text="Ajouter une comp√©tition", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20, side="left")

    option = ["√âv√©nement Principal", "√âv√©nement Secondaire", "√âv√©nement tertiaire"]
    app.bind('<Return>', lambda event: sql_ajout√©(account_id, username, password))

    date_entry = ctk.CTkEntry(master=frame1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=(0, 5))    
    sport_entry = ctk.CTkEntry(master=frame1, placeholder_text="Sport", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="right", padx=(5, 0))

    nom_entry = ctk.CTkEntry(master=frame2, placeholder_text="Nom de la comp√©tition", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    nom_entry.pack(side="left", padx=(0, 5))
    objectif_entry = ctk.CTkEntry(master=frame2, placeholder_text="Objectif", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    objectif_entry.pack(side="right", padx=(5, 0))

    lieu_entry = ctk.CTkEntry(master=frame3, placeholder_text="Lieu (optionnel)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    lieu_entry.pack(side="left", padx=(0, 5))
    priorite_entry = ctk.CTkComboBox(master=frame3, values=option, font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    priorite_entry.pack(side="right", padx=(5, 0))
    priorite_entry.set("Priorit√©")

    def sql_ajout√©(account_id, username, password):
        nom = nom_entry.get().strip()
        date_str = date_entry.get().strip()
        date_conversion = datetime.strptime(date_str, '%d-%m-%Y')
        date = date_conversion.strftime('%Y-%m-%d')
        sport = sport_entry.get().strip()
        objectif = objectif_entry.get().strip()
        lieu = lieu_entry.get().strip()
        priorit√© = priorite_entry.get().strip()

        if not nom or not date_str or not sport or not objectif or not priorit√©:
            CTkMessagebox(
                title="Erreur",
                message="Veuillez remplir tous les champs",
                icon="cancel"
            )
        else:
            try:
                curseur.execute("INSERT INTO Comp√©tition (account_id, nom, date, sport, objectif, lieu, priorit√©) VALUES (?, ?, ?, ?, ?, ?, ?)", (account_id, nom, date, sport, objectif, lieu, priorit√©))
                con.commit()
                CTkMessagebox(
                    title="Enregistr√©",
                    message="Votre comp√©tition a √©t√© enregistr√©, bonne chance !",
                    icon="check"
                )
                app.after(1500, lambda: [vider_fenetre(app), ajouter_comp√©tition(account_id, username, password)])
            except sqlite3.Error as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur de base de donn√©es lors de l'ajout de la comp√©tition.",
                    icon="cancel"
                )
            except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_enregistrer = ctk.CTkButton(master=frame4, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: sql_ajout√©(account_id, username, password))
    button_enregistrer.pack(side="left", padx=5)
    button_back = ctk.CTkButton(master=frame4, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), comp√©tition(account_id, username, password)])
    button_back.pack(side="left", padx=5)

def supprimer_comp√©tition(account_id, username, password):
    cadre_activit√© = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_activit√©.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    Titre = ctk.CTkLabel(master=cadre_activit√© ,text="Supprimer une comp√©tition", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    frame1 = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame1.pack(pady=10)

    app.bind('<Return>', lambda event: supression(account_id, username, password))
    choix_entry = ctk.CTkEntry(master=frame1, placeholder_text="ID de la comp√©tition √† supprimer", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=350)
    choix_entry.pack(pady=10, side="left", padx=10)

    frame_boutons = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
        curseur.execute("SELECT id, sport, nom, date, lieu FROM Comp√©tition WHERE account_id = ?", (account_id,))
        result = curseur.fetchall()
        headers = ["id", "Sport", "Nom", "Date", "Lieu"]
        for col_idx, header_text in enumerate(headers):
            label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
            label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
            tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if result:
            for row_idx, activite in enumerate(result):
                for col_idx, data in enumerate(activite):
                    if col_idx == 3:
                        date = datetime.strptime(str(data), '%Y-%m-%d')
                        data = date.strftime('%d-%m-%Y')
                    label = ctk.CTkLabel(master=tableau_frame, text=str(data), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                    label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
        else:
            pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©.", font=("Arial", 14))
            pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)

        def supression(account_id, username, password):
            choix = choix_entry.get().strip()
            try:
                choix_id_saisi = int(choix)
                ids_competitions_disponibles = [comp[0] for comp in result]

                if choix_id_saisi in ids_competitions_disponibles:
                    competition_id_db = choix_id_saisi
                    curseur.execute("DELETE FROM Comp√©tition WHERE id = ? AND account_id = ?", (competition_id_db, account_id))
                    con.commit()
                    CTkMessagebox(
                        title="Suppression r√©ussie",
                        message="Comp√©tition supprim√©e avec succ√®s.",
                        icon="check"
                    )
                    app.after(1500, lambda: [vider_fenetre(app), supprimer_comp√©tition(account_id, username, password)])
                else:
                    CTkMessagebox(
                        title="Erreur",
                        message="L'ID de la comp√©tition saisie n'existe pas ou n'appartient pas √† votre compte.",
                        icon="cancel"
                    )
            except sqlite3.Error as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur de base de donn√©es lors de la suppression de la comp√©tition.",
                    icon="cancel"
                )
            except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    except sqlite3.Error as e:
        CTkMessagebox(
            title="Erreur",
            message="Erreur de base de donn√©es lors de la r√©cup√©ration de vos comp√©tition.",
            icon="cancel"
        )
    except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: supression(account_id, username, password))
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: [vider_fenetre(app), comp√©tition(account_id, username, password)])
    button_retour.pack(side="left", padx=5, pady=20)

def toute_comp√©tition(account_id, username, password):
    cadre_historique = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_historique.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_historique, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    Titre = ctk.CTkLabel(master=cadre_historique, text="Toutes les comp√©titions", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=(25, 10))

    boite3 = ctk.CTkFrame(master=cadre_historique, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
            curseur.execute("SELECT nom, date, sport, objectif, lieu FROM Comp√©tition WHERE account_id = ? ORDER BY date ASC", (account_id,))
            comp√©tition_result = curseur.fetchall()

            headers = ["Nom", "Date", "Sport", "Objectif", "Lieu"]

            for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=15, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)

            if comp√©tition_result:
                for row_idx, activite in enumerate(comp√©tition_result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=15, pady=15, sticky="ew")
            else:
                pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucune comp√©tition n'a √©t√© enregistr√©e.", font=(font_principale, taille3))
                pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de la r√©cup√©ration de vos comp√©titions.",
                icon="cancel"
            )
    except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_retour = ctk.CTkButton(master=cadre_historique, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), comp√©tition(account_id, username, password)])
    button_retour.pack(padx=10, pady=20)

def comp√©tition(account_id, username, password):
    cadre_historique = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_historique.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_historique, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    navbar = ctk.CTkFrame(master=cadre_historique, fg_color="transparent")
    navbar.pack(pady=20)

    frame_boutons = ctk.CTkFrame(master=cadre_historique, fg_color="transparent")
    frame_boutons.pack(pady=(20, 5))
    boite3 = ctk.CTkFrame(master=cadre_historique, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Charge d'entra√Ænement":
            app.after(0, lambda: [vider_fenetre(app), performance(account_id, username, password)])
        elif choix == "Objectif":
            app.after(0, lambda: [vider_fenetre(app), objectifs(account_id, username, password)])
        elif choix == "Comp√©tition":
            app.after(0, lambda: [vider_fenetre(app), comp√©tition(account_id, username, password)])
    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Charge d'entra√Ænement", "Objectif", "Comp√©tition"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Comp√©tition")
    button_autre = ctk.CTkButton(master=navbar, text="üîö Toutes les comp√©titions", fg_color=couleur2, hover_color=couleur2_hover,
                                    font=(font_principale, taille3), text_color=couleur1, height=button_height, corner_radius=corner2,
                                    width=260,
                                    command=lambda: [vider_fenetre(app), toute_comp√©tition(account_id, username, password)])
    button_autre.pack(side="left", padx=10)

    button_ajouter = ctk.CTkButton(master=frame_boutons, text="‚ûï  Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                           command=lambda: [vider_fenetre(app), ajouter_comp√©tition(account_id, username, password)])
    button_ajouter.pack(side="left", padx=2)
    button_delete = ctk.CTkButton(master=frame_boutons, text="üóëÔ∏è  Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                           command=lambda: [vider_fenetre(app), supprimer_comp√©tition(account_id, username, password)])
    button_delete.pack_forget()
    try:
            curseur.execute("SELECT nom, date, sport, objectif, lieu, priorit√© FROM Comp√©tition WHERE account_id = ? AND date >= ? ORDER BY date ASC", (account_id, date_actuelle))
            comp√©tition_result = curseur.fetchall()

            headers = ["Nom", "Date", "Sport", "Objectif", "Lieu", "Priorit√©"]

            for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=15, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)

            if comp√©tition_result:
                for row_idx, activite in enumerate(comp√©tition_result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=15, pady=15, sticky="ew")
                button_delete.pack(side="left", padx=2)
            else:
                pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucune comp√©tition futur n'a √©t√© enregistr√©e.", font=(font_principale, taille1))
                pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de la r√©cup√©ration de vos comp√©titions.",
                icon="cancel"
            )
    except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )

def ajouter_objectif(account_id, username, password):
    cadre_activit√© = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_activit√©.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    frame = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame.pack(pady=(20, 10))
    frame_tout = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur2, corner_radius=corner1)
    frame_tout.pack()
    frame1 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame1.pack(pady=(10, 5), padx=10)
    frame2 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame2.pack(pady=(5, 5), padx=10)
    frame3 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame3.pack(pady=(5, 10), padx=10)
    frame4 = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame4.pack(pady=20)

    options_statut = {"En cours": "en cours", "Atteint" : "atteint", "Non-atteint" : "non-atteint"}
    options_niveau = {"D√©butant": "d√©butant", "Fondations": "fondations", "Interm√©diaire" : "interm√©diaire", "Avanc√©": "avanc√©", "Expert": "expert", "Ma√Ætrise": "ma√Ætrise"}
    Titre = ctk.CTkLabel(master=frame ,text="Ajouter un objectif", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    app.bind('<Return>', lambda event: sql_ajout√©(account_id, username, password))
    sport_entry = ctk.CTkEntry(master=frame1, placeholder_text="Sport", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="left", padx=(0, 5))
    date_entry = ctk.CTkEntry(master=frame1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="right", padx=(5, 0))

    objectif_entry = ctk.CTkEntry(master=frame2, placeholder_text="Objectif", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    objectif_entry.pack(side="left", padx=(0, 5))
    fr√©quence_entry = ctk.CTkEntry(master=frame2, placeholder_text="Fr√©quence (ex: 2 s√©ances/semaine)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    fr√©quence_entry.pack(side="right", padx=(5, 0))

    niveau_entry = ctk.CTkComboBox(master=frame3, values=list(options_niveau.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    niveau_entry.pack(side="left", padx=(0, 5))
    niveau_entry.set("Niveau actuel")
    statut_entry = ctk.CTkComboBox(master=frame3, values=list(options_statut.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    statut_entry.pack(side="right", padx=(5, 0))
    statut_entry.set("Statut de l'objectif")

    def sql_ajout√©(account_id, username, password):
        sport = sport_entry.get().strip()
        date_str = date_entry.get().strip()
        date_conversion = datetime.strptime(date_str, '%d-%m-%Y')
        date = date_conversion.strftime('%Y-%m-%d')
        objectif = objectif_entry.get().strip()
        fr√©quence = fr√©quence_entry.get().strip()
        niveau_choisi = niveau_entry.get()
        niveau = options_niveau[niveau_choisi]
        statut_choisi = statut_entry.get()
        statut = options_statut[statut_choisi]

        if not sport or not date_str or not objectif or not fr√©quence or not niveau:
            CTkMessagebox(
                title="Erreur",
                message="Veuillez remplir tous les champs",
                icon="cancel"
            )
        else:
            try:
                curseur.execute("INSERT INTO Objectif (account_id, sport, date, objectif, fr√©quence, niveau_d√©but, statut) VALUES (?, ?, ?, ?, ?, ?, ?)", (account_id, sport, date, objectif, fr√©quence, niveau, statut))
                con.commit()
                CTkMessagebox(
                    title="Enregistr√©",
                    message="Votre objectif a √©t√© enregistr√©, bonne chance !",
                    icon="check"
                )
                app.after(1500, lambda: [vider_fenetre(app), ajouter_objectif(account_id, username, password)])
            except sqlite3.Error as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur de base de donn√©es lors de l'ajout de votre objectif.",
                    icon="cancel"
                )
            except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_enregistrer = ctk.CTkButton(master=frame4, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                        command=lambda: sql_ajout√©(account_id, username, password))
    button_enregistrer.pack(side="left", padx=5)
    button_back = ctk.CTkButton(master=frame4, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), objectifs(account_id, username, password)])
    button_back.pack(side="left", padx=5)

def modifier_niveau_final(account_id, username, password):
    cadre_activit√© = ctk.CTkFrame(master=app, fg_color=couleur_fond)       
    cadre_activit√©.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    Titre = ctk.CTkLabel(master=cadre_activit√© ,text="Ajouter niveau final", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    frame1 = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame1.pack(pady=10)
    app.bind('<Return>', lambda event: valider(account_id, username, password))
    choix_entry = ctk.CTkEntry(master=frame1, placeholder_text="ID de l'objectif √† modifier", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    choix_entry.pack(pady=10, side="left", padx=5)

    options = ["D√©butant", "Fondations", "Interm√©diaire", "Avanc√©", "Expert", "Ma√Ætrise"]
    niveau_final = ctk.CTkComboBox(master=frame1, values=options, font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    niveau_final.pack(pady=10, side="left", padx=5)
    niveau_final.set("Niveau final")

    frame_boutons = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
        curseur.execute("SELECT id, sport, date, niveau_d√©but, statut FROM Objectif WHERE account_id = ?", (account_id,))
        result = curseur.fetchall()
        headers = ["id", "Sport", "Date", "Niveau au d√©but", "Statut"]

        for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if result:
                for row_idx, activite in enumerate(result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 2:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
        else:
                pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©", font=(font_principale, taille1))
                pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)

        def valider(account_id, username, password):
            choix = choix_entry.get().strip()
            try:
                choix_id_saisi = int(choix)
                ids_objectifs_disponibles = [obj[0] for obj in result]

                if choix_id_saisi in ids_objectifs_disponibles:
                    fin_niveau = niveau_final.get().strip().lower()
                    if fin_niveau in ["d√©butant", "fondations", "interm√©diaire", "avanc√©", "expert", "ma√Ætrise"]:
                        objectif_id_db = choix_id_saisi
                        curseur.execute("UPDATE Objectif SET niveau_fin = ? WHERE id = ? AND account_id = ?", (fin_niveau, objectif_id_db, account_id))
                        con.commit()
                        CTkMessagebox(
                            title="Op√©ration r√©ussie",
                            message="Objectif mis √† jour avec succ√®s.",
                            icon="check"
                        )
                        app.after(1500, lambda: [vider_fenetre(app), modifier_niveau_final(account_id, username, password)])
                    else:
                        CTkMessagebox(
                            title="Erreur",
                            message="Niveau final invalide. Veuillez r√©essayer",
                            icon="cancel"
                        )
                else:
                    CTkMessagebox(
                        title="Erreur",
                        message="L'ID de l'objectif saisi n'existe pas ou n'appartient pas √† votre compte.",
                        icon="cancel"
                    )
            except sqlite3.Error as e:
                CTkMessagebox(
                    title="Erreur",
                    message=f"Erreur de base de donn√©es lors de la modification de l'objectif.",
                    icon="cancel"
                )
            except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    except sqlite3.Error as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur de base de donn√©es lors de la r√©cup√©ration de vos objectifs.",
                    icon="cancel"
                )
    except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: valider(account_id, username, password))
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), objectifs(account_id, username, password)])
    button_retour.pack(side="left", padx=5, pady=20)

def supprimer_objectif(account_id, username, password):
    cadre_activit√© = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_activit√©.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    Titre = ctk.CTkLabel(master=cadre_activit√© ,text="Supprimer un objectif", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    frame1 = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame1.pack(pady=10)

    app.bind('<Return>', lambda event: supression(account_id, username, password))
    choix_entry = ctk.CTkEntry(master=frame1, placeholder_text="ID de l'objectif √† supprimer", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    choix_entry.pack(pady=10, side="left", padx=10)

    frame_boutons = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
        curseur.execute("SELECT id, sport, date, objectif, statut FROM Objectif WHERE account_id = ?", (account_id,))
        result = curseur.fetchall()
        headers = ["id", "Sport", "Date", "Objectif", "Statut"]
        for col_idx, header_text in enumerate(headers):
            label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
            label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
            tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if result:
            for row_idx, activite in enumerate(result):
                for col_idx, data in enumerate(activite):
                    if col_idx == 2:
                        date = datetime.strptime(str(data), '%Y-%m-%d')
                        data = date.strftime('%d-%m-%Y')
                    label = ctk.CTkLabel(master=tableau_frame, text=str(data), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                    label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
        else:
            pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©.", font=("Arial", 14))
            pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)

        def supression(account_id, username, password):
            choix = choix_entry.get().strip()
            try:
                choix_id_saisi = int(choix)
                ids_objectifs_disponibles = [obj[0] for obj in result]

                if choix_id_saisi in ids_objectifs_disponibles:
                    objectif_id_db = choix_id_saisi
                    curseur.execute("DELETE FROM Objectif WHERE id = ? AND account_id = ?", (objectif_id_db, account_id))
                    con.commit()
                    CTkMessagebox(
                        title="Suppression r√©ussie",
                        message="Objectif supprim√© avec succ√®s.",
                        icon="check"
                    )
                    app.after(1500, lambda: [vider_fenetre(app), supprimer_objectif(account_id, username, password)])
                else:
                    CTkMessagebox(
                        title="Erreur",
                        message="L'ID de l'objectif saisi n'existe pas ou n'appartient pas √† votre compte.",
                        icon="cancel"
                    )
            except sqlite3.Error as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur de base de donn√©es lors de la suppression de l'objectif.",
                    icon="cancel"
                )
            except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    except sqlite3.Error as e:
        CTkMessagebox(
            title="Erreur",
            message="Erreur de base de donn√©es lors de la r√©cup√©ration de vos objectifs.",
            icon="cancel"
        )
    except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: supression(account_id, username, password))
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: [vider_fenetre(app), objectifs(account_id, username, password)])
    button_retour.pack(side="left", padx=5, pady=20)

def tout_objectif(account_id, username, password):
    cadre_historique = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_historique.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_historique, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    Titre = ctk.CTkLabel(master=cadre_historique, text="Tous les objectifs", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=(25, 10))

    boite3 = ctk.CTkFrame(master=cadre_historique, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
            curseur.execute("SELECT sport, date, objectif, niveau_d√©but, niveau_fin FROM Objectif WHERE account_id = ? ORDER BY date ASC", (account_id,))
            comp√©tition_result = curseur.fetchall()

            headers = ["Sport", "Date", "Objectifs", "Level d√©but", "Level fin"]

            for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=15, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)

            if comp√©tition_result:
                for row_idx, activite in enumerate(comp√©tition_result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=15, pady=15, sticky="ew")
            else:
                pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif n'a √©t√© enregistr√©.", font=(font_principale, taille1))
                pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de la r√©cup√©ration de vos objectifs.",
                icon="cancel"
            )
    except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_retour = ctk.CTkButton(master=cadre_historique, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), objectifs(account_id, username, password)])
    button_retour.pack(padx=10, pady=20)

def modifier_objectif(account_id, username, password):
    cadre_activit√© = ctk.CTkFrame(master=app, fg_color=couleur_fond)       
    cadre_activit√©.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    Titre = ctk.CTkLabel(master=cadre_activit√© ,text="Changer le statut", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    frame1 = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame1.pack(pady=10)
    app.bind('<Return>', lambda event: modification(account_id, username, password))
    choix_entry = ctk.CTkEntry(master=frame1, placeholder_text="ID de l'objectif √† modifier", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    choix_entry.pack(pady=10, side="left", padx=5)

    options = ["En cours", "Atteint", "Non atteint"]
    new_entry = ctk.CTkComboBox(master=frame1, values=options, font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    new_entry.pack(pady=10, side="left", padx=5)
    new_entry.set("Statut de l'objectif")

    frame_boutons = ctk.CTkFrame(master=cadre_activit√©, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=cadre_activit√©, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
        curseur.execute("SELECT id, sport, date, objectif, statut FROM Objectif WHERE account_id = ?", (account_id,))
        result = curseur.fetchall()
        headers = ["id", "Sport", "Date", "Objectif", "Statut"]

        for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)

        if result:
                for row_idx, activite in enumerate(result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 2:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
        else:
                pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©", font=(font_principale, taille1))
                pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)

        def modification(account_id, username, password):
            choix = choix_entry.get().strip()
            try:
                choix_id_saisi = int(choix)
                ids_objectifs_disponibles = [obj[0] for obj in result]

                if choix_id_saisi in ids_objectifs_disponibles:
                    nouveau_statut = new_entry.get().strip().lower()
                    if nouveau_statut in ["en cours", "atteint", "non atteint"]:
                        objectif_id_db = choix_id_saisi
                        curseur.execute("UPDATE Objectif SET statut = ? WHERE id = ? AND account_id = ?", (nouveau_statut, objectif_id_db, account_id))
                        con.commit()
                        CTkMessagebox(
                            title="Op√©ration r√©ussie",
                            message="Objectif mis √† jour avec succ√®s.",
                            icon="check"
                        )
                        app.after(1500, lambda: [vider_fenetre(app), modifier_objectif(account_id, username, password)])
                    else:
                        CTkMessagebox(
                            title="Erreur",
                            message="Statut invalide. Veuillez r√©essayer",
                            icon="cancel"
                        )
                else:
                    CTkMessagebox(
                        title="Erreur",
                        message="L'ID de l'objectif saisi n'existe pas ou n'appartient pas √† votre compte.",
                        icon="cancel"
                    )
            except sqlite3.Error as e:
                CTkMessagebox(
                    title="Erreur",
                    message=f"Erreur de base de donn√©es lors de la modification de l'objectif.",
                    icon="cancel"
                )
            except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    except sqlite3.Error as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Erreur de base de donn√©es lors de la r√©cup√©ration de vos objectifs.",
                    icon="cancel"
                )
    except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: modification(account_id, username, password))
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), objectifs(account_id, username, password)])
    button_retour.pack(side="left", padx=5, pady=20)

def objectifs(account_id, username, password):
    cadre_historique = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    cadre_historique.pack(fill="both", expand=True)
    
    boite1 = ctk.CTkFrame(master=cadre_historique, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    navbar = ctk.CTkFrame(master=cadre_historique, fg_color="transparent")
    navbar.pack(pady=20)

    frame_boutons = ctk.CTkFrame(master=cadre_historique, fg_color="transparent")
    frame_boutons.pack(pady=(20, 5))
    boite3 = ctk.CTkFrame(master=cadre_historique, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Charge d'entra√Ænement":
            app.after(0, lambda: [vider_fenetre(app), performance(account_id, username, password)])
        elif choix == "Objectif":
            app.after(0, lambda: [vider_fenetre(app), objectifs(account_id, username, password)])
        elif choix == "Comp√©tition":
            app.after(0, lambda: [vider_fenetre(app), comp√©tition(account_id, username, password)])
    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Charge d'entra√Ænement", "Objectif", "Comp√©tition"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Objectif")
    button_autre = ctk.CTkButton(master=navbar, text="üîö Tous les objectifs", fg_color=couleur2, hover_color=couleur2_hover,
                                    font=(font_principale, taille3), text_color=couleur1, height=button_height, corner_radius=corner2,
                                    width=260,
                                    command=lambda: [vider_fenetre(app), tout_objectif(account_id, username, password)])
    button_autre.pack(side="left", padx=10)

    button_ajouter = ctk.CTkButton(master=frame_boutons, text="‚ûï  Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), ajouter_objectif(account_id, username, password)])
    button_ajouter.pack(side="left", padx=2)
    button_plus = ctk.CTkButton(master=frame_boutons, text="‚úèÔ∏è  Changer le statut", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), modifier_objectif(account_id, username, password)])
    button_plus.pack_forget()
    button = ctk.CTkButton(master=frame_boutons, text="‚úèÔ∏è  Changer niveau final", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), modifier_niveau_final(account_id, username, password)])
    button.pack_forget()
    button_delete = ctk.CTkButton(master=frame_boutons, text="üóëÔ∏è Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), supprimer_objectif(account_id, username, password)])
    button_delete.pack_forget()

    try:
            curseur.execute("SELECT sport, date, objectif, fr√©quence, niveau_d√©but, niveau_fin, statut FROM Objectif WHERE account_id = ? AND date >= ? ORDER BY date ASC", (account_id, date_actuelle))
            objectif_result = curseur.fetchall()

            headers = ["Sport", "Date", "Objectif", "Fr√©quence", "Level d√©but", "Level fin", "Statut"]

            for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)

            if objectif_result:
                for row_idx, activite in enumerate(objectif_result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
                button_plus.pack(side="left", padx=2)
                button.pack(side="left", padx=2)
                button_delete.pack(side="left", padx=2)
            else:
                pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©.", font=(font_principale, taille1))
                pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de la r√©cup√©ration de l'historique.",
                icon="cancel"
            )
    except Exception as e:
            CTkMessagebox(
                title="Erreur",
                message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                icon="cancel"
            )

def performance(account_id, username, password):
    cadre_performance = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_performance.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_performance, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    navbar = ctk.CTkFrame(master=cadre_performance, fg_color="transparent")
    navbar.pack(pady=20)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    fig = None
    canvas = None
    def fermer_graphique_pause(account_id, username, password):
        plt.close(fig)
        modifier_statut(account_id, username, password)
    def fermer_graphique(account_id, username, password):
        plt.close(fig)
        accueil(account_id, username, password)
    def fermer_graphique_mode():    
        nonlocal fig
        if fig:
            plt.close(fig)
            fig = None

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if fig is None:
            if choix == "Charge d'entra√Ænement":
                app.after(0, lambda: [vider_fenetre(app), performance(account_id, username, password)])
            elif choix == "Objectif":
                app.after(0, lambda: [vider_fenetre(app), objectifs(account_id, username, password)])
            elif choix == "Comp√©tition":
                app.after(0, lambda: [vider_fenetre(app), comp√©tition(account_id, username, password)])
        else:
            if choix == "Charge d'entra√Ænement":
                app.after(0, lambda: [fermer_graphique_mode(), vider_fenetre(app), performance(account_id, username, password)])
            elif choix == "Objectif":
                app.after(0, lambda: [fermer_graphique_mode(), vider_fenetre(app), objectifs(account_id, username, password)])
            elif choix == "Comp√©tition":
                app.after(0, lambda: [fermer_graphique_mode(), vider_fenetre(app), comp√©tition(account_id, username, password)])
    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Charge d'entra√Ænement", "Objectif", "Comp√©tition"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Charge d'entra√Ænement")
    button_autre = ctk.CTkButton(master=navbar, text="‚è∏Ô∏è Mettre en pause les analyses", fg_color=couleur2, hover_color=couleur2_hover,
                                    font=(font_principale, taille3), text_color=couleur1, height=button_height, corner_radius=corner2,
                                    command=lambda: [vider_fenetre(app), fermer_graphique_pause(account_id, username, password)])
    button_autre.pack(side="left", padx=10)

    charge_aigue = 0.0
    charge_chronique = 0.0
    try:
        ca = date_actuelle - timedelta(days=7)
        ca_str = ca.strftime('%Y-%m-%d')
        curseur.execute("SELECT charge FROM Activit√© WHERE account_id = ? AND date_activit√© >= ?", (account_id, ca_str))
        charges_aigue = [row[0] for row in curseur.fetchall()]

        cc = date_actuelle - timedelta(days=28)
        cc_str = cc.strftime('%Y-%m-%d')
        curseur.execute("SELECT date_activit√©, charge FROM Activit√© WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© ASC", (account_id, cc_str))
        data_pour_graphique = curseur.fetchall()

        charge_aigue = sum(charges_aigue) / len(charges_aigue) if charges_aigue else 0
        #On prend le 2√®me √©l√©ment des data pour graphique pour avoir les charges et ne pas prendre les dates
        charge_chronique = sum([row[1] for row in data_pour_graphique]) / len(data_pour_graphique) if data_pour_graphique else 0
    except sqlite3.Error as e:
        CTkMessagebox(
            title="Erreur",
            message="Erreur de base de donn√©es lors du calcul de charge d'entra√Ænement.",
            icon="cancel"
        )
    except Exception as e:
        CTkMessagebox(
            title="Erreur",
            message="Une erreur inattendu s'est produite, veuillez r√©essayer",
            icon="cancel"
        )
    parent_frame = ctk.CTkFrame(master=cadre_performance, fg_color="transparent")
    parent_frame.pack(fill="both", expand=True, pady=10)

    boite_charge_entra√Ænement = ctk.CTkFrame(master=parent_frame, border_width=border2, border_color=couleur1, corner_radius=corner1,
                                             fg_color=couleur_fond)
    boite_charge_entra√Ænement.pack(fill="both", expand=True, side="left", padx=10, pady=(0, 10))
    h1_boite_charge_entra√Ænement = ctk.CTkFrame(master=boite_charge_entra√Ænement, fg_color=couleur_fond)
    h1_boite_charge_entra√Ænement.pack(pady=5)

    boite_analyse = ctk.CTkFrame(master=boite_charge_entra√Ænement, border_width=border2, border_color=couleur1, corner_radius=corner1, fg_color=couleur2)
    boite_analyse.pack(fill="both", expand=True, padx=15, pady=5)
    aigue = ctk.CTkFrame(master=boite_analyse, corner_radius=corner1, fg_color=couleur1)
    aigue.pack(fill="both", expand=True, padx=10, pady=(10, 5))
    chronique = ctk.CTkFrame(master=boite_analyse, corner_radius=corner1, fg_color=couleur1)
    chronique.pack(fill="both", expand=True, padx=10, pady=5)
    ratio_frame = ctk.CTkFrame(master=boite_analyse, corner_radius=corner1, fg_color=couleur1)
    ratio_frame.pack(fill="both", expand=True, padx=10, pady=(5, 10))

    boite_statut = ctk.CTkFrame(master=boite_charge_entra√Ænement, border_width=border2, border_color=couleur1, corner_radius=corner1, fg_color=couleur2)
    boite_statut.pack(fill="both", expand=True, padx=15, pady=(5, 15))
    h1_result_optimale = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    h1_result_optimale.pack(fill="both", expand=True, padx=10, pady=(10, 5))
    interpr√©tation = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    interpr√©tation.pack(fill="both", expand=True, padx=10, pady=5)
    conseil = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    conseil.pack(fill="both", expand=True, pady=(5, 10), padx=10)
    
    boite = ctk.CTkFrame(master=parent_frame, border_width=border2, border_color=couleur1, corner_radius=corner1,
                                             fg_color=couleur_fond)
    boite.pack(fill="both", expand=True, side="right", padx=10, pady=(0, 10))
    graphique = ctk.CTkFrame(master=boite, corner_radius=corner1, fg_color="white")
    graphique.pack(fill="both", expand=True, padx=15, pady=(15, 10))
    info = ctk.CTkFrame(master=boite, corner_radius=corner1, fg_color=couleur1)
    info.pack(fill="both", expand=True, padx=15, pady=(0, 15))

    #rappel pour mettre le test a droite "anchor="w""
    h1 = ctk.CTkLabel(master=h1_boite_charge_entra√Ænement, font=(font_secondaire, taille2), text="Analyse")
    h1.pack(padx=10, pady=(5, 0))
    result_analyse = ctk.CTkLabel(master=aigue, text=f"Charge aigu√´ (7 jours) : {charge_aigue:.1f}", font=(font_secondaire , taille3),
                                    width=300, wraplength=280)
    result_analyse.pack(fill="both", expand=True, padx=10, pady=10)
    result_analyse2 = ctk.CTkLabel(master=chronique, text=f"Charge chronique (28 jours) : {charge_chronique:.1f}", font=(font_principale, taille3),
                                    width=300, wraplength=280)
    result_analyse2.pack(fill="both", expand=True, padx=10, pady=10)
    pause = verifier_pause(account_id)
    if pause == "blessure":
        result_analyse3 = ctk.CTkLabel(master=ratio_frame, text="Ratio : actuellement en pause", font=(font_principale, taille3),
                        width=300, wraplength=280)
        result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
        cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="‚õëÔ∏è Mode blessure : suivi d√©sactiv√©", font=(font_principale, taille3),
                                        width=300, wraplength=280, text_color="#c60000")
        cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)           
        interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Vous √™tes bless√© pour le moment", font=(font_principale, taille3),
                                    width=300, wraplength=280)
        interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)              
        conseil_statut = ctk.CTkLabel(master=conseil, text="Prends le temps de laisser ton corps gu√©rir afin de revenir plus fort.", font=(font_principale, taille3),
                                        width=300, wraplength=280)
        conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
    elif pause == "vacances":
        result_analyse3 = ctk.CTkLabel(master=ratio_frame, text="Ratio : actuellement en pause", font=(font_principale, taille3),
                        width=300, wraplength=280)
        result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
        cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üèñÔ∏è Mode vacances : pas d'analyse !", font=(font_principale, taille3),
                                        width=300, wraplength=280, text_color="#6AC100")
        cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)          
        interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Vous √™tes actuellement en vacances.", font=(font_principale, taille3),
                                    width=300, wraplength=280)
        interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)               
        conseil_statut = ctk.CTkLabel(master=conseil, text="Profite bien de cette pause pour te ressourcer et revenir plus motiv√© !", font=(font_principale, taille3),
                                        width=300, wraplength=280)
        conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
    else :
        if charge_chronique > 0:
            ratio = charge_aigue / charge_chronique
        else:
            ratio = None
        if ratio is not None:
            result_analyse3 = ctk.CTkLabel(master=ratio_frame, text=f"Ratio : {ratio:.2f}", font=(font_principale, taille3),
                            width=300, wraplength=280)
            result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
            if ratio < 0.5: 
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üõå R√©cup√©ration active", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#75B7DD")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Charge tr√®s basse. Vous laissez votre corps vous reposer", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)                
                conseil_statut = ctk.CTkLabel(master=conseil, text="Fais une activit√© calme pour reprendre doucement en charge", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            elif 0.5 <= ratio <= 0.8:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üò¥ Sous-entra√Ænement", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#CBC500")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Vous √™tes entrain de perdre en niveau", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                conseil_statut = ctk.CTkLabel(master=conseil, text="Vous pourriez augmenter l√©g√®rement l'intensit√©", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            elif 0.8 <= ratio <= 0.9:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üîÑ Maintien", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#00C073")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Charge adapt√©e pour conserver votre niveau", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                conseil_statut = ctk.CTkLabel(master=conseil, text="Allongez de 5 minutes vos s√©ances pour progresser", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            elif 0.9 <= ratio <= 1.1:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üü¢ Progression optimale", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#00BA47")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Charge id√©ale pour am√©liorer vos performances", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                conseil_statut = ctk.CTkLabel(master=conseil, text="Continuez comme √ßa pour progresser !", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            elif 1.1 < ratio <= 1.3:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üí™ Progression √©l√©v√©e", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#99c800")#3d71a5
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Vous progressez vite, attention aux blessures", 
                                                    font=(font_principale, taille3), width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)                
                conseil_statut = ctk.CTkLabel(master=conseil, text="Surveillez la fatigue de votre corps", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            else:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="‚ö†Ô∏è Surentra√Ænement", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#c60000")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Risque √©lev√© de blessure", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)                
                conseil_statut = ctk.CTkLabel(master=conseil, text="Faites une pause de 2 √† 3 jours pour √©viter les blessures", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
        else:
            result_analyse3 = ctk.CTkLabel(master=ratio_frame, text="Ratio : 0.0", font=(font_principale, taille3),
                                                width=300, wraplength=280)
            result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
            cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üö´ Donn√©es insuffisantes", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#c60000")
            cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
            interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="L'interpr√©tation ne peut pas √™tre d√©termin√©e.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
            interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)                
            conseil_statut = ctk.CTkLabel(master=conseil, text="Veuillez effectuer une s√©ance de sport pour commencer les analyses.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
            conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)   
    try:   
        if data_pour_graphique:
            dates_graphique = [datetime.strptime(row[0], '%Y-%m-%d') for row in data_pour_graphique]
            charges_graphique = [row[1] for row in data_pour_graphique]

            fig, ax = plt.subplots(figsize=(12, 4))
            sns.lineplot(x=dates_graphique, y=charges_graphique, marker="o", color="black")

            ax.axhline(y=charge_chronique, color=couleur1, linestyle="-")
            ax.set_title("√âvolution de la charge chronique")
            ax.set_xlabel("Date")
            ax.set_ylabel("Charge chronique")

            canvas = FigureCanvasTkAgg(fig, master=graphique)
            canvas.draw()
            canvas.get_tk_widget().pack(fill="both", expand=True , pady=15, padx=15)
        else:
            not_data = ctk.CTkFrame(master=graphique, corner_radius=corner1, fg_color=couleur1)
            not_data.pack(expand=True, fill="both", padx=10, pady=10)
            pas_de_donn√©es = ctk.CTkLabel(master=not_data, text="Pas assez de donn√©es pour afficher un graphique.\nAjoutez quelques s√©ances d'entra√Ænement pour voir votre √©volution !",
                                          font=(font_secondaire, taille2), wraplength=575)
            pas_de_donn√©es.pack(padx=15, pady=15)
            button_creer_activite = ctk.CTkButton(master=not_data, text="‚ûï Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                                            corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                            command=lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id, username, password)])
            button_creer_activite.pack(padx=(20, 2), pady=5)
    except Exception as e:
                CTkMessagebox(
                    title="Erreur",
                    message="Une erreur inattendu s'est produite, veuillez r√©essayer.",
                    icon="cancel"
                )
    titre_c_quoi = ctk.CTkLabel(master=info, text="C'est quoi la charge d'entra√Ænement ?", font=(font_secondaire, taille2), wraplength=600)
    titre_c_quoi.pack(fill="both", expand=True, pady=(10, 10), padx=10)
    c_quoi = ctk.CTkLabel(master=info, 
                            text="La charge d'entra√Ænement sert √† optimiser ta progression sans te cramer, en trouvant le juste √©quilibre entre l'effort fourni et la r√©cup√©ration n√©cessaire. C'est ton meilleur ami pour √©viter les blessures et planifier tes s√©ances sportives intelligemment.",
                            font=(font_principale, taille3), wraplength=600)
    c_quoi.pack(fill="both", expand=True, padx=10, pady=(5, 10))

def mon_compte(account_id, username, password):
    cadre_compte = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_compte.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_compte, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    navbar = ctk.CTkFrame(master=cadre_compte, fg_color="transparent")
    navbar.pack(pady=20)
    info = ctk.CTkFrame(master=cadre_compte, corner_radius=corner1, fg_color=couleur1)
    info.pack(padx=15, pady=(0, 15))

    curseur.execute("SELECT sport FROM Account WHERE id = ?", (account_id,))
    result = curseur.fetchall()
    sport = result[0][0]
    curseur.execute("SELECT bio FROM Account WHERE id = ?", (account_id,))
    result = curseur.fetchall()
    bio = result[0][0]

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Mon compte":
            app.after(0, lambda: [vider_fenetre(app), mon_compte(account_id, username, password)])
        elif choix == "Modifier":
            app.after(0, lambda: [vider_fenetre(app), modifier_compte(account_id, username, password)])
        elif choix == "Supprimer mon compte":
            app.after(0, lambda: [vider_fenetre(app), supprimer_compte(account_id, username, password)])
        elif choix == "Mots de passe oubli√©":
            app.after(0, lambda: [vider_fenetre(app), modifier_password(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Mon compte", "Modifier", "Supprimer mon compte", "Mots de passe oubli√©"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Mon compte")
    button_back = ctk.CTkButton(master=navbar, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_back.pack(side="left", padx=10)

    info = ctk.CTkLabel(master=info ,text=
                        f"Votre ID : {account_id}\n\nVotre pseudo : {username}\n\nVotre sport favoris : {sport}\n\nVotre bio : {bio}", 
                        font=(font_principale, taille2), justify="left")
    info.pack(padx=20, pady=20)

def parametre(account_id, username, password):
    cadre_outils = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_outils.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_outils, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1, command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color="transparent", hover_color=couleur2_hover, width=button_width, anchor="w",
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color=couleur1, hover_color=couleur1_hover, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    Titre = ctk.CTkLabel(master=cadre_outils ,text="Param√®tres", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=50, pady=20)

    frame_bouton = ctk.CTkFrame(master=cadre_outils, fg_color="transparent")
    frame_bouton.pack(pady=(20,0), padx=10)
    frame_bouton1 = ctk.CTkFrame(master=frame_bouton, fg_color="transparent")
    frame_bouton1.pack(pady=(20,0), padx=10)
    frame_bouton2 = ctk.CTkFrame(master=frame_bouton, fg_color="transparent")
    frame_bouton2.pack(pady=(10,0), padx=10)
    frame_bouton3 = ctk.CTkFrame(master=frame_bouton, fg_color="transparent")
    frame_bouton3.pack(pady=(10,20), padx=10)

    button_autre = ctk.CTkButton(master=frame_bouton1, text="üë§ Mon Compte",
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3), fg_color=couleur2, 
                           hover_color=couleur2_hover, text_color=couleur1, 
                           command=lambda: [vider_fenetre(app), mon_compte(account_id, username, password)])
    button_autre.pack(side="left" ,padx=10, pady=0)
    button_info = ctk.CTkButton(master=frame_bouton1, text="üì¢ √Ä propos", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1, 
                           command=lambda: [vider_fenetre(app), a_propos(account_id, username, password)])
    button_info.pack(side="left", pady=0, padx=10)
    button_avis = ctk.CTkButton(master=frame_bouton2, text="üÜï Proposer une fonction", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1, 
                           command=lambda: [vider_fenetre(app), proposer_fonction(account_id, username, password)])
    button_avis.pack(side="left", pady=0, padx=10) 
    button_avis = ctk.CTkButton(master=frame_bouton2, text="üï∑Ô∏è  Signaler un bug", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1, 
                           command=lambda: [vider_fenetre(app), signaler_bug(account_id, username, password)])
    button_avis.pack(side="left", pady=0, padx=10) 
    button_avis = ctk.CTkButton(master=frame_bouton3, text="üí¨ R√©diger un avis", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1, 
                           command=lambda: [vider_fenetre(app), avis(account_id, username, password)])
    button_avis.pack(side="left", pady=0, padx=10)    
    button_deco = ctk.CTkButton(master=frame_bouton3, text="üö™D√©connexion", 
                            corner_radius=corner2, width=300, height=button_height, font=(font_principale, taille3),
                            fg_color="#AC1724", hover_color="#8D1822",
                            command=lambda: [vider_fenetre(app), reglage_par_default()])
    button_deco.pack(side="left" ,padx=10, pady=0)

def accueil_int√©rieur(account_id, username, password):
    cadre_accueil = ctk.CTkFrame(master=app, fg_color=couleur_fond) 
    cadre_accueil.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_accueil, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    boite2 = ctk.CTkFrame(master=cadre_accueil, fg_color="transparent", corner_radius=corner3)
    boite2.pack(side="top", fill="x", pady=20)
    topbar = ctk.CTkFrame(master=boite2, fg_color="transparent", corner_radius=corner3)
    topbar.pack(anchor="center")
    element_topbar = ctk.CTkFrame(master=topbar, fg_color="transparent")
    element_topbar.pack()

    boite_semi_header = ctk.CTkFrame(master=cadre_accueil, fg_color="transparent")
    boite_semi_header.pack(side="top", pady=10)

    boite3 = ctk.CTkFrame(master=cadre_accueil, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color=couleur1, hover_color=couleur1_hover, width=button_width, anchor="w",
                                    command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    button_supprimer = ctk.CTkButton(master=element_topbar, text="üóëÔ∏è Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=lambda: supprimer_activit√©(account_id, username, password, avoir_periode(combo_periode.get(), options_periode)))
    button_supprimer.pack(side="right", padx=2, pady=5)
    button_creer_activite = ctk.CTkButton(master=element_topbar, text="‚ûï Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id, username, password)])
    button_creer_activite.pack(side="right", padx=(20, 2), pady=5)
    info = ctk.CTkLabel(master=element_topbar, text="Historique d'entra√Ænement", font=(font_secondaire, taille1), text_color=couleur_text)
    info.pack(side="right", padx=20)
    options_periode = {"1 semaine": 7, "1 mois": 30, "3 mois": 90, "6 mois": 180, "1 an": 365, "Tout voir": 9999}
    combo_periode = ctk.CTkComboBox(master=element_topbar, values=list(options_periode.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur2, button_color=couleur2, fg_color=couleur2,
                                    corner_radius=corner2, width=220, dropdown_fg_color=couleur2, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    combo_periode.pack(side="right", padx=(10, 20), pady=5)
    def avoir_periode(selection_text, options_dict):
        jours_a_soustraire = options_dict[selection_text]
        date_debut = date_actuelle - timedelta(days=jours_a_soustraire)
        return date_debut.strftime('%Y-%m-%d')
    
    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), accueil(account_id, username, password)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), accueil_int√©rieur(account_id, username, password)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), accueil_musculation(account_id, username, password)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), accueil_football(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=boite_semi_header, values=["Ext√©rieur", "Int√©rieur", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Int√©rieur")

    def mettre_a_jour_historique(selection):
        for widget in tableau_frame.winfo_children():
            widget.destroy()        
        try:
            jours_a_soustraire = options_periode[selection]
            date_debut = date_actuelle - timedelta(days=jours_a_soustraire)
            p√©riode_str_pour_requete = date_debut.strftime('%Y-%m-%d')
            curseur.execute("SELECT sport, date_activit√©, dur√©e, rpe, nom FROM Activit√©_int√©rieur WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC", (account_id, p√©riode_str_pour_requete))
            activites = curseur.fetchall()
            headers = ["Sport", "Date", "Dur√©e", "RPE", "Nom"]
            for col_idx, header_text in enumerate(headers):
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=15, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)
            if activites:
                for row_idx, activite in enumerate(activites):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            data = datetime.strptime(str(data), '%Y-%m-%d').strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=15, pady=15, sticky="ew")
            else:
                pas_donnees = ctk.CTkLabel(master=tableau_frame, text="Aucune activit√© enregistr√©e pour cette p√©riode.", font=(font_principale, taille1))
                pas_donnees.grid(row=1, column=0, columnspan=len(headers), pady=20)

        except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de la r√©cup√©ration de votre historique", 
                icon="cancel"
                )
        except Exception as e:
            CTkMessagebox(
                title="Erreur", 
                message="Une erreur inattendu s'est produite, veuillez r√©essayer.", 
                icon="cancel"
                )
    combo_periode.configure(command=mettre_a_jour_historique)
    combo_periode.set("1 semaine")
    mettre_a_jour_historique("1 semaine")

def accueil_football(account_id, username, password):
    cadre_accueil = ctk.CTkFrame(master=app, fg_color=couleur_fond) 
    cadre_accueil.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_accueil, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    boite2 = ctk.CTkFrame(master=cadre_accueil, fg_color="transparent", corner_radius=corner3)
    boite2.pack(side="top", fill="x", pady=20)
    topbar = ctk.CTkFrame(master=boite2, fg_color="transparent", corner_radius=corner3)
    topbar.pack(anchor="center")
    element_topbar = ctk.CTkFrame(master=topbar, fg_color="transparent")
    element_topbar.pack()

    boite_semi_header = ctk.CTkFrame(master=cadre_accueil, fg_color="transparent")
    boite_semi_header.pack(side="top", pady=10)

    boite3 = ctk.CTkFrame(master=cadre_accueil, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color=couleur1, hover_color=couleur1_hover, width=button_width, anchor="w",
                                    command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    button_supprimer = ctk.CTkButton(master=element_topbar, text="üóëÔ∏è Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=lambda: supprimer_activit√©(account_id, username, password, avoir_periode(combo_periode.get(), options_periode)))
    button_supprimer.pack(side="right", padx=2, pady=5)
    button_creer_activite = ctk.CTkButton(master=element_topbar, text="‚ûï Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id, username, password)])
    button_creer_activite.pack(side="right", padx=(20, 2), pady=5)
    info = ctk.CTkLabel(master=element_topbar, text="Historique d'entra√Ænement", font=(font_secondaire, taille1), text_color=couleur_text)
    info.pack(side="right", padx=20)
    options_periode = {"1 semaine": 7, "1 mois": 30, "3 mois": 90, "6 mois": 180, "1 an": 365, "Tout voir": 9999}
    combo_periode = ctk.CTkComboBox(master=element_topbar, values=list(options_periode.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur2, button_color=couleur2, fg_color=couleur2,
                                    corner_radius=corner2, width=220, dropdown_fg_color=couleur2, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    combo_periode.pack(side="right", padx=(10, 20), pady=5)
    def avoir_periode(selection_text, options_dict):
        jours_a_soustraire = options_dict[selection_text]
        date_debut = date_actuelle - timedelta(days=jours_a_soustraire)
        return date_debut.strftime('%Y-%m-%d')
        
    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), accueil(account_id, username, password)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), accueil_int√©rieur(account_id, username, password)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), accueil_musculation(account_id, username, password)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), accueil_football(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=boite_semi_header, values=["Ext√©rieur", "Int√©rieur", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Football")

    def mettre_a_jour_historique(selection):
        for widget in tableau_frame.winfo_children():
            widget.destroy()        
        try:
            jours_a_soustraire = options_periode[selection]
            date_debut = date_actuelle - timedelta(days=jours_a_soustraire)
            p√©riode_str_pour_requete = date_debut.strftime('%Y-%m-%d')
            curseur.execute("SELECT date_activit√©, dur√©e, rpe, type_de_s√©ances, humeur, but, passe_d√©cisive FROM Activit√©_football WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC", (account_id, p√©riode_str_pour_requete))
            activites = curseur.fetchall()
            headers = ["Date", "Dur√©e", "RPE", "Type", "Humeur", "But", "Passe D"]
            for col_idx, header_text in enumerate(headers):
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=15, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)
            if activites:
                for row_idx, activite in enumerate(activites):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 0:
                            data = datetime.strptime(str(data), '%Y-%m-%d').strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=15, pady=15, sticky="ew")
            else:
                pas_donnees = ctk.CTkLabel(master=tableau_frame, text="Aucune activit√© enregistr√©e pour cette p√©riode.", font=(font_principale, taille1))
                pas_donnees.grid(row=1, column=0, columnspan=len(headers), pady=20)

        except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de la r√©cup√©ration de votre historique", 
                icon="cancel"
                )
        except Exception as e:
            CTkMessagebox(
                title="Erreur", 
                message="Une erreur inattendu s'est produite, veuillez r√©essayer.", 
                icon="cancel"
                )
    combo_periode.configure(command=mettre_a_jour_historique)
    combo_periode.set("1 semaine")
    mettre_a_jour_historique("1 semaine")

def accueil_musculation(account_id, username, password):
    cadre_accueil = ctk.CTkFrame(master=app, fg_color=couleur_fond) 
    cadre_accueil.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_accueil, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    boite2 = ctk.CTkFrame(master=cadre_accueil, fg_color="transparent", corner_radius=corner3)
    boite2.pack(side="top", fill="x", pady=20)
    topbar = ctk.CTkFrame(master=boite2, fg_color="transparent", corner_radius=corner3)
    topbar.pack(anchor="center")
    element_topbar = ctk.CTkFrame(master=topbar, fg_color="transparent")
    element_topbar.pack()

    boite_semi_header = ctk.CTkFrame(master=cadre_accueil, fg_color="transparent")
    boite_semi_header.pack(side="top", pady=10)

    boite3 = ctk.CTkFrame(master=cadre_accueil, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color=couleur1, hover_color=couleur1_hover, width=button_width, anchor="w",
                                    command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    button_supprimer = ctk.CTkButton(master=element_topbar, text="üóëÔ∏è Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=lambda: supprimer_activit√©(account_id, username, password, avoir_periode(combo_periode.get(), options_periode)))
    button_supprimer.pack(side="right", padx=2, pady=5)
    button_creer_activite = ctk.CTkButton(master=element_topbar, text="‚ûï Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id, username, password)])
    button_creer_activite.pack(side="right", padx=(20, 2), pady=5)
    info = ctk.CTkLabel(master=element_topbar, text="Historique d'entra√Ænement", font=(font_secondaire, taille1), text_color=couleur_text)
    info.pack(side="right", padx=20)
    options_periode = {"1 semaine": 7, "1 mois": 30, "3 mois": 90, "6 mois": 180, "1 an": 365, "Tout voir": 9999}
    combo_periode = ctk.CTkComboBox(master=element_topbar, values=list(options_periode.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur2, button_color=couleur2, fg_color=couleur2,
                                    corner_radius=corner2, width=220, dropdown_fg_color=couleur2, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    combo_periode.pack(side="right", padx=(10, 20), pady=5)
    def avoir_periode(selection_text, options_dict):
        jours_a_soustraire = options_dict[selection_text]
        date_debut = date_actuelle - timedelta(days=jours_a_soustraire)
        return date_debut.strftime('%Y-%m-%d')
    
    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), accueil(account_id, username, password)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), accueil_int√©rieur(account_id, username, password)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), accueil_musculation(account_id, username, password)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), accueil_football(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=boite_semi_header, values=["Ext√©rieur", "Int√©rieur", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Musculation")

    def mettre_a_jour_historique(selection):
        for widget in tableau_frame.winfo_children():
            widget.destroy()        
        try:
            jours_a_soustraire = options_periode[selection]
            date_debut = date_actuelle - timedelta(days=jours_a_soustraire)
            p√©riode_str_pour_requete = date_debut.strftime('%Y-%m-%d')
            curseur.execute("SELECT date_activit√©, lieu, dur√©e, rpe, √©quipement, muscle_travaill√©, r√©p√©titions, s√©rie, volume FROM Activit√©_musculation WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC", (account_id, p√©riode_str_pour_requete))
            activites = curseur.fetchall()
            headers = ["Date", "Lieu", "Dur√©e", "RPE", "Type", "Muscle", "R√©p", "S√©rie", "Volume"]
            for col_idx, header_text in enumerate(headers):
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=110)
                label.grid(row=0, column=col_idx, padx=5, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)
            if activites:
                for row_idx, activite in enumerate(activites):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 0:
                            data = datetime.strptime(str(data), '%Y-%m-%d').strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=100)
                        label.grid(row=row_idx + 1, column=col_idx, padx=5, pady=15, sticky="ew")
            else:
                pas_donnees = ctk.CTkLabel(master=tableau_frame, text="Aucune activit√© enregistr√©e pour cette p√©riode.", font=(font_principale, taille1))
                pas_donnees.grid(row=1, column=0, columnspan=len(headers), pady=20)

        except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de la r√©cup√©ration de votre historique", 
                icon="cancel"
                )
        except Exception as e:
            CTkMessagebox(
                title="Erreur", 
                message="Une erreur inattendu s'est produite, veuillez r√©essayer.", 
                icon="cancel"
                )
    combo_periode.configure(command=mettre_a_jour_historique)
    combo_periode.set("1 semaine")
    mettre_a_jour_historique("1 semaine")

def accueil(account_id, username, password):
    cadre_accueil = ctk.CTkFrame(master=app, fg_color=couleur_fond) 
    cadre_accueil.pack(fill="both", expand=True)

    boite1 = ctk.CTkFrame(master=cadre_accueil, fg_color=couleur2, corner_radius=corner3)
    boite1.pack(side="left", fill="y")
    sidebar = ctk.CTkFrame(master=boite1, fg_color=couleur2, corner_radius=corner3)
    sidebar.pack(fill="both", expand=True)
    titre_sidebar = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    titre_sidebar.pack(pady=20)
    element_nav = ctk.CTkFrame(master=sidebar, fg_color=couleur2)
    element_nav.pack(pady=(50, 10), fill="y", expand=True)

    boite2 = ctk.CTkFrame(master=cadre_accueil, fg_color="transparent", corner_radius=corner3)
    boite2.pack(side="top", fill="x", pady=20)
    topbar = ctk.CTkFrame(master=boite2, fg_color="transparent", corner_radius=corner3)
    topbar.pack(anchor="center")
    element_topbar = ctk.CTkFrame(master=topbar, fg_color="transparent")
    element_topbar.pack()

    boite_semi_header = ctk.CTkFrame(master=cadre_accueil, fg_color="transparent")
    boite_semi_header.pack(side="top", pady=10)

    boite3 = ctk.CTkFrame(master=cadre_accueil, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)

    titre_dans_sidebar = ctk.CTkLabel(master=titre_sidebar, text="Sprintia", font=(font_secondaire, taille1), text_color=couleur1)
    titre_dans_sidebar.pack()
    button_exercice = ctk.CTkButton(master=element_nav, text="üí™ Exercice", font=(font_principale, taille3), corner_radius=corner1,
                                    height=button_height, fg_color=couleur1, hover_color=couleur1_hover, width=button_width, anchor="w",
                                    command=lambda: [vider_fenetre(app), accueil(account_id, username, password)])
    button_exercice.pack(side="top", padx=(10, 40), pady=2)
    button_performance = ctk.CTkButton(master=element_nav, text="üöÄ Performance",  font=(font_principale, taille3), corner_radius=corner1,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height, width=button_width,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), performance(account_id, username, password)])
    button_performance.pack(side="top", padx=(10, 40), pady=2)
    button_outils = ctk.CTkButton(master=element_nav, text="üîß Outil", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), predicteur_temps(account_id, username, password)])
    button_outils.pack(side="top", padx=(10, 40), pady=2)
    button_autre = ctk.CTkButton(master=element_nav, text="‚öôÔ∏è Param√®tres", font=(font_principale, taille3), corner_radius=corner1, width=button_width,
                                    fg_color="transparent", hover_color=couleur2_hover, text_color=couleur1, height=button_height,
                                    anchor="w",
                                    command=lambda: [vider_fenetre(app), parametre(account_id, username, password)])
    button_autre.pack(side="top", padx=(10, 40), pady=2)

    button_supprimer = ctk.CTkButton(master=element_topbar, text="üóëÔ∏è Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=lambda: supprimer_activit√©(account_id, username, password, avoir_periode(combo_periode.get(), options_periode)))
    button_supprimer.pack(side="right", padx=2, pady=5)
    button_creer_activite = ctk.CTkButton(master=element_topbar, text="‚ûï Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=lambda: [vider_fenetre(app), ajouter_activit√©_ext√©rieur(account_id, username, password)])
    button_creer_activite.pack(side="right", padx=(20, 2), pady=5)
    info = ctk.CTkLabel(master=element_topbar, text="Historique d'entra√Ænement", font=(font_secondaire, taille1), text_color=couleur_text)
    info.pack(side="right", padx=20)
    options_periode = {"1 semaine": 7, "1 mois": 30, "3 mois": 90, "6 mois": 180, "1 an": 365, "Tout voir": 9999}
    combo_periode = ctk.CTkComboBox(master=element_topbar, values=list(options_periode.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur2, button_color=couleur2, fg_color=couleur2,
                                    corner_radius=corner2, width=220, dropdown_fg_color=couleur2, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    combo_periode.pack(side="right", padx=(10, 20), pady=5)
    def avoir_periode(selection_text, options_dict):
        jours_a_soustraire = options_dict[selection_text]
        date_debut = date_actuelle - timedelta(days=jours_a_soustraire)
        return date_debut.strftime('%Y-%m-%d')
    
    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Ext√©rieur":
            app.after(0, lambda: [vider_fenetre(app), accueil(account_id, username, password)])
        elif choix == "Int√©rieur":
            app.after(0, lambda: [vider_fenetre(app), accueil_int√©rieur(account_id, username, password)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), accueil_musculation(account_id, username, password)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), accueil_football(account_id, username, password)])

    mode_activit√© = ctk.CTkSegmentedButton(master=boite_semi_header, values=["Ext√©rieur", "Int√©rieur", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Ext√©rieur")

    def mettre_a_jour_historique(selection):
        for widget in tableau_frame.winfo_children():
            widget.destroy()        
        try:
            jours_a_soustraire = options_periode[selection]
            date_debut = date_actuelle - timedelta(days=jours_a_soustraire)
            p√©riode_str_pour_requete = date_debut.strftime('%Y-%m-%d')
            curseur.execute("SELECT sport, date_activit√©, dur√©e, rpe, nom, distance, d√©nivel√© FROM Activit√©_ext√©rieur WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC", (account_id, p√©riode_str_pour_requete))
            activites = curseur.fetchall()
            headers = ["Sport", "Date", "Dur√©e", "RPE", "Nom", "Distance", "D√©nivel√©"]
            for col_idx, header_text in enumerate(headers):
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=15, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)
            if activites:
                for row_idx, activite in enumerate(activites):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            data = datetime.strptime(str(data), '%Y-%m-%d').strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=15, pady=15, sticky="ew")
            else:
                pas_donnees = ctk.CTkLabel(master=tableau_frame, text="Aucune activit√© enregistr√©e pour cette p√©riode.", font=(font_principale, taille1))
                pas_donnees.grid(row=1, column=0, columnspan=len(headers), pady=20)

        except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de la r√©cup√©ration de votre historique", 
                icon="cancel"
                )
        except Exception as e:
            CTkMessagebox(
                title="Erreur", 
                message="Une erreur inattendu s'est produite, veuillez r√©essayer.", 
                icon="cancel"
                )
    combo_periode.configure(command=mettre_a_jour_historique)
    combo_periode.set("1 semaine")
    mettre_a_jour_historique("1 semaine")

def connection():
    cadre_connection = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_connection.pack(fill="both", expand=True)

    boite_g√©ante = ctk.CTkFrame(master=cadre_connection, fg_color="transparent")        
    boite_g√©ante.place(relx=0.5, rely=0.5, anchor=ctk.CENTER)
    boite1 = ctk.CTkFrame(master=boite_g√©ante, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color="transparent")        
    boite1.pack(side="left", pady=10, padx=20, fill="both", expand=True)
    titre = ctk.CTkFrame(master=boite1, fg_color="transparent")        
    titre.pack(pady=(20, 10), padx=20)
    message = ctk.CTkFrame(master=boite1, fg_color="transparent")        
    message.pack(pady=(0, 10), padx=10)
    frame_bouton = ctk.CTkFrame(master=boite1, fg_color="transparent")
    frame_bouton.pack(fill="x", pady=(20, 10), padx=20)
    carte_connexion = ctk.CTkFrame(master=boite1, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(fill="x", pady=(20, 5), padx=20)  
    bouton_action = ctk.CTkFrame(master=boite1, fg_color="transparent")        
    bouton_action.pack(fill="x", pady=5, padx=20)
    boite2 = ctk.CTkFrame(master=boite_g√©ante, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color="transparent")        
    boite2.pack(side="right", pady=10, padx=20, fill="both", expand=True)
    img = ctk.CTkFrame(master=boite2, fg_color="transparent")        
    img.pack(pady=20, padx=20)

    Titre = ctk.CTkLabel(master=titre ,text="Bienvenue sur Sprintia\n", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack()
    messages = ctk.CTkLabel(master=message ,text="Content de te revoir !", font=(font_principale, taille2), text_color=couleur_text)
    messages.pack()

    button_connection = ctk.CTkButton(master=frame_bouton, text="‚úîÔ∏è Connection", fg_color=couleur1, hover_color=couleur1_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), connection()])
    button_connection.pack(expand=True, fill="x", side="left", padx=1)
    button_inscription = ctk.CTkButton(master=frame_bouton, text="Inscription", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                           command=lambda: [vider_fenetre(app), inscription()])
    button_inscription.pack(expand=True, fill="x", side="right", padx=1)

    app.bind('<Return>', lambda event: verifier_identifiants())
    username_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Pseudo", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white")
    username_entry.pack(fill="x", pady=(10, 5), padx=10)
    password_entry = ctk.CTkEntry(master=carte_connexion, placeholder_text="Mot de passe", show="*", border_color=couleur1,fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white")
    password_entry.pack(fill="x", pady=(0, 10), padx=10)

    def verifier_identifiants():
        username = username_entry.get().strip()
        password = password_entry.get().strip()

        if not username or not password:
            CTkMessagebox(
                title="Champs manquants",
                message="Le pseudo et le mot de passe ne peuvent pas √™tre vides",
                icon="cancel"
            )
            return
        hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()
        try:
            curseur.execute("SELECT id, username, password FROM Account WHERE username = ? AND password = ?", (username, hashed_password))
            result = curseur.fetchone()

            if result:
                account_id = result[0]
                app.after(100, lambda: [vider_fenetre(app), accueil(account_id, username, password)])
            else:
                CTkMessagebox(
                    title="Erreur",
                    message="Identifiants incorrects. Veuillez r√©essayer.",
                    icon="cancel"
                )
        except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreur",
                message="Erreur de base de donn√©es lors de la connexion √† votre compte.",
                icon="cancel"
            )
        except Exception as e:
            CTkMessagebox(
                title="Erreur",
                message="Une erreur inattendu s'est produite, veuillez r√©essayer",
                icon="cancel"
            )
    button_valider = ctk.CTkButton(master=bouton_action, text="Se connecter", fg_color=couleur1, hover_color=couleur1_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille2), command=verifier_identifiants)
    button_valider.pack(fill="x", pady=(0, 10))

    mon_image_pil = Image.open(mode_image)
    largeur_img = 300
    hauteur_img = 400
    image_redimensionner = mon_image_pil.resize((largeur_img, hauteur_img), Image.Resampling.LANCZOS)
    CTk_image = ctk.CTkImage(light_image=image_redimensionner, dark_image=image_redimensionner, size=(largeur_img, hauteur_img))
    label_image = ctk.CTkLabel(master=img, image=CTk_image, text="")
    label_image.pack()

def inscription():
    cadre_inscription = ctk.CTkFrame(master=app, fg_color=couleur_fond)        
    cadre_inscription.pack(fill="both", expand=True)

    boite_g√©ante = ctk.CTkFrame(master=cadre_inscription, fg_color="transparent")        
    boite_g√©ante.place(relx=0.5, rely=0.5, anchor=ctk.CENTER)
    boite1 = ctk.CTkFrame(master=boite_g√©ante, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color="transparent")        
    boite1.pack(side="left", pady=10, padx=20, fill="both", expand=True)
    titre = ctk.CTkFrame(master=boite1, fg_color="transparent")        
    titre.pack(pady=(20, 10), padx=20)
    message = ctk.CTkFrame(master=boite1, fg_color="transparent")        
    message.pack(pady=(0, 10), padx=10)
    frame_bouton = ctk.CTkFrame(master=boite1, fg_color="transparent")
    frame_bouton.pack(fill="x", pady=(20, 10), padx=20)
    carte_inscription = ctk.CTkFrame(master=boite1, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_inscription.pack(fill="x", pady=(20, 5), padx=20)  
    bouton_action = ctk.CTkFrame(master=boite1, fg_color="transparent")        
    bouton_action.pack(fill="x", pady=5, padx=20)
    boite2 = ctk.CTkFrame(master=boite_g√©ante, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color="transparent")        
    boite2.pack(side="right", pady=10, padx=20, fill="both", expand=True)
    img = ctk.CTkFrame(master=boite2, fg_color="transparent")        
    img.pack(fill="both", expand=True, padx=20, pady=50)

    Titre = ctk.CTkLabel(master=titre ,text="Bienvenue sur Sprintia\n", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack()
    message = ctk.CTkLabel(master=message ,text="Pr√™t √† atteindre tes objectifs sportifs ? Tu es au bon endroit !", font=(font_principale, taille2), 
                           text_color=couleur_text, wraplength=400)
    message.pack()

    button_connection = ctk.CTkButton(master=frame_bouton, text="Connection", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                           command=lambda: [vider_fenetre(app), connection()])
    button_connection.pack(expand=True, fill="x", side="left", padx=1)
    button_inscription = ctk.CTkButton(master=frame_bouton, text="‚úîÔ∏è  Inscription", fg_color=couleur1, hover_color=couleur1_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), inscription()])
    button_inscription.pack(expand=True, fill="x", side="right", padx=1)

    app.bind('<Return>', lambda event: verifier_identifiants_connexion())
    username_entry = ctk.CTkEntry(master=carte_inscription, placeholder_text="Pseudo", border_color=couleur1,fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white")
    username_entry.pack(fill="x", pady=(10, 5), padx=10)
    password_entry = ctk.CTkEntry(master=carte_inscription, placeholder_text="Mot de passe", show="*", border_color=couleur1,fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white")
    password_entry.pack(fill="x", pady=(0, 5), padx=10)
    password_confirm= ctk.CTkEntry(master=carte_inscription, placeholder_text="Confirmer mot de passe", show="*", border_color=couleur1,
                                   fg_color=couleur1, height=entry_height, font=(font_principale, taille3), corner_radius=corner1, 
                                   placeholder_text_color ="white", text_color="white")
    password_confirm.pack(fill="x", pady=(0, 10), padx=10)
    
    def verifier_identifiants_connexion():
        username = username_entry.get().strip()
        password = password_entry.get().strip()
        password_confirmation = password_confirm.get().strip()
        password_encode = password.encode("UTF-8")

        try:
            if not username_entry or not password_entry:
                CTkMessagebox(
                    title="Champs manquants",
                    message="Le pseudo et le mot de passe ne peuvent pas √™tre vides",
                    icon="cancel"
                )
                return
                    
            if password != password_confirmation:
                CTkMessagebox(
                    title="Erreur",
                    message="Les mots de passe ne correspondent pas",
                    icon="cancel"
                )
                return
            if (password_valide(password)):
                sha256 = hashlib.sha256()
                sha256.update(password_encode)
                hashed_password = sha256.hexdigest()
                curseur.execute("INSERT INTO Account (username, password) VALUES (?, ?)", (username, hashed_password))
                con.commit()
                account_id = curseur.lastrowid
                CTkMessagebox(
                    title="Inscription r√©ussie",
                    message=f"Bienvenue {username} !",
                    icon="check"
                )
                app.after(1500, lambda: [vider_fenetre(app), accueil(account_id, username, password)])

        except sqlite3.IntegrityError as e:
            CTkMessagebox(
                title="Erreur base de donn√©es",
                message="Ce pseudo est d√©j√† utilis√©. Veuillez en utiliser un autre.",
                icon="cancel"
            )
        except sqlite3.Error as e:
            CTkMessagebox(
                title="Erreurs",
                message="Erreur de base de donn√©es lors de l'inscription.",
                icon="cancel"
            )
        except Exception as e:
            CTkMessagebox(
                title="Erreur",
                message="Une erreur inattendu s'est produite, veuillez r√©essayer",
                icon="cancel"
            )
    button_valider = ctk.CTkButton(master=bouton_action, text="S'incrire", fg_color=couleur1, hover_color=couleur1_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille2), command=verifier_identifiants_connexion)
    button_valider.pack(fill="x", pady=(0, 10))

    mon_image_pil = Image.open(mode_image)
    largeur_img = 300
    hauteur_img = 400
    image_redimensionner = mon_image_pil.resize((largeur_img, hauteur_img), Image.Resampling.LANCZOS)
    CTk_image = ctk.CTkImage(light_image=image_redimensionner, dark_image=image_redimensionner, size=(largeur_img, hauteur_img))
    label_image = ctk.CTkLabel(master=img, image=CTk_image, text="")
    label_image.pack()

def mettre_√†_jour_bdd():
    try:
        curseur.execute("ALTER TABLE Comp√©tition ADD COLUMN lieu TEXT")
    except sqlite3.OperationalError:
        pass  
    try:
        curseur.execute("ALTER TABLE Objectif ADD COLUMN niveau_fin TEXT")
    except sqlite3.OperationalError:
        pass  
    try:
        curseur.execute("ALTER TABLE Comp√©tition ADD COLUMN priorit√© TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Account ADD COLUMN sport TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Account ADD COLUMN bio TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√© ADD COLUMN muscle_travaill√© TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√© ADD COLUMN r√©p√©titions TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√© ADD COLUMN s√©rie TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√© ADD COLUMN volume TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√© ADD COLUMN √©quipement TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√© ADD COLUMN lieu TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√© ADD COLUMN humeur TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√© ADD COLUMN but TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√© ADD COLUMN passe_d√©cisive TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√© ADD COLUMN type_de_s√©ances TEXT")
    except sqlite3.OperationalError:
        pass
    try:
        curseur.execute("ALTER TABLE Activit√© DROP COLUMN allure")
    except sqlite3.Error as e:
        pass
    try:
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_ext√©rieur (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,distance NUMERIC,muscle_travaill√© TEXT, r√©p√©titions TEXT, s√©rie TEXT, volume NUMERIC, √©quipement TEXT, lieu  TEXT,d√©nivel√© INTEGER,rpe INTEGER,fatigue INTEGER,douleur INTEGER,climat INTEGER,charge INTEGER,nom TEXT,humeur TEXT, but TEXT, passe_d√©cisive TEXT, type_de_s√©ances TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_int√©rieur (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,distance NUMERIC,muscle_travaill√© TEXT, r√©p√©titions TEXT, s√©rie TEXT, volume NUMERIC, √©quipement TEXT, lieu  TEXT,d√©nivel√© INTEGER,rpe INTEGER,fatigue INTEGER,douleur INTEGER,climat INTEGER,charge INTEGER,nom TEXT,humeur TEXT, but TEXT, passe_d√©cisive TEXT, type_de_s√©ances TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_musculation (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,distance NUMERIC,muscle_travaill√© TEXT, r√©p√©titions TEXT, s√©rie TEXT, volume NUMERIC, √©quipement TEXT, lieu  TEXT,d√©nivel√© INTEGER,rpe INTEGER,fatigue INTEGER,douleur INTEGER,climat INTEGER,charge INTEGER,nom TEXT,humeur TEXT, but TEXT, passe_d√©cisive TEXT, type_de_s√©ances TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_football (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,distance NUMERIC,muscle_travaill√© TEXT, r√©p√©titions TEXT, s√©rie TEXT, volume NUMERIC, √©quipement TEXT, lieu  TEXT,d√©nivel√© INTEGER,rpe INTEGER,fatigue INTEGER,douleur INTEGER,climat INTEGER,charge INTEGER,nom TEXT,humeur TEXT, but TEXT, passe_d√©cisive TEXT, type_de_s√©ances TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
    except sqlite3.Error as e:
        pass
    connection()

if __name__ == "__main__":
    try:
        con = sqlite3.connect("data_base.db")
        curseur = con.cursor()

        curseur.execute('''CREATE TABLE IF NOT EXISTS Account (id INTEGER PRIMARY KEY AUTOINCREMENT,username TEXT UNIQUE NOT NULL,password TEXT NOT NULL, sport TEXT, bio TEXT)''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√© (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,distance NUMERIC,muscle_travaill√© TEXT, r√©p√©titions TEXT, s√©rie TEXT, volume NUMERIC, √©quipement TEXT, lieu  TEXT,d√©nivel√© INTEGER,rpe INTEGER,fatigue INTEGER,douleur INTEGER,climat INTEGER,charge INTEGER,nom TEXT,humeur TEXT, but TEXT, passe_d√©cisive TEXT, type_de_s√©ances TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_ext√©rieur (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,distance NUMERIC,muscle_travaill√© TEXT, r√©p√©titions TEXT, s√©rie TEXT, volume NUMERIC, √©quipement TEXT, lieu  TEXT,d√©nivel√© INTEGER,rpe INTEGER,fatigue INTEGER,douleur INTEGER,climat INTEGER,charge INTEGER,nom TEXT,humeur TEXT, but TEXT, passe_d√©cisive TEXT, type_de_s√©ances TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_int√©rieur (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,distance NUMERIC,muscle_travaill√© TEXT, r√©p√©titions TEXT, s√©rie TEXT, volume NUMERIC, √©quipement TEXT, lieu  TEXT,d√©nivel√© INTEGER,rpe INTEGER,fatigue INTEGER,douleur INTEGER,climat INTEGER,charge INTEGER,nom TEXT,humeur TEXT, but TEXT, passe_d√©cisive TEXT, type_de_s√©ances TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_musculation (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,distance NUMERIC,muscle_travaill√© TEXT, r√©p√©titions TEXT, s√©rie TEXT, volume NUMERIC, √©quipement TEXT, lieu  TEXT,d√©nivel√© INTEGER,rpe INTEGER,fatigue INTEGER,douleur INTEGER,climat INTEGER,charge INTEGER,nom TEXT,humeur TEXT, but TEXT, passe_d√©cisive TEXT, type_de_s√©ances TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Activit√©_football (id_activit√© INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER,date_activit√© TEXT,sport TEXT,dur√©e INTEGER,distance NUMERIC,muscle_travaill√© TEXT, r√©p√©titions TEXT, s√©rie TEXT, volume NUMERIC, √©quipement TEXT, lieu  TEXT,d√©nivel√© INTEGER,rpe INTEGER,fatigue INTEGER,douleur INTEGER,climat INTEGER,charge INTEGER,nom TEXT,humeur TEXT, but TEXT, passe_d√©cisive TEXT, type_de_s√©ances TEXT,FOREIGN KEY (account_id)REFERENCES Account (id) );''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Comp√©tition (id INTEGER PRIMARY KEY AUTOINCREMENT,nom TEXT NOT NULL,date TEXT NOT NULL,sport TEXT NOT NULL,objectif TEXT NOT NULL, lieu TEXT,priorit√© TEXT,account_id INTEGER,FOREIGN KEY (account_id) REFERENCES Account(id))''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Objectif (id INTEGER PRIMARY KEY AUTOINCREMENT,sport TEXT NOT NULL,date TEXT NOT NULL,objectif TEXT NOT NULL,fr√©quence TEXT NOT NULL,niveau_d√©but TEXT NOT NULL,niveau_fin TEXT,statut TEXT, account_id INTEGER,FOREIGN KEY (account_id) REFERENCES Account(id))''')
        curseur.execute('''CREATE TABLE IF NOT EXISTS Pauses (id INTEGER PRIMARY KEY AUTOINCREMENT,account_id INTEGER NOT NULL,type TEXT CHECK(type IN ('vacances', 'blessure')),date_debut TEXT DEFAULT CURRENT_DATE,date_fin TEXT,FOREIGN KEY (account_id) REFERENCES Account(id)  )''')
        con.commit()
        ctk.set_appearance_mode("System")
        app = ctk.CTk()
        app.geometry("1050x600")
        app.title("Sprintia")
        mettre_√†_jour_bdd()
        app.protocol("WM_DELETE_WINDOW", fermer_app)
        app.bind("<Control-w>", lambda event: fermer_app())
        app.mainloop()
    except sqlite3.Error as e:
        CTkMessagebox(
            title="Erreur",
            message="Erreur de base de donn√©es lors de la connexion √† la base de donn√©es",
            icon= "cancel"
        )
        con.close()
    except Exception as e:
        CTkMessagebox(
            title="Erreur inattendu",
            message="Une erreur inattendu s'est produite, veuillez r√©essayer",
            icon="cancel"
        )
    con.close()
