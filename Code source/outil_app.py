from app_ressource import * 
from update_database import con, curseur

def proteine_quotidienne(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_outil(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(app ,text="Prot√©ine quotidienne", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=10, pady=10)

    boite1 = ctk.CTkFrame(app, fg_color="transparent")
    boite1.pack(side="top", pady=(5, 0), padx=10)
    carte_connexion = ctk.CTkFrame(boite1, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(side="left", expand=True, fill="both", pady=(10, 0), padx=(10, 5)) 

    # On retire le raccourci 'Entr√©e' pour √©viter une erreur
    app.unbind('<Return>')
    app.bind('<Return>', lambda event: calcul_nb_proteine())

    poid_entry = ctk.CTkEntry(carte_connexion, placeholder_text="Poids (kg)", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=280)
    poid_entry.pack(expand=True, fill="both", pady=(12, 2), padx=12)
    niveau_activite_genre_entry = ctk.CTkComboBox(carte_connexion, 
                                    values=["S√©dentaire", "Activit√© physique l√©g√®re", "Sportif d'endurance", "Sportif de Musculation (maintien de la masse)", "Sportif en prise de masse"], 
                                    font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=280, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    niveau_activite_genre_entry.pack(expand=True, fill="both", pady=2, padx=12)
    niveau_activite_genre_entry.set("Niveau d'activit√©")

    cadre_result = ctk.CTkFrame(boite1, corner_radius=corner1, fg_color=couleur2, border_width=border1, border_color=couleur1)
    cadre_result.pack(side="left", expand=True, fill="both", pady=(10, 0), padx=(5, 10))
    frame_result = ctk.CTkFrame(cadre_result, fg_color=couleur2, corner_radius=corner1)
    frame_result.pack(side="top", expand=True, fill="both", pady=12, padx=12)

    c_quoi_les_proteines_quotidienne = "C'est quoi l'outil Prot√©ine quotidienne ?\n\nL‚Äôoutil Prot√©ine quotidienne t‚Äôindique la quantit√© optimale de prot√©ines √† consommer chaque jour"\
                        " (en g), en fonction de ton poids et de ton niveau d‚Äôactivit√©. Il t‚Äôaide √† adapter ton alimentation pour pr√©server ta masse musculaire,"\
                        " am√©liorer ta r√©cup√©ration et soutenir le bon fonctionnement de ton organisme." 
    result = ctk.CTkLabel(frame_result, 
                            text=f"{c_quoi_les_proteines_quotidienne}",
                            font=(font_principale, taille2), text_color=couleur1, wraplength=600, justify="left", anchor="w")
    result.pack(expand=True, fill="both", padx=15, pady=5)

    def calcul_nb_proteine():
        poids_entry = poid_entry.get().strip().replace(',', '.').replace(' ', '').replace('_', '').replace('kg', '').replace('KG', '')
        if not poids_entry:
            messagebox.showerror("Champs vide", "Le poids est obligatoire, il ne doit pas √™tre vide !")
            return
        try:
            poid = float(poids_entry)
            if poid <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur de conversion", "Le poids doit √™tre un nombre sup√©rieur √† 0 !")
            return
        niveau_activite_genre = niveau_activite_genre_entry.get().strip()
        if niveau_activite_genre == "Niveau d'activit√©":
            messagebox.showerror("Champs vide", "Le niveau d'activit√© est obligatoire, il ne doit pas √™tre vide !")
            return
        if niveau_activite_genre == "S√©dentaire":
            coefficient = 0.83
        elif niveau_activite_genre == "Activit√© physique l√©g√®re":
            coefficient = 1.0
        elif niveau_activite_genre == "Sportif d'endurance":
            coefficient = 1.4
        elif niveau_activite_genre == "Sportif de Musculation (maintien de la masse)":
            coefficient = 1.7
        else:
            coefficient = 2.0

        result_nb_proteine = poid*coefficient

        if niveau_activite_genre == "S√©dentaire":
            interpr√©tation = f"Prot√©ine quotidienne recommand√©e : {result_nb_proteine:.0f} g/jour\n\nCette quantit√© de prot√©ine par jour permettera √† ton corps de bien fonctionner, sans effort physique intense."
        elif niveau_activite_genre == "Activit√© physique l√©g√®re":
            interpr√©tation = f"Prot√©ine quotidienne recommand√©e : {result_nb_proteine:.0f} g/jour\n\nCette quantit√© de prot√©ine par jour te permettera de maintenir ta masse musculaire avec ton activit√© quotidienne mod√©r√©e."
        elif niveau_activite_genre == "Sportif d'endurance":
            interpr√©tation = f"Prot√©ine quotidienne recommand√©e : {result_nb_proteine:.0f} g/jour\n\nCette quantit√© de prot√©ine par jour te permettera de soutenir la r√©paration et le renouvellement de tes muscles apr√®s l'entra√Ænement."
        elif niveau_activite_genre == "Sportif de Musculation (maintien de la masse)":
            interpr√©tation = f"Prot√©ine quotidienne recommand√©e : {result_nb_proteine:.0f} g/jour\n\nCette quantit√© de prot√©ine par jour te permettera de maintenir ta masse musculaire et optimiser ta r√©cup√©ration."
        else:
            interpr√©tation = f"Prot√©ine quotidienne recommand√©e : {result_nb_proteine:.0f} g/jour\n\nCette quantit√© de prot√©ine par jour te permettera de maximiser la construction de tes muscles et atteindre ton objectif de volume."

        result.configure(text=interpr√©tation)

    frame2 = ctk.CTkFrame(carte_connexion, fg_color="transparent")
    frame2.pack(expand=True, fill="both", pady=(2, 12), padx=12)
    button_check = ctk.CTkButton(frame2, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: calcul_nb_proteine())
    button_check.pack(expand=True, fill="both", side="left", padx=(0, 2))
    button_back = ctk.CTkButton(frame2, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), outils(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(expand=True, fill="both", side="left")

def calculateur_imc(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_outil(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(app ,text="Calculateur IMC", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=10, pady=10)

    boite1 = ctk.CTkFrame(app, fg_color="transparent")
    boite1.pack(side="top", pady=(5, 0), padx=10)
    carte_connexion = ctk.CTkFrame(boite1, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(side="left", expand=True, fill="both", pady=(10, 0), padx=(10, 5)) 

    # On retire le raccourci 'Entr√©e' pour √©viter une erreur
    app.unbind('<Return>')
    app.bind('<Return>', lambda event: calcul_imc())

    poids_entry = ctk.CTkEntry(carte_connexion, placeholder_text="Poids (kg)", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=280)
    poids_entry.pack(expand=True, fill="both", pady=(12, 2), padx=12)
    taille_entry = ctk.CTkEntry(carte_connexion, placeholder_text="Taille (cm)", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=280)
    taille_entry.pack(expand=True, fill="both", pady=2, padx=12)

    cadre_result = ctk.CTkFrame(boite1, corner_radius=corner1, fg_color=couleur2, border_width=border1, border_color=couleur1)
    cadre_result.pack(side="left", expand=True, fill="both", pady=(10, 0), padx=(5, 10))
    frame_result = ctk.CTkFrame(cadre_result, fg_color=couleur2, corner_radius=corner1)
    frame_result.pack(side="top", expand=True, fill="both", pady=12, padx=12)

    c_quoi_le_calculateur_imc = "C'est quoi le calculateur d'IMC ?\n\nLe calculateur d‚ÄôIMC (Indice de Masse Corporelle) a pour objectif de te donner une estimation rapide de ta" \
                                " corpulence, en te situant dans des cat√©gories comme 'maigreur', 'surpoids',... Les cat√©gories peuvent √™tre un peu difficiles √† comprendre," \
                                " mais Sprintia te donne une interpr√©tation qui rend les cat√©gories plus simples √† comprendre."
    result = ctk.CTkLabel(frame_result, 
                            text=f"{c_quoi_le_calculateur_imc}",
                            font=(font_principale, taille2), text_color=couleur1, wraplength=600, justify="left", anchor="w")
    result.pack(expand=True, fill="both", padx=15, pady=5)

    def calcul_imc():
        poids_avnt_conversion = poids_entry.get().strip().replace(',', '.').replace(' ', '').replace('_', '').replace('kg', '').replace('KG', '')
        taille_conversion_avt_conversion = taille_entry.get().strip().replace(',', '.').replace(' ', '').replace('_', '').replace('cm', '').replace('CM', '')
        if not poids_avnt_conversion:
            messagebox.showerror("Champs vide", "Le poids est obligatoire, il ne doit pas √™tre vide !")
            return
        try:
            poids = float(poids_avnt_conversion)
            if poids <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur de conversion", "Le poids doit √™tre un nombre sup√©rieur √† 0 !")
            return
        if not taille_conversion_avt_conversion:
            messagebox.showerror("Champs vide", "La taille est obligatoire, il ne doit pas √™tre vide !")
            return
        try:
            taille_conversion = float(taille_conversion_avt_conversion)
            if taille_conversion <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur de conversion", "La taille doit √™tre un nombre sup√©rieur √† 0 !")
            return
        
        taille = taille_conversion/100
        imc = poids / (taille ** 2)

        if imc <= 18.5:
            interpr√©tation = "Ton IMC se situe dans la zone de maigreur. Cela peut correspondre √† ta morphologie naturelle, mais si tu ressens de la fatigue ou des inqui√©tudes, un avis m√©dical peut √™tre utile pour v√©rifier ton √©tat de sant√© global."
        elif 18.5 <= imc <= 24.999:
            interpr√©tation = "Super, ton IMC est dans la zone de corpulence normale ! C‚Äôest un bon indicateur, mais n‚Äôoublie pas que la sant√© d√©pend aussi d‚Äôautres facteurs comme l‚Äô√©quilibre alimentaire, l‚Äôactivit√© physique et le bien-√™tre g√©n√©ral."
        elif 25 <= imc <= 29.999:
            interpr√©tation = "Ton IMC est dans la zone de surpoids. Cela peut √™tre li√© √† diff√©rents facteurs (morphologie, mode de vie, g√©n√©tique, etc.). Si tu le souhaites, un professionnel peut t‚Äôaider √† faire le point sur tes habitudes."
        elif 30 <= imc <= 34.999:
            interpr√©tation = "Ton IMC indique une ob√©sit√© mod√©r√©e. Cela ne d√©finit pas ta sant√© √† lui seul, mais un accompagnement personnalis√© (m√©decin, nutritionniste) peut t‚Äôaider √† trouver un √©quilibre adapt√© √† tes besoins."
        elif 35 <= imc <= 39.999:
            interpr√©tation = "Ton IMC est dans la zone d‚Äôob√©sit√© s√©v√®re. Pour aborder cela de mani√®re globale, un suivi m√©dical ou nutritionnel peut te soutenir dans une d√©marche adapt√©e et bienveillante."
        elif imc >= 40:
            interpr√©tation = "Ton IMC se situe dans la zone d‚Äôob√©sit√© de grade 3. C‚Äôest une situation o√π un suivi m√©dical r√©gulier est important pour ta sant√©. N‚Äôh√©site pas √† en parler √† un professionnel."
        else:
            interpr√©tation = "Une erreur est survenue, r√©esaye plus tard."
                    
        result.configure(text=f"Ton IMC est : {imc:.2f} kg/m¬≤\n\n{interpr√©tation}")
    
    frame2 = ctk.CTkFrame(carte_connexion, fg_color="transparent")
    frame2.pack(expand=True, fill="both", pady=(2, 12), padx=12)
    button_check = ctk.CTkButton(frame2, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: calcul_imc())
    button_check.pack(expand=True, fill="both", side="left", padx=(0, 2))
    button_back = ctk.CTkButton(frame2, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), outils(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(expand=True, fill="both", side="left")

def estimation_VO2MAX(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_outil(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)
    option_genre = ["Homme", "Femme"]

    Titre = ctk.CTkLabel(app ,text="Estimation VO2max", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=10, pady=10)

    boite1 = ctk.CTkFrame(app, fg_color="transparent")
    boite1.pack(side="top", pady=(5, 0), padx=10)
    carte_connexion = ctk.CTkFrame(boite1, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(side="left", expand=True, fill="both", pady=(10, 0), padx=(10, 5)) 

    # On retire le raccourci 'Entr√©e' pour √©viter une erreur
    app.unbind('<Return>')
    app.bind('<Return>', lambda event: calcul_VO2MAX())

    vma_entry = ctk.CTkEntry(carte_connexion, placeholder_text="VMA", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=280)
    vma_entry.pack(expand=True, fill="both", pady=(12, 2), padx=12)

    combo_genre = ctk.CTkComboBox(carte_connexion, values=option_genre, font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=280, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    combo_genre.pack(expand=True, fill="both", pady=2, padx=12)
    combo_genre.set("Genre")
    age_entry = ctk.CTkEntry(carte_connexion, placeholder_text="√Çge", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=280)
    age_entry.pack(expand=True, fill="both", pady=2, padx=12)

    cadre_result = ctk.CTkFrame(boite1, corner_radius=corner1, fg_color=couleur2, border_width=border1, border_color=couleur1)
    cadre_result.pack(side="left", expand=True, fill="both", pady=(10, 0), padx=(5, 10))
    frame_result = ctk.CTkFrame(cadre_result, fg_color=couleur2, corner_radius=corner1)
    frame_result.pack(side="top", expand=True, fill="both", pady=12, padx=12)

    c_quoi_le_predicteur_performance = "C'est quoi l'estimation VO2max ?\n\nLe VO2max repr√©sente le volume maximal d‚Äôoxyg√®ne que ton corps peut utiliser pendant un effort intense." \
                                        " L'estimation VO2max te permet de te donner une estimation de ton VO2max gr√¢ce √† ta VMA." \
                                        " Mais, il va encore plus loin en te donnant une zone/cat√©gorie et une interpr√©tation en fonction de ton genre et de ton √¢ge."
    result = ctk.CTkLabel(frame_result, 
                            text=f"{c_quoi_le_predicteur_performance}",
                            font=(font_principale, taille2), text_color=couleur1, wraplength=600, justify="left", anchor="w")
    result.pack(expand=True, fill="both", padx=15, pady=5)

    def calcul_VO2MAX():
        vma_avt_conversion = vma_entry.get().strip().replace(',', '.').replace(' ', '').replace('_', '').replace('vma', '').replace('VMA', '')
        genre = combo_genre.get().strip()
        age_avt_conversion = age_entry.get().strip().replace("√¢ge", "").replace("√ÇGE", "").replace("age", "").replace("AGE", "").replace(" ", "")
        if not vma_avt_conversion:
            messagebox.showerror("Champs vide", "La VMA est obligatoire, il ne doit pas √™tre vide !")
            return
        if genre == "Genre":
            messagebox.showerror("Champs vide", "Le genre est obligatoire, il ne doit pas √™tre vide !")
            return
        if not genre in option_genre:
            messagebox.showerror("Erreur", "Le genre n'est pas reconnu, s√©l√©ctionne une option valide !")
            return
        if not age_avt_conversion:
            messagebox.showerror("Champs vide", "L'√¢ge est obligatoire, il ne doit pas √™tre vide !")
            return
        try:
            vma = float(vma_avt_conversion)
            if vma <= 0:
                raise ValueError
        except ValueError:    
            messagebox.showerror("Erreur de conversion", "La VMA doit √™tre un nombre sup√©rieur √† 0 !")
            return
        try:
            age = int(age_avt_conversion)
            if age < 14:
                messagebox.showerror("Erreur", "Tu dois avoir 14 ans pour pouvoir utiliser cette fonctionnalit√© !")
                return
        except ValueError:  
            messagebox.showerror("Erreur de conversion", "L'√¢ge doit √™tre un nombre entier !")
            return
      
        vo2max = vma*3.5
        if genre == "Homme":
            if 14 <= age <= 17 :
                if vo2max >= 58:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 54 <= vo2max <= 58:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 50 <= vo2max <= 53:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 46 <= vo2max <= 49:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
            if 18 <= age <= 25 :
                if vo2max >= 56:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 52 <= vo2max <= 56:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 48 <= vo2max <= 51:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 44 <= vo2max <= 47:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
            if 26 <= age <= 35 :
                if vo2max >= 51:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 47 <= vo2max <= 51:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 43 <= vo2max <= 46:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 39 <= vo2max <= 42:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
            if 36 <= age <= 45 :
                if vo2max >= 45:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 41 <= vo2max <= 45:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 37 <= vo2max <= 40:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 33 <= vo2max <= 36:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
            if 46 <= age <= 55 :
                if vo2max >= 41:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 37 <= vo2max <= 41:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 33 <= vo2max <= 36:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 29 <= vo2max <= 32:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
            if 56 <= age <= 65 :
                if vo2max >= 37:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 33 <= vo2max <= 37:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 29 <= vo2max <= 32:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 25 <= vo2max <= 28:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
            if age >= 65 :
                if vo2max >= 33:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 29 <= vo2max <= 33:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 25 <= vo2max <= 28:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 21 <= vo2max <= 24:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
        elif genre == "Femme":
            if 14 <= age <= 17 :
                if vo2max >= 52:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 48 <= vo2max <= 52:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 44 <= vo2max <= 47:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 40 <= vo2max <= 43:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
            if 18 <= age <= 25 :
                if vo2max >= 48:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 44 <= vo2max <= 48:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 40 <= vo2max <= 43:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 36 <= vo2max <= 39:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
            if 26 <= age <= 35 :
                if vo2max >= 42:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 38 <= vo2max <= 42:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 34 <= vo2max <= 37:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 30 <= vo2max <= 33:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
            if 36 <= age <= 45 :
                if vo2max >= 37:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 33 <= vo2max <= 37:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 29 <= vo2max <= 32:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 25 <= vo2max <= 28:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
            if 46 <= age <= 55 :
                if vo2max >= 34:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 30 <= vo2max <= 34:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 26 <= vo2max <= 29:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 22 <= vo2max <= 25:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
            if 56 <= age <= 65 :
                if vo2max >= 30:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 26 <= vo2max <= 30:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 22 <= vo2max <= 25:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 18 <= vo2max <= 21:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
            if age >= 65 :
                if vo2max >= 27:
                    interpr√©tation = "Sup√©rieur, ton VO2max est sup√©rieur √† la moyenne pour ta tranche d'√¢ge, ce qui indique une excellente capacit√© cardiovasculaire."
                elif 23 <= vo2max <= 27:
                    interpr√©tation = "Excellent, tu as une VO2max excellente pour ton √¢ge, signe d'un tr√®s bon niveau de forme physique."
                elif 19 <= vo2max <= 22:
                    interpr√©tation = "Bon, ton VO2max est bonne pour ton √¢ge, t√©moignant d'une condition physique solide."
                elif 15 <= vo2max <= 18:
                    interpr√©tation = "Moyen, ton VO2max se situe dans la moyenne pour ta tranche d'√¢ge. Il y a de la marge pour progresser."
                else:
                    interpr√©tation = "Faible, ton VO2max est faible pour ton √¢ge. Essaye d'√™tre moins s√©dentaire au quotidien."
                
        message_en_plus = "Refais cette estimation tous les 2-3 mois pour voir ta progression."
        result.configure(text=f"VO2max estim√©e : {vo2max:.2f}\n\n{interpr√©tation} {message_en_plus}")
    
    frame2 = ctk.CTkFrame(carte_connexion, fg_color="transparent")
    frame2.pack(expand=True, fill="both", pady=(2, 12), padx=12)
    button_check = ctk.CTkButton(frame2, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: calcul_VO2MAX())
    button_check.pack(expand=True, fill="both", side="left", padx=(0, 2))
    button_back = ctk.CTkButton(frame2, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), outils(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(expand=True, fill="both", side="left")

def estimation_VMA(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_outil(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)
    option_test_vma = ["Test demi-Cooper (6 min) (Recommand√©)", "Test Cooper (12 min)", "Test Luc L√©ger (2 km)", "Course de r√©f√©rence (moins pr√©cise)"]

    Titre = ctk.CTkLabel(app ,text="Estimation VMA", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=10, pady=10)

    boite1 = ctk.CTkFrame(app, fg_color="transparent")
    boite1.pack(side="top", pady=(5, 0), padx=10)
    carte_connexion = ctk.CTkFrame(boite1, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(side="left", expand=True, fill="both", pady=(10, 0), padx=(10, 5)) 
    
    # On retire le raccourci 'Entr√©e' pour √©viter une erreur
    app.unbind('<Return>')
    app.bind('<Return>', lambda event: calcul_VMA())
    
    distance_entry = ctk.CTkEntry(carte_connexion, placeholder_text="Distance (km)", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=280)
    distance_entry.pack_forget()
    temps_entry = ctk.CTkEntry(carte_connexion, placeholder_text="Dur√©e", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=280)
    temps_entry.pack_forget()
    
    def remplissage_placeholder(choice):
        choice = test_sp√©cifique.get()
        # On vide les champs pour les remplir ensuite
        distance_entry.configure(state="normal")
        temps_entry.configure(state="normal")
        distance_entry.delete(0, "end")
        temps_entry.delete(0, "end")

        # On remplit les champs en fonction du test s√©lectionn√©
        if choice == "Test demi-Cooper (6 min) (Recommand√©)":
            temps_entry.insert(0, "6")
            temps_entry.configure(state="disabled")
            distance_entry.configure(placeholder_text="Distance (km)")
        elif choice == "Test Cooper (12 min)":
            temps_entry.insert(0, "12")
            temps_entry.configure(state="disabled")
            distance_entry.configure(placeholder_text="Distance (km)")
        elif choice == "Test Luc L√©ger (2 km)":
            distance_entry.insert(0, "2")
            distance_entry.configure(state="disabled")
            temps_entry.configure(placeholder_text="Temps (min)")
        else:
            temps_entry.configure(placeholder_text="Temps (min)")
            distance_entry.configure(placeholder_text="Distance (km)")

    test_sp√©cifique = ctk.CTkComboBox(carte_connexion, values=option_test_vma,
                                    font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=280, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1, 
                                    command=remplissage_placeholder)
    test_sp√©cifique.pack(expand=True, fill="both", pady=(12, 2), padx=12)
    test_sp√©cifique.set("Test")
    distance_entry.pack(expand=True, fill="both", pady=2, padx=12)
    temps_entry.pack(expand=True, fill="both", pady=2, padx=12)

    cadre_result = ctk.CTkFrame(boite1, corner_radius=corner1, fg_color=couleur2, border_width=border1, border_color=couleur1)
    cadre_result.pack(side="left", expand=True, fill="both", pady=(10, 0), padx=(5, 10))
    frame_result = ctk.CTkFrame(cadre_result, fg_color=couleur2, corner_radius=corner1)
    frame_result.pack(side="top", expand=True, fill="both", pady=12, padx=12)

    tableau_frame = ctk.CTkScrollableFrame(app, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(side="top", fill="both", expand=True, padx=10, pady=(5, 10))

    c_quoi_la_vma = "C'est quoi la VMA ?\n\nLa Vitesse Maximale A√©robie (VMA) est la vitesse de course √† laquelle ton corps atteint sa consommation maximale d'oxyg√®ne (VO2max). " \
                    "Conna√Ætre ta VMA te permet de mieux structurer tes entra√Ænements, " \
                    "d'optimiser tes performances et de pr√©venir les blessures en √©vitant le surentra√Ænement."
    result = ctk.CTkLabel(frame_result, text=f"{c_quoi_la_vma}",
                           font=(font_principale, taille2), text_color=couleur1, wraplength=650, justify="left", anchor="w")
    result.pack(expand=True, fill="both", padx=15, pady=5)

    headers = ["Zone", "Allure", "Objectif", "S√©ances type"]
    contenu_tableau = [
            ["Zone 1", "Aucune donn√©e", "Travail de r√©cup√©ration", "1h √† 70% de VMA"],
            ["Zone 2", "Aucune donn√©e", "Travailler son endurance (endurance fondamental)", "45 min √† 80% de VMA"],
            ["Zone 3", "Aucune donn√©e", "Seuil a√©robie", "4 x 1200m √† 88% avec 2 min de r√©cup"],
            ["Zone 4", "Aucune donn√©e", "Seuil ana√©robie", "10 x 30/30 sec √† 100%"],
            ["Zone 5", "Aucune donn√©e", "Travail de la vitesse pure (sprint)", "15 x 20/40 sec √† 110%"],
        ]
    
    def calcul_VMA():
        type_test_sp√©cifique = test_sp√©cifique.get().strip()
        distance_avt_conversion = distance_entry.get().strip().replace(',', '.').replace(' ', '').replace('_', '').replace('km', '').replace('KM', '')
        if type_test_sp√©cifique == "Test":
            messagebox.showerror("Erreur", "Tu dois s√©lectionner un test !")
            return
        if not type_test_sp√©cifique in option_test_vma:
            messagebox.showerror("Erreur", "Le test de VMA n'est pas reconnu, s√©l√©ctionne une option valide !")
            return
        if not distance_avt_conversion:
            messagebox.showerror("Champs vide", "La distance est obligatoire, elle ne peut pas √™tre vide !")
            return
        try:
            distance = float(distance_avt_conversion)
        except ValueError:
            messagebox.showerror("Erreur", "La distance doit √™tre un nombre (km)")
            return
        try:
            temps_autre = temps_entry.get().strip()
            if not temps_autre:
                messagebox.showerror("Erreur", "Le temps ne peut pas √™tre vide !")
                return
            if ":" in temps_autre:
                if len(temps_autre.split(":")) == 3:
                    heures, minutes, secondes = temps_autre.split(':') # Split d√©coupe le champs temps_autre en deux parties
                    if len(heures) > 2 or len(minutes) > 2 or len(secondes) > 2:
                        messagebox.showerror("Erreur", "Le format du temps doit √™tre hh:mm:ss avec hh, mm et ss avec 2 chiffres maximum")
                        return
                    heure = int(heures)
                    minute = int(minutes)
                    seconde = int(secondes)
                    if heure > 59 or minute > 59 or seconde > 59:
                        messagebox.showerror("Erreur", "Le format du temps doit √™tre hh:mm:ss avec hh, mm et ss inf√©rieur √† 60")
                        return
                    temps = (heure*60) + minute + (seconde/60) # On convertit le temps en minutes
                elif len(temps_autre.split(":")) == 2:
                    minutes, secondes = temps_autre.split(':') # Split d√©coupe le champs temps_autre en deux parties
                    if len(minutes) > 2 or len(secondes) > 2:
                        messagebox.showerror("Erreur", "Le format du temps doit √™tre mm:ss avec mm et ss avec 2 chiffres maximum")
                        return
                    minute = int(minutes)
                    seconde = int(secondes)
                    if minute > 59 or seconde > 59:
                        messagebox.showerror("Erreur", "Le format du temps doit √™tre mm:ss avec mm et ss inf√©rieur √† 60")
                        return
                    temps = minute + (seconde/60) # On convertit le temps en minutes
                else:
                    messagebox.showerror("Erreur", "Le format du temps doit √™tre hh:mm:ss ou mm:ss")
                    return
            else:
                try:
                    temps_conversion = int(temps_autre)
                    temps = temps_conversion
                except ValueError:
                    messagebox.showerror("Erreur", "Le temps doit √™tre un nombre (minutes) ou au format hh:mm:ss ou mm:ss")
                    return
            if distance <= 0 or temps <= 0:
                messagebox.showerror("Erreur", "La distance et le temps doivent √™tre sup√©rieur √† 0 !")
                return
        except ValueError:
            messagebox.showerror("Erreur", "Le temps doit √™tre un nombre (minutes) ou au format hh:mm:ss ou au format mm:ss.")
            return
        if type_test_sp√©cifique == "Test demi-Cooper (6 min) (Recommand√©)":
            if temps != 6:
                messagebox.showerror("Erreur", "Pour le test demi-Cooper, le temps doit √™tre de 6 minutes !")
                return
            distance_en_m√®tre = distance * 1000 
            vma_estim√©e = distance_en_m√®tre / 100
        elif type_test_sp√©cifique == "Test de Cooper (12 min)":
            if temps != 12:
                messagebox.showerror("Erreur", "Pour le test de Cooper, le temps doit √™tre de 12 minutes !")
                return
            distance_en_m√®tre = distance * 1000 
            vma_estim√©e = distance_en_m√®tre / 200
        elif type_test_sp√©cifique == "Test Luc L√©ger (2 km)":
            if distance != 2:
                messagebox.showerror("Erreur", "Pour le test Luc L√©ger, la distance doit √™tre de 2 km !")
                return
            vma_estim√©e = distance / (temps/60)
        else:
            if  3 >= distance >= 42.2 :
                messagebox.showerror("Erreur", "Pour une course de r√©f√©rence, la distance ne doit pas d√©passer 42,20 km !")
                return
            if temps < 12:
                messagebox.showerror("Erreur", "Pour une course de r√©f√©rence, le temps doit √™tre sup√©rieur √† 12 minutes !")
                return
            vitesse_moyenne = distance / (temps / 60) # Vitesse moyenne en km/h
            if 3.0 >= distance >= 3.5:
                coefficient_ajustement = 0.95
            elif 3.5001 >= distance >= 6.0:
                coefficient_ajustement = 0.92
            elif 6.0001 >= distance >= 12.0:
                coefficient_ajustement = 0.89
            elif 12.0001 >= distance >= 22.0:
                coefficient_ajustement = 0.82
            else:
                coefficient_ajustement = 0.77
            vma_estim√©e = vitesse_moyenne / coefficient_ajustement

        debut_zone1 = vma_estim√©e * 0.50
        fin_zone1 = vma_estim√©e * 0.60
        debut_zone2 = vma_estim√©e * 0.60
        fin_zone2 = vma_estim√©e * 0.75
        debut_zone3 = vma_estim√©e * 0.75
        fin_zone3 = vma_estim√©e * 0.85
        debut_zone4 = vma_estim√©e * 0.85
        fin_zone4 = vma_estim√©e * 0.95
        debut_zone5 = vma_estim√©e * 0.95

        servir_de_vma = "La VMA (Vitesse Maximale A√©robie) est un indicateur cl√© pour les coureurs et les sportifs d‚Äôendurance. Elle permet de d√©finir des zones d‚Äôintensit√© pour varier tes entra√Ænements (voir tableau). R√©√©value ta VMA tous les 2-3 mois pour ajuster tes allures d‚Äôentra√Ænement et voir si tu as progress√©."
        result.configure(text=f"VMA estim√©e : {vma_estim√©e:.1f} km/h.\n\n{servir_de_vma}",
                             anchor="w", justify="left", wraplength=620)
        
        contenu_tableau = [
            ["Zone 1", f"{debut_zone1:.1f} - {fin_zone1:.1f} km/h", "Travail de r√©cup√©ration", "1h √† 70% de VMA"],
            ["Zone 2", f"{debut_zone2:.1f} - {fin_zone2:.1f} km/h", "Travailler son endurance (endurance fondamental)", "45 min √† 80% de VMA"],
            ["Zone 3", f"{debut_zone3:.1f} - {fin_zone3:.1f} km/h", "Seuil a√©robie", "4 x 1200m √† 88% avec 2 min de r√©cup"],
            ["Zone 4", f"{debut_zone4:.1f} - {fin_zone4:.1f} km/h", "Seuil ana√©robie", "10 x 30/30 sec √† 100%"],
            ["Zone 5", f"{debut_zone5:.1f} - {vma_estim√©e:.1f} km/h", "Travail de la vitesse pure (sprint)", "15 x 20/40 sec √† 110%"],
        ]

        for widget in tableau_frame.winfo_children():
            widget.destroy()
        for col, header_text in enumerate(headers):
            header_label = ctk.CTkButton(tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                fg_color=couleur_fond, corner_radius=corner2, text_color=couleur1,
                                height=40, border_width=border2, border_color=couleur2, hover_color=couleur_fond)
            header_label.grid(row=0, column=col, padx=10, pady=15)
            tableau_frame.grid_columnconfigure(col, weight=1)
        for row_index, contenu_tableau_text in enumerate(contenu_tableau):
            for col_index, data in enumerate(contenu_tableau_text):
                data_label = ctk.CTkLabel(tableau_frame, text=data, font=(font_principale, taille3),
                                        text_color=couleur_text, wraplength=200)
                data_label.grid(row=row_index+1, column=col_index, padx=15, pady=5)
        return vma_estim√©e

    for col, header_text in enumerate(headers):       
            header_label = ctk.CTkButton(tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                fg_color=couleur_fond, corner_radius=corner2, text_color=couleur1,
                                height=40, border_width=border2, border_color=couleur2, hover_color=couleur_fond)
            header_label.grid(row=0, column=col, padx=10, pady=15)
            tableau_frame.grid_columnconfigure(col, weight=1)

    for row_index, contenu_tableau_text in enumerate(contenu_tableau):
        for col_index, data in enumerate(contenu_tableau_text):
            label = ctk.CTkLabel(tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                text_color=couleur_text, wraplength=200)
            label.grid(row=row_index + 1, column=col_index, padx=15, pady=15, sticky="ew")

    frame2 = ctk.CTkFrame(carte_connexion, fg_color="transparent")
    frame2.pack(expand=True, fill="both", pady=(2, 12), padx=12)
    button_check = ctk.CTkButton(frame2, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: calcul_VMA())
    button_check.pack(expand=True, fill="both", side="left", padx=(0, 2))
    button_back = ctk.CTkButton(frame2, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), outils(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(expand=True, fill="both", side="left")

def zone_cardiaque(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_outil(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(app ,text="Zones cardiaque", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=10, pady=10)

    boite1 = ctk.CTkFrame(app, fg_color="transparent")
    boite1.pack(side="top", pady=(5, 0), padx=10)
    carte_connexion = ctk.CTkFrame(boite1, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(side="left", expand=True, fill="both", pady=(10, 0), padx=(10, 5)) 

    # On retire le raccourci 'Entr√©e' pour √©viter une erreur
    app.unbind('<Return>')
    app.bind('<Return>', lambda event: calcul_zone())

    age_entry = ctk.CTkEntry(carte_connexion, placeholder_text="√Çge", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=280)
    age_entry.pack(expand=True, fill="both", pady=(12, 2), padx=12)

    cadre_result = ctk.CTkFrame(boite1, corner_radius=corner1, fg_color=couleur2, border_width=border1, border_color=couleur1)
    cadre_result.pack(side="left", expand=True, fill="both", pady=(10, 0), padx=(5, 10))
    frame_result = ctk.CTkFrame(cadre_result, fg_color=couleur2, corner_radius=corner1)
    frame_result.pack(side="top", expand=True, fill="both", pady=12, padx=12)

    c_quoi_les_zones_fc = "C'est quoi les Zones de fr√©quence cardiaque ?\n\nLes Zones cardiaque te permet de calculer tes zones de fr√©quence cardiaque" \
                        " en fonction de ton √¢ge, pour optimiser ton entra√Ænement. Les zones de fr√©quence cardiaque servent √† optimiser " \
                        "ton entra√Ænement en fonction de tes objectifs (endurance, perte de poids, performance,...)"
    result = ctk.CTkLabel(frame_result, 
                            text=f"{c_quoi_les_zones_fc}",
                            font=(font_principale, taille2), text_color=couleur1, wraplength=600, justify="left", anchor="w")
    result.pack(expand=True, fill="both", padx=15, pady=5)

    def calcul_zone():
        age_avt_conversion = age_entry.get().strip().replace("√¢ge", "").replace("√ÇGE", "").replace("age", "").replace("AGE", "").replace(" ", "")
        if not age_avt_conversion:
            messagebox.showerror("Champs vide", "L'√¢ge est obligatoire, il ne peut pas √™tre vide !")
            return
        try:
            age = int(age_avt_conversion)
            if age <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur de conversion", "L'√¢ge doit √™tre un nombre entier positif !")
            return
        
        fc_max = 220 - age
        debut_zone1 = fc_max*0.50
        fin_zone1 = fc_max*0.60
        Zone1 = f"Zone 1 : R√©cup√©ration | {debut_zone1:.0f} bpm √† {fin_zone1:.0f} bpm"
        debut_zone2 = fc_max*0.60
        fin_zone2 = fc_max*0.70
        Zone2 = f"Zone 2 : Endurance fondamentale | {debut_zone2:.0f} bpm √† {fin_zone2:.0f} bpm"
        debut_zone3 = fc_max*0.70
        fin_zone3 = fc_max*0.80
        Zone3 = f"Zone 3 : Seuil a√©robie | {debut_zone3:.0f} bpm √† {fin_zone3:.0f} bpm"
        debut_zone4 = fc_max*0.80
        fin_zone4 = fc_max*0.90
        Zone4 = f"Zone 4 :  Seuil ana√©robie | {debut_zone4:.0f} bpm √† {fin_zone4:.0f} bpm"
        debut_zone5 = fc_max*0.90
        Zone5 = f"Zone 5 : Puissance maximale | {debut_zone5:.0f} bpm √† {fc_max:.0f} bpm"
        FC_max = f"\nFr√©quence cardiaque maximum : {fc_max:.0f} bpm"

        result.configure(text=f"Tes Zones de Fr√©quence Cardiaque :\n\n{Zone1}\n{Zone2}\n{Zone3}\n{Zone4}\n{Zone5}\n{FC_max}")
    
    frame2 = ctk.CTkFrame(carte_connexion, fg_color="transparent")
    frame2.pack(expand=True, fill="both", pady=(2, 12), padx=12)
    button_check = ctk.CTkButton(frame2, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: calcul_zone())
    button_check.pack(expand=True, fill="both", side="left", padx=(0, 2))
    button_back = ctk.CTkButton(frame2, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), outils(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(expand=True, fill="both", side="left")

def pr√©dicteur_performance(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_outil(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(app ,text="Pr√©dicteur de performance", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=10, pady=10)

    boite1 = ctk.CTkFrame(app, fg_color="transparent")
    boite1.pack(side="top", pady=(5, 0), padx=10)
    carte_connexion = ctk.CTkFrame(boite1, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)        
    carte_connexion.pack(side="left", expand=True, fill="both", pady=(10, 0), padx=(10, 5)) 

    # On retire le raccourci 'Entr√©e' pour √©viter une erreur
    app.unbind('<Return>')
    app.bind('<Return>', lambda event: calcul_temps())
    vma_entry = ctk.CTkEntry(carte_connexion, placeholder_text="VMA", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=280)
    vma_entry.pack(expand=True, fill="both", pady=(12, 2), padx=12)
    distance_entry = ctk.CTkEntry(carte_connexion, placeholder_text="Distance (km)", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=280)
    distance_entry.pack(expand=True, fill="both", pady=2, padx=12)

    cadre_result = ctk.CTkFrame(boite1, corner_radius=corner1, fg_color=couleur2, border_width=border1, border_color=couleur1)
    cadre_result.pack(side="left", expand=True, fill="both", pady=(10, 0), padx=(5, 10))
    frame_result = ctk.CTkFrame(cadre_result, fg_color=couleur2, corner_radius=corner1)
    frame_result.pack(side="top", expand=True, fill="both", pady=12, padx=12)

    c_quoi_le_predicteur_performance = "C'est quoi le Pr√©dicteur de performance ?\n\nLe Pr√©dicteur de performance te permet d'estimer ton temps de course en fonction de ta VMA et de la distance choisie." \
                                        " C'est un outil pratique pour √©valuer tes performances potentielles avant une course." \
                                        " Mais, n'oublie pas que cette pr√©diction est une estimation bas√©e sur la th√©orie et peut varier en fonction de nombreux facteurs le jour de la course !"
    result = ctk.CTkLabel(frame_result, 
                            text=f"{c_quoi_le_predicteur_performance}",
                            font=(font_principale, taille2), text_color=couleur1, wraplength=600, justify="left", anchor="w")
    result.pack(expand=True, fill="both", padx=15, pady=5)

    def calcul_temps():
        distance_avt_conversion = distance_entry.get().strip().replace(',', '.').replace(' ', '').replace('_', '').replace('km', '').replace('KM', '')
        vma_avt_conversion = vma_entry.get().strip().replace(',', '.').replace(' ', '').replace('_', '').replace('vma', '').replace('VMA', '')
        if not vma_avt_conversion:
            messagebox.showerror("Champs vide", "La VMA est obligatoire, elle ne doit pas √™tre vide !")
            return
        if not distance_avt_conversion:
            messagebox.showerror("Champs vide", "La distance est obligatoire, elle ne doit pas √™tre vide !")
            return
        try:
            vma = float(vma_avt_conversion)
            if vma <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur de conversion", "La distance doit √™tre un nombre positif !")
            return
        try:
            distance = float(distance_avt_conversion)
            if distance <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Erreur de conversion", "La distance doit √™tre un nombre positif !")
            return
        if distance <= 2:
            vitesse_moyenne = vma*0.98
            temps_calculer = distance/vitesse_moyenne
            heure = int(temps_calculer)
            minute_calculer = (temps_calculer-heure)*60
            minutes = int(minute_calculer)
            seconde = (minute_calculer-minutes)*60
        elif 2 <= distance <= 3:
            vitesse_moyenne = vma*0.94
            temps_calculer = distance/vitesse_moyenne
            heure = int(temps_calculer)
            minute_calculer = (temps_calculer-heure)*60
            minutes = int(minute_calculer)
            seconde = (minute_calculer-minutes)*60
        elif 3 <= distance <= 6:
            vitesse_moyenne = vma*0.82
            temps_calculer = distance/vitesse_moyenne
            heure = int(temps_calculer)
            minute_calculer = (temps_calculer-heure)*60
            minutes = int(minute_calculer)
            seconde = (minute_calculer-minutes)*60
        elif 6 <= distance <= 12:
            vitesse_moyenne = vma*0.77
            temps_calculer = distance/vitesse_moyenne
            heure = int(temps_calculer)
            minute_calculer = (temps_calculer-heure)*60
            minutes = int(minute_calculer)
            seconde = (minute_calculer-minutes)*60
        elif 12 <= distance <= 25:
            vitesse_moyenne = vma*0.72
            temps_calculer = distance/vitesse_moyenne
            heure = int(temps_calculer)
            minute_calculer = (temps_calculer-heure)*60
            minutes = int(minute_calculer)
            seconde = (minute_calculer-minutes)*60
        elif 21.0975 <= distance <= 42.195:
            vitesse_moyenne = vma*0.62
            temps_calculer = distance/vitesse_moyenne
            heure = int(temps_calculer)
            minute_calculer = (temps_calculer-heure)*60
            minutes = int(minute_calculer)
            seconde = (minute_calculer-minutes)*60
        else:
            vitesse_moyenne = vma*0.55
            temps_calculer = distance/vitesse_moyenne
            heure = int(temps_calculer)
            minute_calculer = (temps_calculer-heure)*60
            minutes = int(minute_calculer)
            seconde = (minute_calculer-minutes)*60

        interpretation = f"Temps estim√© : {heure:.0f}h {minutes:.0f}min {seconde:.0f}s\n\nCette pr√©diction peut te servir de base pour te fixer des objectifs pr√©cis et"\
                        " structurer tes s√©ances : du fractionn√© pour am√©liorer ta vitesse ou des sorties longues pour am√©liorer ton endurance,..." \
                        " R√©√©value toutes les 2-3 semaines pour affiner ton entra√Ænement."

        result.configure(text=interpretation)
    
    frame2 = ctk.CTkFrame(carte_connexion, fg_color="transparent")
    frame2.pack(expand=True, fill="both", pady=(2, 12), padx=12)
    button_check = ctk.CTkButton(frame2, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: calcul_temps())
    button_check.pack(expand=True, fill="both", side="left", padx=(0, 2))
    button_back = ctk.CTkButton(frame2, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), outils(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(expand=True, fill="both", side="left")

def outils(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_outil(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(app ,text="Outils", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=10, pady=10)

    frame_bouton = ctk.CTkFrame(app, fg_color="transparent")
    frame_bouton.pack(pady=(20,0), padx=10)
    frame_bouton1 = ctk.CTkFrame(frame_bouton, fg_color="transparent")
    frame_bouton1.pack(pady=(20,0), padx=10)
    frame_bouton2 = ctk.CTkFrame(frame_bouton, fg_color="transparent")
    frame_bouton2.pack(pady=(10,0), padx=10)
    frame_bouton3 = ctk.CTkFrame(frame_bouton, fg_color="transparent")
    frame_bouton3.pack(pady=(10,20), padx=10)

    button_autre = ctk.CTkButton(frame_bouton1, text="‚è±Ô∏è Pr√©dicteur de performance\n_______________________\n\nD√©couvre ton temps au semi-marathon,...",
                                    corner_radius=corner2, width=500, font=(font_principale, taille2), fg_color=couleur2, 
                                    hover_color=couleur2_hover, text_color=couleur1, 
                                    command=lambda: [vider_fenetre(app), pr√©dicteur_performance(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_autre.pack(side="left", padx=10)
    button_info = ctk.CTkButton(frame_bouton1, text="‚ù§Ô∏è Zones cardiaque\n_______________________\n\nD√©couvre tes zones de fr√©quence cardiaque", 
                                    fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, width=500, font=(font_principale, taille2),
                                    text_color=couleur1, 
                                    command=lambda: [vider_fenetre(app), zone_cardiaque(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_info.pack(side="left", padx=(0, 10))
    button_nouveaut√© = ctk.CTkButton(frame_bouton2, text="‚öñÔ∏è Calculateur IMC\n_______________________\n\nD√©couvre ton IMC avec une interpr√©tation", 
                                    fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, width=500, font=(font_principale, taille2),
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), calculateur_imc(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_nouveaut√©.pack(side="left", padx=10)
    button_avis = ctk.CTkButton(frame_bouton2, text="üöÄ Estimation VMA\n_______________________\n\nD√©couvre ta VMA et tes zones d'allure", 
                                    fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, width=500, font=(font_principale, taille2),
                                    text_color=couleur1, 
                                    command=lambda: [vider_fenetre(app), estimation_VMA(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_avis.pack(side="left", padx=(0, 10))
    button_avis = ctk.CTkButton(frame_bouton3, text="ü´Å Estimation VO2max\n_______________________\n\nD√©couvre ton VO2max via ta vma", 
                                    fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, width=500, font=(font_principale, taille2),
                                    text_color=couleur1, 
                                    command=lambda: [vider_fenetre(app), estimation_VO2MAX(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_avis.pack(side="left", padx=10)   
    button_avis = ctk.CTkButton(frame_bouton3, text="üçó Prot√©ine quotidienne\n_______________________\n\nD√©couvre la qt√©. de prot√©ines √† consommer", 
                                    fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, width=500, font=(font_principale, taille2),
                                    text_color=couleur1,
                                    command=lambda: [vider_fenetre(app), proteine_quotidienne(account_id, app, sidebar_outil, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_avis.pack(side="left", padx=(0, 10))
