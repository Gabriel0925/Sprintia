from app_ressource import * 
from update_database import con, curseur, con_coach, curseur_coach

def c_quoi_rpe():
    messagebox.showinfo("C'est quoi le RPE ?", 
                        "Le RPE, c'est une mani√®re subjective de mesurer l'intensit√© de ton entra√Ænement. " \
                        "En gros, tu notes l'effort que tu ressens sur une √©chelle de 1 √† 10.\n\n" \
                        "‚óâ RPE : 1 = Facile\n" \
                        "‚óâ RPE : 2 = Facile\n" \
                        "‚óâ RPE : 3 = Facile\n" \
                        "‚óâ RPE : 4 = Mod√©r√©\n" \
                        "‚óâ RPE : 5 = Mod√©r√©\n" \
                        "‚óâ RPE : 6 = Mod√©r√©\n" \
                        "‚óâ RPE : 7 = Difficile\n" \
                        "‚óâ RPE : 8 = Difficile\n" \
                        "‚óâ RPE : 9 = Tr√®s Difficile\n" \
                        "‚óâ RPE : 10 = Effort Maximal")

def choisir_nb_al√©atoire():
    try:
        curseur_coach.execute(f"SELECT nb_minimum FROM choisir_nb_al√©atoire")
        nb_min = curseur_coach.fetchone()[0]
        curseur_coach.execute(f"SELECT nb_maximum FROM choisir_nb_al√©atoire")
        nb_max = curseur_coach.fetchone()[0]
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur lors du choix du nombre pour g√©n√©ration du texte pour le coach !")
        return
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye !")
        return
    nombre = random.randint(nb_min, nb_max)
    return nombre

def coach_pour_ajouter_un_entra√Ænement(boite, account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                                       Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                                       sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                                       rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                                       passe_d_entry, score_entry, but_entry, activit√©):
    
    curseur.execute("SELECT nom_du_coach, avatar FROM Coach WHERE account_id = ?", (account_id,))
    ton_coach = curseur.fetchone()
    if ton_coach:
        nom_du_coach = ton_coach[0]
        avatar_du_coach = ton_coach[1]
    else:
        nom_du_coach = None
        avatar_du_coach = None

    def g√©n√©rer_une_phrase():
        generation = ["question", "emoji", "phrase_de_motivation", "conseil_info", "promo_sprintia"]
        text_generer = ""
        text_totale_generer = ""
        try:
            curseur.execute("SELECT style_du_coach FROM Coach WHERE account_id = ?", (account_id,))
            style = curseur.fetchone()
            if style:
                if style[0] == "Inshape":
                    table_personnalit√© = "ajouter_activit√©_inshape"
                elif style[0] == "Strict":
                    table_personnalit√© = "ajouter_activit√©_strict_motivant"
                elif style[0] == "Copain":
                    table_personnalit√© = "ajouter_activit√©_copain"
                else:
                    table_personnalit√© = "ajouter_activit√©_bienveillant"
            else:
                    table_personnalit√© = "ajouter_activit√©_bienveillant"
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de g√©n√©ration de texte pour le coach !")
            return
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye !")
            return
        for text_coach in generation:
            nombre = choisir_nb_al√©atoire()
            try:
                curseur_coach.execute(f"SELECT {text_coach} FROM {table_personnalit√©} WHERE id = ?", (nombre,))
                text_generer = curseur_coach.fetchone()[0]
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de g√©n√©ration de texte pour le coach !")
                return
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye !")
                return
            text_totale_generer = text_totale_generer+text_generer
        if len(text_totale_generer) > 500:
            return g√©n√©rer_une_phrase()
        return text_totale_generer

    text_totale_generer = g√©n√©rer_une_phrase()

    frame_coach = ctk.CTkFrame(boite, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur_fond)
    frame_coach.pack(fill="both", side="right", padx=(7, 25), pady=25)
    frame_embleme_coach = ctk.CTkFrame(master=frame_coach, fg_color="transparent")
    frame_embleme_coach.pack(fill="both", padx=12, pady=25)
    frame_phrase_du_coach = ctk.CTkFrame(master=frame_coach, fg_color="transparent")
    frame_phrase_du_coach.pack(fill="both", padx=12, pady=(25, 12))
                                    
    embleme_coach = ctk.CTkLabel(master=frame_embleme_coach, 
                                    text=f"{avatar_du_coach if avatar_du_coach else "üë®"} {nom_du_coach if nom_du_coach else "JRM Coach"}",
                                    font=(font_secondaire, taille2), text_color=couleur1, wraplength=310, justify="left", anchor="w")
    embleme_coach.pack(expand=True, fill="both")
    phrase_du_coach = ctk.CTkLabel(master=frame_phrase_du_coach, 
                                    text=f"{text_totale_generer}",
                                    font=(font_principale, taille3), text_color=couleur1, 
                                    wraplength=310, justify="left", anchor="w")
    phrase_du_coach.pack(expand=True, fill="both")

def enregistrement_activit√©(account_id, app, exercice, date, duree, rpe, douleur, fatigue, climat, nom, sport, distance, denivele, allure, vmax, 
                            √©quipement, muscle_travaill√©, r√©p√©titions, s√©rie, volume_total, lieu, humeur, but, passe_d√©cisive, type_de_s√©ances, score, type,
                            mode):
    if mode == "Libre":
        charge_de_base = duree * rpe
            
        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        modificateurs_climat = [0.95, 1.1, 1.05, 1.2]
            
        charge_d = charge_de_base * modificateurs_douleur[douleur]
        charge_c = charge_d * modificateurs_climat[climat]
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge = score_fatigue * charge_c
        try:
            curseur.execute("""INSERT INTO Historique_activit√© (date_activit√©, sport, dur√©e, distance, rpe, charge, account_id, type, d√©nivel√©, cat√©gorie) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, float(f"{duree:.0f}"), distance, rpe, charge, account_id, nom, denivele, "libre"))
            con.commit()
            messagebox.showinfo("Succ√®s", "Ton activit√© a bien √©t√© enregistr√©e !")
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de ton activit√© !")
            return
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye !")
            return
    elif mode == "Course":
        charge_de_base = duree * rpe

        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        modificateurs_climat = [0.95, 1.1, 1.05, 1.2]
        if type == "Normal":
            coef = 1.0
        elif type == "Endurance":
            coef = 1.05
        elif type == "Fractionn√©" or "Sp√©cifique":
            coef = 1.1
        elif type == "Trail" or "Comp√©tition":
            coef = 1.25
        elif type == "Ultrafond":
            coef = 1.30

        charge_d = charge_de_base * modificateurs_douleur[douleur]
        charge_c = charge_d * modificateurs_climat[climat]
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge = (score_fatigue * charge_c)*coef
        try:
            curseur.execute("""INSERT INTO Historique_activit√© (date_activit√©, sport, dur√©e, distance, rpe, charge, account_id, type, d√©nivel√©, allure, vitesse_max, cat√©gorie) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, float(f"{duree:.0f}"), distance, rpe, charge, account_id, type, denivele, allure, vmax, "course"))
            con.commit()
            messagebox.showinfo("Succ√®s", "Ton activit√© a bien √©t√© enregistr√©e !")
            vider_fenetre(app)
            exercice(account_id)
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de ton activit√©.")
            return
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye.")
            return
    elif mode == "Musculation":                          
        charge_de_base = duree * rpe
        
        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        if √©quipement == "Avec √©quipement":
            facteur_matos = 1.1
        else:
            facteur_matos = 1.0
        
        charge_d = charge_de_base * modificateurs_douleur[douleur]
        charge_c = charge_d * facteur_matos
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge = score_fatigue * charge_c
        try:
            curseur.execute("""INSERT INTO Historique_activit√© (date_activit√©, sport, dur√©e, rpe, charge, account_id, muscle_travaill√©, r√©p√©titions, s√©rie, volume, √©quipement, lieu, cat√©gorie) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, float(f"{duree:.0f}"), rpe, charge, account_id, muscle_travaill√©, r√©p√©titions, s√©rie, volume_total, √©quipement, lieu, "musculation"))
            con.commit()
            messagebox.showinfo("Succ√®s", "Ton activit√© a bien √©t√© enregistr√©e !")
            vider_fenetre(app)
            exercice(account_id)
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de ton activit√©.")
            return
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye.")
            return
    else:
        if type_de_s√©ances == "Entra√Ænement":  
            coef_foot = 1        
        elif type_de_s√©ances == "Match":
            coef_foot = 1.2
        elif type_de_s√©ances == "City":
            coef_foot = 0.9
        else:  
            coef_foot = 1.4

        charge_de_base = duree * rpe
        
        modificateurs_douleur = [0.9, 1.05, 1.2, 1.4]
        modificateurs_climat = [0.95, 1.1, 1.05, 1.2]
        
        charge_d = charge_de_base * modificateurs_douleur[douleur]
        charge_c = charge_d * modificateurs_climat[climat]
        score_fatigue = 1 + (fatigue - 2.5) * 0.05
        charge_av = score_fatigue * charge_c
        charge =  charge_av*coef_foot
        try:
            curseur.execute("""INSERT INTO Historique_activit√© (date_activit√©, sport, dur√©e, rpe, charge, account_id, humeur, but, passe_d√©cisive, type, score, cat√©gorie) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (date, sport, float(f"{duree:.0f}"), rpe, charge, account_id, humeur, but, passe_d√©cisive, type_de_s√©ances, score, "football"))
            con.commit()
            messagebox.showinfo("Succ√®s", "Ton activit√© a bien √©t√© enregistr√©e !")
            vider_fenetre(app)
            exercice(account_id)
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de ton activit√©.")
            return
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendue s'est produite, r√©essaye.")
            return
    
    vider_fenetre(app)
    exercice(account_id)
 
def v√©rification_data_de_base_activit√©(account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                                       Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                                       sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                                       rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                                       passe_d_entry, score_entry, but_entry, mode):
    
    climat = nom = sport = distance = denivele = allure = vmax = type = √©quipement = None
    muscle_travaill√© = r√©p√©titions = s√©rie = volume_total = lieu = humeur = but = passe_d√©cisive = type_de_s√©ances = score = type = None

    try:
        date_str = date_entry.get().strip().replace('/', '-').replace('.', '-').replace(',', '-').replace('_', '-').replace('üí°', '').replace(' ', '')
        if not date_str:
            messagebox.showerror("Date est vide", "La date est obligatoire !")
            return
        date_obj = datetime.strptime(date_str, '%d-%m-%Y')
        if date_obj > datetime.now():
            messagebox.showerror("Erreur de date", "La date ne peut pas √™tre dans le futur !")
            return
        date = date_obj.strftime('%Y-%m-%d')
    except ValueError as e:
        messagebox.showerror("Erreur de format", "Format de date invalide. Utilisez JJ-MM-AAAA.")
        return
    try:
        duree = duree_entry.get().strip()
        if not duree:
            messagebox.showerror("Dur√©e est vide", "La dur√©e est obligatoire !")
            return
        if ":" in duree:
            if len(duree.split(":")) == 3:
                heures, minutes, secondes = duree.split(':') # Split d√©coupe le champs temps_autre en deux parties
                if len(heures) > 2 or len(minutes) > 2 or len(secondes) > 2:
                    messagebox.showerror("Erreur de format", "Le format de la dur√©e doit √™tre hh:mm:ss avec hh, mm et ss avec 2 chiffres maximum !")
                    return
                heure = int(heures)
                minute = int(minutes)
                seconde = int(secondes)
                if heure > 59 or minute > 59 or seconde > 59:
                    messagebox.showerror("Erreur de format", "Le format de la dur√©e doit √™tre hh:mm:ss avec hh, mm et ss inf√©rieur √† 60 !")
                    return
                duree = (heure*60) + minute + (seconde/60) # On convertit le temps en minutes
            elif len(duree.split(":")) == 2:
                minutes, secondes = duree.split(':')
                if len(minutes) > 2 or len(secondes) > 2:
                    messagebox.showerror("Erreur de format", "Le format de la dur√©e doit √™tre mm:ss avec mm et ss avec 2 chiffres maximum !")
                    return
                minute = int(minutes)
                seconde = int(secondes)
                if minute > 59 or seconde > 59:
                    messagebox.showerror("Erreur de format", "Le format de la dur√©e doit √™tre mm:ss avec mm et ss inf√©rieur √† 60 !")
                    return
                duree = minute + (seconde/60) # On convertit le temps en minutes
            else:
                messagebox.showerror("Erreur de format", "Le format de la dur√©e doit √™tre hh:mm:ss ou mm:ss !")
                return
        else:
            try:
                temps_conversion = int(duree)
                duree = temps_conversion
            except ValueError:
                messagebox.showerror("Erreur de format", "Le temps doit √™tre un nombre (en minutes) ou au format hh:mm:ss ou mm:ss !")
                return
        if duree <= 0:
            messagebox.showerror("Erreur de dur√©e", "La dur√©e doit √™tre sup√©rieur √† 0 !")
            return
    except ValueError:
        messagebox.showerror("Erreur de nombre entier pour la dur√©e", "Le temps doit √™tre un nombre (minutes) ou au format hh:mm:ss ou au format mm:ss !")
        return
    try:
        rpe = int(rpe_entry.get())
        if not 1 <= rpe <= 10:
            raise ValueError
    except ValueError:
        messagebox.showerror("Erreur de RPE", "Le RPE est invalide, il doit √™tre entre 1 et 10 !")
        return
    douleur = Options_douleur.get(douleur_entry.get().strip())
    fatigue = Options_fatigue.get(fatigue_entry.get().strip())
    if fatigue is None:
        messagebox.showerror("Fatigue est vide", "La fatigue est obligatoire !")
        return
    if douleur is None:
        messagebox.showerror("Douleur est vide", "La douleur est obligatoire !")
        return
    if mode == "Libre" or mode == "Course" or mode == "Football":
        climat = Options_climat.get(climat_entry.get().strip())
        if climat is None:
            messagebox.showerror("Climat est vide", "Le climat est obligatoire !")
            return
    if mode == "Libre":
        nom = type_entry.get().strip()
        if nom == "Type d'entra√Æ.":
            messagebox.showerror("Type d'entra√Ænement vide", "Le type d'entra√Ænement est obligatoire !")
            return
        
        sport_input = sport_entry.get().strip()
        if not sport_input:
            messagebox.showerror("Sport est vide", "Le sport est obligatoire !")
            return
        try:
            float(sport_input)
            messagebox.showerror("Erreur de format", "Le sport doit √™tre une cha√Æne de caract√®res, pas un nombre !")
            return
        except ValueError:
            pass
        if len(sport_input) > 50:
            messagebox.showerror("Erreur", "Le sport doit contenir entre 50 caract√®res !")
            return
        sport = sport_input
        distance = None
        try:
            dist_str = distance_entry.get().strip().replace(',', '.').replace(' ', '').replace('_', '').replace('km', '').replace('KM', '')
            if not dist_str:
                distance = None
            if dist_str:
                distance = float(dist_str)
                if distance <= 0:
                    messagebox.showerror("Erreur de distance", "La distance doit √™tre sup√©rieur √† 0 !")
                    return
        except ValueError:
            messagebox.showerror("Erreur de distance", "Distance invalide (nombre positif requis) !")
            return
        
    if mode == "Libre" or mode == "Course":
        denivele = None        
        try:
            deniv_str = denivele_entry.get().strip().replace(' ', '').replace('m', '').replace('M', '')
            if not deniv_str:
                denivele = None
            if deniv_str:
                denivele = int(deniv_str)
                if denivele < 0:
                    raise ValueError   
        except ValueError:
            messagebox.showerror("Erreur de d√©nivel√©", "D√©nivel√© invalide entier positif uniquement !")
            return
    if mode == "Course":
        sport = "Course"
        type = type_entry.get().strip()
        if type == "Type d'entra√Æ.":
            messagebox.showerror("Type manquant", "S√©l√©ctionne un type d'entra√Ænement !")
            return
        try:
            dist_str = distance_entry.get().strip().replace(',', '.').replace(' ', '').replace('_', '').replace('km', '').replace('KM', '')
            if not dist_str:
                messagebox.showerror("Distance est vide", "La distance est obligatoire dans le mode 'Course' !")
                return
            if dist_str:
                distance = float(dist_str)
                if distance <= 0:
                    messagebox.showerror("Erreur de distance", "La distance doit √™tre sup√©rieur √† 0 !")
                    return
        except ValueError:
            messagebox.showerror("Erreur de distance", "Distance invalide (nombre positif requis) !")
            return
        allure = allure_entry.get().strip()
        if len(allure) > 20:
            messagebox.showerror("Erreur", "L'allure ne doit pas d√©passer 20 caract√®res !")
            return
        if not allure:
            messagebox.showerror("Allure est vide", "L'allure est obligatoire dans le mode 'Course' !")
            return
        vmax_str = vmax_entry.get().strip().replace(",", ".").replace(" ", "").replace("km/h", "").replace("-", "")
        if not vmax_str:
            vmax = None
        else:
            try:
                vmax = float(vmax_str)
                if vmax <= 0:
                    messagebox.showerror("Erreur", "La vitesse max doit √™tre sup√©rieure √† 0 !")
                    return
            except ValueError:
                messagebox.showerror("Erreur", "La vitesse max est invalide (nombre positif requis) !")
                return
    if mode == "Musculation":
        muscle_travaill√© = muscle_entry.get().strip()
        r√©p√©titions = rep_entry.get().strip().replace(",", ".").replace(" ", "").replace("s√©ries", "").replace("-", "")
        s√©rie = serie_entry.get().strip().replace(",", ".").replace(" ", "").replace("r√©p√©titions", "").replace("-", "")
        volume = volume_entry.get().strip().replace(",", ".").replace(" ", "").replace("kg", "").replace("-", "")
        if len(s√©rie) > 20:
            messagebox.showerror("Erreur", "Les s√©ries ne doivent pas d√©passer 20 caract√®res !")
            return
        if s√©rie:
            try:
                s√©rie = int(s√©rie)
                if s√©rie < 0:
                    raise ValueError
            except ValueError:
                messagebox.showerror("Erreur", "Les s√©rie doivent √™tre un nombre entier positif !")
                return
        else:
            s√©rie = None
        if len(muscle_travaill√©) > 150:
            messagebox.showerror("Erreur", "Les muscles travaill√©s ne doivent pas d√©passer 150 caract√®res !")
            return
        if not muscle_travaill√©:
            messagebox.showerror("Muscle travaill√© est vide", "Muscle travaill√© est obligatoire dans le mode 'Musculation' !")
            return
        if len(r√©p√©titions) > 20:
            messagebox.showerror("Erreur", "Les r√©p√©titions ne doivent pas d√©passer 20 caract√®res !")
            return
        if r√©p√©titions:
            try:
                r√©p√©titions = int(r√©p√©titions)
                if r√©p√©titions < 0:
                    raise ValueError
            except ValueError:
                messagebox.showerror("Erreur", "Les r√©p√©titions doivent √™tre un nombre entier positif !")
                return
        if not r√©p√©titions:
            r√©p√©titions = None
        if volume:
            try:
                volume_total = float(volume)
                if volume_total < 0:
                    raise ValueError
            except ValueError:
                messagebox.showerror("Erreur", "Volume total invalide (entier positif requis) !")
                return
        else:
            volume_total = None

        lieu = lieu_entry.get().strip()
        √©quipement = matos_entry.get().strip()
        if lieu is None:
            messagebox.showerror("Lieu est vide", "Le lieu de l'entra√Ænement est obligatoire !")
            return
        if √©quipement == "Type d'entra√Æ.":
            messagebox.showerror("Le type est vide", "Le type d'entra√Ænement est obligatoire !")
            return
        sport = "Musculation"
    elif mode == "Football":
        humeur = humeur_entry.get().strip()
        passe_d√©cisive1 = passe_d_entry.get().strip()
        type_de_s√©ances = type_entry.get().strip()
        score = score_entry.get().strip()
        if type_de_s√©ances == "Type d'entra√Æ.":
            messagebox.showerror("Type de s√©ances de foot est vide", "Le type de s√©ance de foot est obligatoire !")
            return
        if len(humeur) > 50:
            messagebox.showerror("Erreur", "L'humeur ne doit pas d√©passer 50 caract√®res !")
            return
        if not humeur:
            messagebox.showerror("Humeur est vide", "L'humeur est obligatoire dans le mode 'Football' !")
            return
        if len(score) > 40:
            messagebox.showerror("Erreur", "Le score ne doit pas d√©passer 40 caract√®res !")
            return
        if not score:
            score = None
        if passe_d√©cisive1:
            try:
                passe_d√©cisive = int(passe_d√©cisive1)
                if passe_d√©cisive < 0:
                    raise ValueError
            except ValueError:
                messagebox.showerror("Erreur", "Nombre de passe d√©cisive invalide (entier positif requis) !")
                return
        else:
            passe_d√©cisive = None
        but1 = but_entry.get().strip()
        if but1:
            try:
                but = int(but1)
                if but < 0:
                    raise ValueError
            except ValueError:
                messagebox.showerror("Erreur", "Nombre de but invalide (entier positif requis) !")
                return
        else:
            but = None
        
        sport = "Football"
        if type_de_s√©ances is None:
            messagebox.showerror("Type de s√©ances de foot est vide", "Le type de s√©ance de foot est obligatoire !")
            return
        
    if mode == "Libre":
        enregistrement_activit√©(account_id, app, exercice, date, duree, rpe, douleur, fatigue, climat, nom, sport, distance, denivele, allure, vmax, 
                            √©quipement, muscle_travaill√©, r√©p√©titions, s√©rie, volume_total, lieu, humeur, but, passe_d√©cisive, type_de_s√©ances, score, type,
                            "Libre")
    elif mode == "Course":
        enregistrement_activit√©(account_id, app, exercice, date, duree, rpe, douleur, fatigue, climat, nom, sport, distance, denivele, allure, vmax, 
                            √©quipement, muscle_travaill√©, r√©p√©titions, s√©rie, volume_total, lieu, humeur, but, passe_d√©cisive, type_de_s√©ances, score, type,
                            "Course")
    elif mode == "Musculation":
        enregistrement_activit√©(account_id, app, exercice, date, duree, rpe, douleur, fatigue, climat, nom, sport, distance, denivele, allure, vmax, 
                            √©quipement, muscle_travaill√©, r√©p√©titions, s√©rie, volume_total, lieu, humeur, but, passe_d√©cisive, type_de_s√©ances, score, type,
                            "Musculation")
    else:
        enregistrement_activit√©(account_id, app, exercice, date, duree, rpe, douleur, fatigue, climat, nom, sport, distance, denivele, allure, vmax, 
                            √©quipement, muscle_travaill√©, r√©p√©titions, s√©rie, volume_total, lieu, humeur, but, passe_d√©cisive, type_de_s√©ances, score, type,
                            "Football")

def pop_up_calendrier(app, date_entry):
    pop_up_calendrier = ctk.CTkToplevel(app, fg_color=couleur2)
    pop_up_calendrier.grab_set()
    pop_up_calendrier.title("Calendrier")
    pop_up_calendrier.geometry("400x400")
    pop_up_calendrier.resizable(False, False)
    pop_up_calendrier.bind("<Control-w>", lambda event: pop_up_calendrier.destroy())

    affichage_calendrier = tkcalendar.Calendar(pop_up_calendrier, selectmode="day", date_pattern="dd/MM/yyyy", 
                                               background=couleur_fond, foreground=couleur_text, headersbackground=couleur_fond, 
                                               normalbackground=couleur2, weekendbackground=couleur2,
                                               othermonthbackground=couleur_fond, othermonthwebackground=couleur_fond,
                                               bordercolor=couleur1, headersforeground=couleur1, selectbackground=couleur1,
                                               selectforeground=couleur_text, font=(font_principale, taille3))
    affichage_calendrier.pack(expand=True, fill="both", padx=5, pady=5)

    pop_up_calendrier.bind('<Return>', lambda event: valider_date(date_entry))

    def valider_date(date_entry):
        date_selectionnee = affichage_calendrier.get_date()
        pop_up_calendrier.destroy()
        date_entry.delete(0, 'end')
        date_entry.insert(0, f"{date_selectionnee}")
        return
    bouton_valider = ctk.CTkButton(pop_up_calendrier, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_secondaire, taille2), command=lambda: valider_date(date_entry))
    bouton_valider.pack(expand=True, fill="both", padx=5, pady=5)

def supprimer_entra√Ænement(account_id, p√©riode_str, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    vider_fenetre(app)
    sidebar_exercice(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=10, padx=10)
    frame_tout = ctk.CTkFrame(app, fg_color=couleur2, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame_tout.pack(pady=(20, 0), padx=10)
    frame1 = ctk.CTkFrame(frame_tout, fg_color="transparent")
    frame1.pack(pady=(12, 2), padx=12)
    frame2 = ctk.CTkFrame(frame_tout, fg_color="transparent")
    frame2.pack(pady=(2, 12), padx=12)

    Titre = ctk.CTkLabel(master=frame, text="Supprimer un entra√Ænement", 
                font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack()

    # On retire le raccourci 'Entr√©e' pour √©viter une erreur
    app.unbind('<Return>')
    app.bind('<Return>', lambda event: supression(account_id))
    choix_entry = ctk.CTkEntry(master=frame1, placeholder_text="ID de l'entra√Æ.", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=280)
    choix_entry.pack(expand=True, fill="both")

    tableau_frame = ctk.CTkScrollableFrame(app, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(side="top", fill="both", expand=True, padx=10, pady=(5, 10))
    try:
        curseur.execute("SELECT id_activit√©, sport, date_activit√©, dur√©e, rpe FROM Historique_activit√© WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC", (account_id, p√©riode_str))
        activites = curseur.fetchall()
        headers = ["ID", "Sport", "Date", "Dur√©e", "RPE"]

        for colonne, header_text in enumerate(headers):
            tableau_frame.grid_columnconfigure(colonne, weight=1)        
            header_label = ctk.CTkButton(tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                fg_color=couleur_fond, corner_radius=corner2, text_color=couleur1,
                                height=40, border_width=border2, border_color=couleur2, hover_color=couleur_fond)
            header_label.grid(row=0, column=colonne, padx=10, pady=15)
            tableau_frame.grid_columnconfigure(colonne, weight=1)

        if activites:
            for ligne, activite in enumerate(activites):
                for colonne, data in enumerate(activite):
                    if colonne == 2:
                        data = datetime.strptime(str(data), '%Y-%m-%d').strftime('%d-%m-%Y')
                    label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                         text_color=couleur_text, wraplength=140)
                    label.grid(row=ligne + 1, column=colonne, padx=15, pady=15, sticky="ew")
        else:
            pas_donnees = ctk.CTkLabel(master=tableau_frame, text="Aucune activit√© enregistr√©e pour cette p√©riode.", font=(font_principale, taille1),
                                       text_color=couleur_text)
            pas_donnees.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de l'historique !")
        return
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, veuillez r√©essayer !")
        return

    def supression(account_id):
            choix = choix_entry.get().strip()
            if not choix:
                messagebox.showerror("Champs vide", "Le champs 'ID de l'entra√Æ est obligatoire, il ne peut pas √™tre vide.")
                return
            try:
                choix_id_saisi = int(choix)
                if choix_id_saisi < 0:
                    raise ValueError
            except ValueError:
                messagebox.showerror("Erreur de conversion", "L'ID de l'entra√Æ doit √™tre un nombre entier positif.")
                return
            ids_objectifs_disponibles = [obj[0] for obj in activites]
            try:
                if choix_id_saisi in ids_objectifs_disponibles:
                    objectif_id_db = choix_id_saisi
                    curseur.execute("DELETE FROM Historique_activit√© WHERE id_activit√© = ? AND account_id = ?", (objectif_id_db, account_id))
                    con.commit()
                    messagebox.showinfo("Suppression r√©ussie", "Activit√© supprim√©e avec succ√®s.")
                    vider_fenetre(app)
                    exercice(account_id)
                else:
                    messagebox.showerror("Erreur", "L'ID de l'entra√Æ saisie n'existe pas ou n'appartient pas √† votre compte.")
                    return
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la suppression de l'entra√Æ.")
                return
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye.")
                return

    button_check = ctk.CTkButton(master=frame2, text="Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: supression(account_id))
    button_check.pack(expand=True, fill="both", side="left", padx=(0, 2))
    button_back = ctk.CTkButton(master=frame2, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3), border_width=border2, border_color=couleur2,
                                    command=lambda: [vider_fenetre(app), exercice_accueil(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(expand=True, fill="both", side="left")

def ajouter_entra√Ænement_course(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}
    Options_climat = {"Normal": 0, "Chaud": 1, "Froid": 2, "Difficile": 3}
    Options_type = ["R√©cup√©ration", "Fun", "Normal", "Endurance", "Seuil", "Fractionn√©", "Sp√©cifique", "Trail", "Ultrafond", "Comp√©tition"]

    sidebar_exercice(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(padx=10, pady=10)
    navbar = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner2)
    navbar.pack(pady=(10, 5))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter un entra√Ænement",
                font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack()

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Libre":
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_libre(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_musculation(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_fooball(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        else:
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_course(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Libre", "Course", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover,
                                           corner_radius=corner2, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left", padx=(5, 2))
    mode_activit√©.set("Course")
    button_rpe = ctk.CTkButton(master=navbar, text="üìä C'est quoi le RPE ?", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=c_quoi_rpe)
    button_rpe.pack(expand=True, fill="x", side="right", padx=10, pady=5)

    boite = ctk.CTkFrame(app, fg_color="transparent")
    boite.pack()
    frame_activit√© = ctk.CTkFrame(boite, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(side="left", padx=(25, 5), pady=25)

    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=12, pady=(12, 2))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=12, pady=2)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=12, pady=20)
    frame_champs4 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs4.pack(padx=12, pady=2)
    frame_champs5 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs5.pack(padx=12, pady=2)
    frame_champs6 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs6.pack(padx=12, pady=2)
    frame_bouton = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_bouton.pack(expand=True, fill="both", padx=12, pady=(0, 12))

    # On retire le raccourci 'Entr√©e' pour √©viter une erreur
    app.unbind('<Return>')
    app.bind('<Return>', lambda event: v√©rification_data_de_base_activit√©(account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                                       Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                                       sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                                       rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                                       passe_d_entry, score_entry, but_entry, "Course"))

    frame_pour_date = ctk.CTkFrame(master=frame_champs1, fg_color=couleur_fond, corner_radius=corner1)
    frame_pour_date.pack(expand=True, fill="both", side="left", padx=(0, 2))
    date_entry = ctk.CTkEntry(master=frame_pour_date, placeholder_text="Date", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=36, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color=couleur1,
                                  text_color=couleur1, width=180)
    date_entry.pack(expand=True, fill="both", side="left", padx=(12,0), pady=12)
    date_entry.insert(0, f"üí° {date_actuelle_format.replace("-", "/")}")
    button_pop_up_calendrier = ctk.CTkButton(frame_pour_date, text="üìÖ Calendrier", width=70, height=36, corner_radius=corner1, fg_color=couleur2,
                                            hover_color=couleur2_hover, font=(font_principale, taille3), text_color=couleur1,
                                            border_color=couleur2, border_width=border1,
                                            command=lambda: pop_up_calendrier(app, date_entry))
    button_pop_up_calendrier.pack(expand=True, fill="both", side="left", padx=(0, 12), pady=12)
    duree_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Dur√©e", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=275)
    duree_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))

    distance_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Distance (km)", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=310)
    distance_entry.pack(expand=True, fill="both", side="left", padx=2)
    type_entry = ctk.CTkComboBox(master=frame_champs2, values=Options_type, font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    type_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))
    type_entry.set("Type d'entra√Æ.")

    rpe_label = ctk.CTkLabel(master=frame_champs3, text="RPE : 1", font=(font_principale, taille2), text_color=couleur_fond)
    rpe_label.pack(expand=True, fill="x", side="left", padx=12)
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs3, width=500, height=30, from_= 1, to= 10, number_of_steps= 9, command=valeur_rpe,
                              progress_color=couleur_fond, button_color=couleur_fond, button_hover_color=couleur2_hover,
                              corner_radius=5, button_length=20, fg_color=couleur1, 
                              # La variable DoubleVar met la valeur du RPE √† 1
                              variable=ctk.DoubleVar(value=1))
    rpe_entry.pack(expand=True, fill="x", side="left", padx=12)

    fatigue_entry = ctk.CTkComboBox(master=frame_champs4, values=list(Options_fatigue.keys()), font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    fatigue_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    fatigue_entry.set("Fatigue post-entra√Æ.")
    douleur_entry = ctk.CTkComboBox(master=frame_champs4, values=list(Options_douleur.keys()), font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    douleur_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))
    douleur_entry.set("Douleur post-entra√Æ.")

    climat_entry = ctk.CTkComboBox(master=frame_champs5, values=list(Options_climat.keys()), font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    climat_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    climat_entry.set("Climat √† l'entra√Æ.")
    allure_entry = ctk.CTkEntry(master=frame_champs5, placeholder_text="Allure (ex : 6:00 /km)", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color=couleur1,
                                  text_color=couleur1, width=310)
    allure_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))

    denivele_entry = ctk.CTkEntry(master=frame_champs6, placeholder_text="D√©nivel√© (m)", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color=couleur1,
                                  text_color=couleur1, width=310)
    denivele_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))
    vmax_entry = ctk.CTkEntry(master=frame_champs6, placeholder_text="Vitesse max", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color=couleur1,
                                  text_color=couleur1, width=310)
    vmax_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))

    sport_entry = None
    muscle_entry = None
    rep_entry = None
    serie_entry = None
    volume_entry = None
    Options_lieu = None
    lieu_entry = None
    matos_entry = None   
    humeur_entry = None
    passe_d_entry = None
    score_entry = None
    but_entry = None 

    bouton_valider = ctk.CTkButton(master=frame_bouton, text="üíæ Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1, border_color=couleur2, border_width=border1,
                                    font=(font_principale, taille3), width=310,
                            command=lambda : v√©rification_data_de_base_activit√©(account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                            Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                            sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                            rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                            passe_d_entry, score_entry, but_entry, "Course"))
    bouton_valider.pack(expand=True, fill="both", side="left", padx=(0, 2))
    button_back = ctk.CTkButton(master=frame_bouton, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1, width=310,
                                    font=(font_principale, taille3), border_width=border2, border_color=couleur2,
                                    command=lambda: [vider_fenetre(app), exercice_accueil(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(expand=True, fill="both", side="left")

    coach_pour_ajouter_un_entra√Ænement(boite, account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                                       Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                                       sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                                       rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                                       passe_d_entry, score_entry, but_entry, "Course")

def ajouter_entra√Ænement_musculation(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    Options_matos = ["Poids de corps", "Avec √©quipement", "Mixte"]
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}
    Options_lieu = ["Domicile", "Salle de sport", "Gymnase", "Street Workout", "Ext√©rieur", "Autre"]

    sidebar_exercice(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(padx=10, pady=10)
    navbar = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner2)
    navbar.pack(pady=(10, 5))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter un entra√Ænement",
                font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack()

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Libre":
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_libre(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_musculation(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_fooball(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        else:
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_course(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Libre", "Course", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover,
                                           corner_radius=corner2, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left", padx=(5, 2))
    mode_activit√©.set("Musculation")
    button_rpe = ctk.CTkButton(master=navbar, text="üìä C'est quoi le RPE ?", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=c_quoi_rpe)
    button_rpe.pack(expand=True, fill="x", side="right", padx=10, pady=5)

    boite = ctk.CTkFrame(app, fg_color="transparent")
    boite.pack()
    frame_activit√© = ctk.CTkFrame(boite, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(side="left", padx=(25, 5), pady=25)

    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=12, pady=(12, 2))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=12, pady=2)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=12, pady=20)
    frame_champs4 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs4.pack(padx=12, pady=2)
    frame_champs5 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs5.pack(padx=12, pady=2)
    frame_champs6 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs6.pack(padx=12, pady=2)
    frame_bouton = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_bouton.pack(expand=True, fill="both", padx=12, pady=(0, 12))

    # On retire le raccourci 'Entr√©e' pour √©viter une erreur
    app.unbind('<Return>')
    app.bind('<Return>', lambda event: v√©rification_data_de_base_activit√©(account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                                       Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                                       sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                                       rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                                       passe_d_entry, score_entry, but_entry, "Musculation"))

    frame_pour_date = ctk.CTkFrame(master=frame_champs1, fg_color=couleur_fond, corner_radius=corner1)
    frame_pour_date.pack(expand=True, fill="both", side="left", padx=(0, 2))
    date_entry = ctk.CTkEntry(master=frame_pour_date, placeholder_text="Date", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=36, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color=couleur1,
                                  text_color=couleur1, width=180)
    date_entry.pack(expand=True, fill="both", side="left", padx=(12,0), pady=12)
    date_entry.insert(0, f"üí° {date_actuelle_format.replace("-", "/")}")
    button_pop_up_calendrier = ctk.CTkButton(frame_pour_date, text="üìÖ Calendrier", width=70, height=36, corner_radius=corner1, fg_color=couleur2,
                                            hover_color=couleur2_hover, font=(font_principale, taille3), text_color=couleur1,
                                            border_color=couleur2, border_width=border1,
                                            command=lambda: pop_up_calendrier(app, date_entry))
    button_pop_up_calendrier.pack(expand=True, fill="both", side="left", padx=(0, 12), pady=12)
    duree_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Dur√©e", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=275)
    duree_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))

    matos_entry = ctk.CTkComboBox(master=frame_champs2, values=Options_matos, font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    matos_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    matos_entry.set("Type d'entra√Æ.")
    muscle_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Muscle travaill√©", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=310)
    muscle_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))

    rpe_label = ctk.CTkLabel(master=frame_champs3, text="RPE : 1", font=(font_principale, taille2), text_color=couleur_fond)
    rpe_label.pack(expand=True, fill="x", side="left", padx=12)
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs3, width=500, height=30, from_= 1, to= 10, number_of_steps= 9, command=valeur_rpe,
                              progress_color=couleur_fond, button_color=couleur_fond, button_hover_color=couleur2_hover,
                              corner_radius=5, button_length=20, fg_color=couleur1, 
                              # La variable DoubleVar met la valeur du RPE √† 1
                              variable=ctk.DoubleVar(value=1))
    rpe_entry.pack(expand=True, fill="x", side="left", padx=12)

    fatigue_entry = ctk.CTkComboBox(master=frame_champs4, values=list(Options_fatigue.keys()), font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    fatigue_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    fatigue_entry.set("Fatigue post-entra√Æ.")
    douleur_entry = ctk.CTkComboBox(master=frame_champs4, values=list(Options_douleur.keys()), font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    douleur_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))
    douleur_entry.set("Douleur post-entra√Æ.")

    lieu_entry = ctk.CTkComboBox(master=frame_champs5, values=Options_lieu, font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    lieu_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    lieu_entry.set("Lieu de l'entra√Æ.")
    rep_entry = ctk.CTkEntry(master=frame_champs5, placeholder_text="Nb. total de r√©p√©titions", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=310)
    rep_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))

    serie_entry = ctk.CTkEntry(master=frame_champs6, placeholder_text="Nb. total de s√©ries", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=310)
    serie_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    volume_entry = ctk.CTkEntry(master=frame_champs6, placeholder_text="Volume total (kg)", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=310)
    volume_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))

    Options_climat = None
    climat_entry = None
    type_entry = None
    sport_entry = None
    distance_entry = None
    denivele_entry = None
    allure_entry = None
    vmax_entry = None
    humeur_entry = None
    passe_d_entry = None
    score_entry = None
    but_entry = None

    bouton_valider = ctk.CTkButton(master=frame_bouton, text="üíæ Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1, border_color=couleur2, border_width=border1,
                                    font=(font_principale, taille3), width=310,
                            command=lambda : v√©rification_data_de_base_activit√©(account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                            Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                            sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                            rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                            passe_d_entry, score_entry, but_entry, "Musculation"))
    bouton_valider.pack(expand=True, fill="both", side="left", padx=(0, 2))
    button_back = ctk.CTkButton(master=frame_bouton, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1, width=310,
                                    font=(font_principale, taille3), border_width=border2, border_color=couleur2,
                                    command=lambda: [vider_fenetre(app), exercice_accueil(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(expand=True, fill="both", side="left")

    coach_pour_ajouter_un_entra√Ænement(boite, account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                                       Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                                       sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                                       rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                                       passe_d_entry, score_entry, but_entry, "Musculation")

def ajouter_entra√Ænement_fooball(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_climat = {"Normal": 0, "Chaud": 1, "Froid": 2, "Difficile": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}
    Options_type = ["Entra√Ænement", "Match", "Tournoi", "Futsal", "City", "Autre"]

    sidebar_exercice(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(padx=10, pady=10)
    navbar = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner2)
    navbar.pack(pady=(10, 5))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter un entra√Ænement",
                font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack()

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Libre":
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_libre(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_musculation(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_fooball(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        else:
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_course(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Libre", "Course", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover,
                                           corner_radius=corner2, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left", padx=(5, 2))
    mode_activit√©.set("Football")
    button_rpe = ctk.CTkButton(master=navbar, text="üìä C'est quoi le RPE ?", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=c_quoi_rpe)
    button_rpe.pack(expand=True, fill="x", side="right", padx=(15, 5), pady=5)

    boite = ctk.CTkFrame(app, fg_color="transparent")
    boite.pack()
    frame_activit√© = ctk.CTkFrame(boite, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(side="left", padx=(25, 5), pady=25)

    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=12, pady=(12, 2))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=12, pady=2)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=12, pady=20)
    frame_champs4 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs4.pack(padx=12, pady=2)
    frame_champs5 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs5.pack(padx=12, pady=2)
    frame_champs6 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs6.pack(padx=12, pady=2)
    frame_bouton = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_bouton.pack(padx=12, pady=(0, 12))

    # On retire le raccourci 'Entr√©e' pour √©viter une erreur
    app.unbind('<Return>')
    app.bind('<Return>', lambda event: v√©rification_data_de_base_activit√©(account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                                       Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                                       sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                                       rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                                       passe_d_entry, score_entry, but_entry, "Football"))

    frame_pour_date = ctk.CTkFrame(master=frame_champs1, fg_color=couleur_fond, corner_radius=corner1)
    frame_pour_date.pack(expand=True, fill="both", side="left", padx=(0, 2))
    date_entry = ctk.CTkEntry(master=frame_pour_date, placeholder_text="Date", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=36, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color=couleur1,
                                  text_color=couleur1, width=180)
    date_entry.pack(expand=True, fill="both", side="left", padx=(12,0), pady=12)
    date_entry.insert(0, f"üí° {date_actuelle_format.replace("-", "/")}")
    button_pop_up_calendrier = ctk.CTkButton(frame_pour_date, text="üìÖ Calendrier", width=70, height=36, corner_radius=corner1, fg_color=couleur2,
                                            hover_color=couleur2_hover, font=(font_principale, taille3), text_color=couleur1,
                                            border_color=couleur2, border_width=border1,
                                            command=lambda: pop_up_calendrier(app, date_entry))
    button_pop_up_calendrier.pack(expand=True, fill="both", side="left", padx=(0, 12), pady=12)
    duree_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Dur√©e", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=275)
    duree_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))

    type_entry = ctk.CTkComboBox(master=frame_champs2, values=Options_type, font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    type_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    type_entry.set("Type d'entra√Æ.")
    humeur_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Humeur post-match", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=310)
    humeur_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))

    rpe_label = ctk.CTkLabel(master=frame_champs3, text="RPE : 1", font=(font_principale, taille2), text_color=couleur_fond)
    rpe_label.pack(expand=True, fill="x", side="left", padx=12)
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs3, width=500, height=30, from_= 1, to= 10, number_of_steps= 9, command=valeur_rpe,
                              progress_color=couleur_fond, button_color=couleur_fond, button_hover_color=couleur2_hover,
                              corner_radius=5, button_length=20, fg_color=couleur1, 
                              # La variable DoubleVar met la valeur du RPE √† 1
                              variable=ctk.DoubleVar(value=1))
    rpe_entry.pack(expand=True, fill="x", side="left", padx=12)

    fatigue_entry = ctk.CTkComboBox(master=frame_champs4, values=list(Options_fatigue.keys()), font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    fatigue_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    fatigue_entry.set("Fatigue post-entra√Æ.")
    douleur_entry = ctk.CTkComboBox(master=frame_champs4, values=list(Options_douleur.keys()), font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    douleur_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))
    douleur_entry.set("Douleur post-entra√Æ.")

    climat_entry = ctk.CTkComboBox(master=frame_champs5, values=list(Options_climat.keys()), font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    climat_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    climat_entry.set("Climat √† l'entra√Æ.")
    score_entry = ctk.CTkEntry(master=frame_champs5, placeholder_text="Score (ex : 3-2)", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=310)
    score_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))

    but_entry = ctk.CTkEntry(master=frame_champs6, placeholder_text="Nb. but", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=310)
    but_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    passe_d_entry = ctk.CTkEntry(master=frame_champs6, placeholder_text="Nb. passe d√©cisive", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=310)
    passe_d_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))

    sport_entry = None
    distance_entry = None
    denivele_entry = None
    allure_entry = None
    vmax_entry = None
    muscle_entry = None
    rep_entry = None
    serie_entry = None
    volume_entry = None
    Options_lieu = None
    lieu_entry = None
    matos_entry = None

    bouton_valider = ctk.CTkButton(master=frame_bouton, text="üíæ Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1, border_color=couleur2, border_width=border1,
                                    font=(font_principale, taille3), width=310,
                            command=lambda : v√©rification_data_de_base_activit√©(account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                            Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                            sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                            rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                            passe_d_entry, score_entry, but_entry, "Football"))
    bouton_valider.pack(expand=True, fill="both", side="left", padx=(0, 2))
    button_back = ctk.CTkButton(master=frame_bouton, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1, width=310,
                                    font=(font_principale, taille3), border_width=border2, border_color=couleur2,
                                    command=lambda: [vider_fenetre(app), exercice_accueil(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(expand=True, fill="both", side="left")

    coach_pour_ajouter_un_entra√Ænement(boite, account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                                       Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                                       sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                                       rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                                       passe_d_entry, score_entry, but_entry, "Football")

def ajouter_entra√Ænement_libre(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    Options_douleur = {"Non": 0, "Un peu": 1, "Oui": 2, "Blessure": 3}
    Options_climat = {"Normal": 0, "Chaud": 1, "Froid": 2, "Difficile": 3}
    Options_fatigue = {"Non": 0, "Un peu": 2.5, "Oui": 5}
    options_type = ["√âtirement", "L√©ger", "R√©cup√©ration", "Mod√©r√©", "Br√ªle Graisse", "Cardio", "Tabata", "Intense", "Sortie longue", "Exp√©dition", "Sport d'√©quipe", "Fun", "Autre"]

    sidebar_exercice(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(padx=10, pady=10)
    navbar = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner2)
    navbar.pack(pady=(10, 5))

    Titre = ctk.CTkLabel(master=frame1, text="Ajouter un entra√Ænement", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack()

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Libre":
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_libre(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        elif choix == "Musculation":
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_musculation(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        elif choix == "Football":
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_fooball(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        else:
            app.after(0, lambda: [vider_fenetre(app), ajouter_entra√Ænement_course(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])

    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Libre", "Course", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover,
                                           corner_radius=corner2, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left", padx=(5, 2))
    mode_activit√©.set("Libre")
    button_rpe = ctk.CTkButton(master=navbar, text="üìä C'est quoi le RPE ?", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=c_quoi_rpe)
    button_rpe.pack(expand=True, fill="x", side="right", padx=10, pady=5)

    boite = ctk.CTkFrame(app, fg_color="transparent")
    boite.pack()
    frame_activit√© = ctk.CTkFrame(boite, corner_radius=corner1, border_width=border2, border_color=couleur1, fg_color=couleur2)
    frame_activit√©.pack(side="left", padx=(25, 5), pady=25)

    frame_champs1 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs1.pack(padx=12, pady=(12, 2))
    frame_champs2 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs2.pack(padx=12, pady=2)
    frame_champs3 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs3.pack(padx=12, pady=20)
    frame_champs4 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs4.pack(padx=12, pady=2)
    frame_champs5 = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_champs5.pack(padx=12, pady=2)
    frame_bouton = ctk.CTkFrame(master=frame_activit√©, fg_color="transparent")
    frame_bouton.pack(expand=True, fill="both", padx=12, pady=(0, 12))

    allure_entry = None
    vmax_entry = None

    # On retire le raccourci 'Entr√©e' pour √©viter une erreur
    app.unbind('<Return>')
    app.bind('<Return>', lambda event: v√©rification_data_de_base_activit√©(account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                                       Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                                       sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                                       rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                                       passe_d_entry, score_entry, but_entry, "Libre"))

    frame_pour_date = ctk.CTkFrame(master=frame_champs1, fg_color=couleur_fond, corner_radius=corner1)
    frame_pour_date.pack(expand=True, fill="both", side="left", padx=(0, 2))
    date_entry = ctk.CTkEntry(master=frame_pour_date, placeholder_text="Date", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=36, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color=couleur1,
                                  text_color=couleur1, width=180)
    date_entry.pack(expand=True, fill="both", side="left", padx=(12,0), pady=12)
    date_entry.insert(0, f"üí° {date_actuelle_format.replace("-", "/")}")
    button_pop_up_calendrier = ctk.CTkButton(frame_pour_date, text="üìÖ Calendrier", width=70, height=36, corner_radius=corner1, fg_color=couleur2,
                                            hover_color=couleur2_hover, font=(font_principale, taille3), text_color=couleur1,
                                            border_color=couleur2, border_width=border1,
                                            command=lambda: pop_up_calendrier(app, date_entry))
    button_pop_up_calendrier.pack(expand=True, fill="both", side="left", padx=(0, 12), pady=12)
    sport_entry = ctk.CTkEntry(master=frame_champs1, placeholder_text="Sport", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=275)
    sport_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))

    duree_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Dur√©e", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=205)
    duree_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    distance_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="Distance (km)", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color =couleur1,
                                  text_color=couleur1, width=205)
    distance_entry.pack(expand=True, fill="both", side="left", padx=2)
    denivele_entry = ctk.CTkEntry(master=frame_champs2, placeholder_text="D√©nivel√© (m)", border_color=couleur_fond, fg_color=couleur_fond,
                                  height=height_expressive, font=(font_principale, taille2), corner_radius=corner1, placeholder_text_color=couleur1,
                                  text_color=couleur1, width=205)
    denivele_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))

    rpe_label = ctk.CTkLabel(master=frame_champs3, text="RPE : 1", font=(font_principale, taille2), text_color=couleur_fond)
    rpe_label.pack(expand=True, fill="x", side="left", padx=12)
    def valeur_rpe(valeur):
        rpe_label.configure(text=f"RPE : {valeur:.0f}")
    rpe_entry = ctk.CTkSlider(master=frame_champs3, width=500, height=30, from_= 1, to= 10, number_of_steps= 9, command=valeur_rpe,
                              progress_color=couleur_fond, button_color=couleur_fond, button_hover_color=couleur2_hover,
                              corner_radius=5, button_length=20, fg_color=couleur1, 
                              # La variable DoubleVar met la valeur du RPE √† 1
                              variable=ctk.DoubleVar(value=1))
    rpe_entry.pack(expand=True, fill="x", side="left", padx=12)

    type_entry = ctk.CTkComboBox(master=frame_champs4, values=options_type, font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    type_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    type_entry.set("Type d'entra√Æ.")
    fatigue_entry = ctk.CTkComboBox(master=frame_champs4, values=list(Options_fatigue.keys()), font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    fatigue_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))
    fatigue_entry.set("Fatigue post-entra√Æ.")

    douleur_entry = ctk.CTkComboBox(master=frame_champs5, values=list(Options_douleur.keys()), font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    douleur_entry.pack(expand=True, fill="both", side="left", padx=(0, 2))
    douleur_entry.set("Douleur post-entra√Æ.")
    climat_entry = ctk.CTkComboBox(master=frame_champs5, values=list(Options_climat.keys()), font=(font_principale, taille2), height=height_expressive, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=310, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    climat_entry.pack(expand=True, fill="both", side="left", padx=(2, 0))
    climat_entry.set("Climat √† l'entra√Æ.")

    muscle_entry = None
    rep_entry = None
    serie_entry = None
    volume_entry = None
    Options_lieu = None
    lieu_entry = None
    matos_entry = None
    humeur_entry = None
    passe_d_entry = None
    score_entry = None
    but_entry = None

    bouton_valider = ctk.CTkButton(master=frame_bouton, text="üíæ Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1, border_color=couleur2, border_width=border1,
                                    font=(font_principale, taille3), width=310,
                            command=lambda : v√©rification_data_de_base_activit√©(account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                            Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                            sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                            rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                            passe_d_entry, score_entry, but_entry, "Libre"))
    bouton_valider.pack(expand=True, fill="both", side="left", padx=(0, 2))
    button_back = ctk.CTkButton(master=frame_bouton, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner1, height=button_height, text_color=couleur1, width=310,
                                    font=(font_principale, taille3), border_width=border2, border_color=couleur2,
                                    command=lambda: [vider_fenetre(app), exercice_accueil(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(expand=True, fill="both", side="left")

    coach_pour_ajouter_un_entra√Ænement(boite, account_id, app, exercice, date_entry, duree_entry, rpe_entry, douleur_entry, fatigue_entry, 
                                       Options_fatigue, Options_douleur, Options_climat, climat_entry, type_entry, 
                                       sport_entry, distance_entry, denivele_entry, allure_entry, vmax_entry, muscle_entry,
                                       rep_entry, serie_entry, volume_entry,Options_lieu, lieu_entry, matos_entry, humeur_entry,
                                       passe_d_entry, score_entry, but_entry, "Libre")

def interface_exercice(account_id, type_de_cat√©gorie, headers, requ√™te_sql, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    global periode_s√©l√©ctionner #global = pour dire que la variable existe en dehors de la fonction et que je vais la modifier
    sidebar_exercice(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    besoin_phrase_coach = True
    try:
        date_debut_p√©riode = date_actuelle - timedelta(days=7)
        p√©riode_pour_requete = date_debut_p√©riode.strftime('%Y-%m-%d')
        curseur.execute("SELECT nom_du_coach, avatar, style_du_coach FROM Coach WHERE account_id = ?", (account_id,))
        ton_coach = curseur.fetchone()
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Une erreur est survenue lors de la r√©cup√©ration des informations du coach.")
        return
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur innatendue s'est produite !")
        return
    if ton_coach:
        nom_du_coach = ton_coach[0]
        avatar_du_coach = ton_coach[1]
        style_du_coach = ton_coach[2]
    else:
        nom_du_coach = None
        avatar_du_coach = None
        style_du_coach = "Bienveillant"
    
    try:
        curseur_coach.execute(f"SELECT {style_du_coach} FROM analyse_activit√©")
        phrase_coach = curseur_coach.fetchone()[0]
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Une erreur est survenue lors de la g√©n√©ration de l'analyse du coach !")
        return
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur innatendue s'est produite !")
        return

    boite_titre = ctk.CTkFrame(master=app, fg_color="transparent", corner_radius=corner3)
    boite_titre.pack(side="top", fill="x", padx=10, pady=10)

    boite = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner2)
    boite.pack(side="top", padx=10, pady=(10, 5))
    boite_semi_header = ctk.CTkFrame(master=boite, fg_color=couleur2, corner_radius=corner2)
    boite_semi_header.pack(expand=True, fill="x", side="left", padx=(2, 10), pady=2)
    boite_semi_header2 = ctk.CTkFrame(master=boite, fg_color=couleur2, corner_radius=corner2)
    boite_semi_header2.pack(expand=True, fill="x", side="left", padx=2, pady=2)
    boite_semi_header3 = ctk.CTkFrame(master=boite, fg_color=couleur2, corner_radius=corner2)
    boite_semi_header3.pack(expand=True, fill="x", side="right", padx=(0, 2), pady=2)

    frame_analyse_coach = ctk.CTkFrame(app, fg_color="transparent", corner_radius=corner1, border_width=border1, border_color=couleur1,
                                       height=125)
    frame_analyse_coach.pack(side="top", padx=10, pady=(5, 0))

    tableau_frame = ctk.CTkScrollableFrame(app, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                              scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(side="top", fill="both", expand=True, padx=10, pady=(2, 10))

    info = ctk.CTkLabel(master=boite_titre, text="Entra√Ænement", font=(font_secondaire, taille1), text_color=couleur_text)
    info.pack()
    
    def mise_mode(choix):
        choix = mode_activit√©.get()
        navigation = {
            "Libre": lambda: [vider_fenetre(app), exercice_libre(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)],
            "Musculation": lambda: [vider_fenetre(app), exercice_musculation(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)],
            "Football": lambda: [vider_fenetre(app), exercice_football(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)],
            "Tous": lambda: [vider_fenetre(app), exercice_accueil(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)],
            "Course": lambda: [vider_fenetre(app), exercice_course(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)]
        }
        app.after(0, navigation[choix])
    mode_activit√© = ctk.CTkSegmentedButton(master=boite_semi_header, values=["Tous", "Libre", "Course", "Musculation", "Football"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner2, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(expand=True, fill="x", side="right", padx=(2, 0), pady=5)
    mode_activit√©.set(type_de_cat√©gorie)

    options_periode = {"1 semaine": 7, "1 mois": 30, "3 mois": 90, "6 mois": 180, "1 an": 365, "Tout voir (non recommand√©)": 9999}
    combo_periode = ctk.CTkComboBox(master=boite_semi_header2, values=list(options_periode.keys()), font=(font_principale, taille2), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur_fond, button_color=couleur_fond, fg_color=couleur_fond,
                                    corner_radius=corner1, width=200, dropdown_fg_color=couleur_fond, dropdown_font=(font_principale, taille2),
                                    dropdown_hover_color = couleur2_hover, text_color=couleur1, dropdown_text_color=couleur1)
    combo_periode.pack(expand=True, fill="x", side="left", padx=2, pady=5)
    def avoir_periode(selection_text, options_dict):
        jours_a_soustraire = options_dict[selection_text]
        date_debut = date_actuelle - timedelta(days=jours_a_soustraire)
        return date_debut.strftime('%Y-%m-%d')
    
    button_supprimer = ctk.CTkButton(master=boite_semi_header3, text="üóëÔ∏è Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=lambda: supprimer_entra√Ænement(account_id, avoir_periode(combo_periode.get(), options_periode), app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre))
    button_supprimer.pack(expand=True, fill="x", side="right", padx=(2, 5), pady=5)
    button_creer_activite = ctk.CTkButton(master=boite_semi_header3, text="‚ûï Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner1, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                        command=lambda: [vider_fenetre(app), ajouter_entra√Ænement_libre(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_creer_activite.pack(expand=True, fill="x", side="right", padx=2, pady=5)
    
    if type_de_cat√©gorie == "Course" or type_de_cat√©gorie == "Football" or type_de_cat√©gorie == "Musculation":
        wraplength_tableau = 110
        padx_tableau = 3
        conversion_format_date = 0
    else:
        wraplength_tableau = 140
        padx_tableau = 3
        conversion_format_date = 1
        
    if type_de_cat√©gorie == "Course":
        recherche = "course"
        mode = "de course "
        data_rechercher = "dur√©e, distance, d√©nivel√©"
        parametre_rechercher = "account_id = ? AND cat√©gorie = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
        resultat_rechercher = (account_id, recherche, p√©riode_pour_requete)
    elif type_de_cat√©gorie == "Football":
        recherche = "football"
        mode = "de football "
        data_rechercher = "dur√©e, but, passe_d√©cisive"
        parametre_rechercher = "account_id = ? AND cat√©gorie = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
        resultat_rechercher = (account_id, recherche, p√©riode_pour_requete)
    elif type_de_cat√©gorie == "Musculation":
        recherche = "musculation"
        mode = "de musculation "
        data_rechercher = "dur√©e, r√©p√©titions, s√©rie, volume"
        parametre_rechercher = "account_id = ? AND cat√©gorie = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
        resultat_rechercher = (account_id, recherche, p√©riode_pour_requete)
    elif type_de_cat√©gorie == "Libre":
        recherche = "libre"
        mode = "avec le mode libre "
        data_rechercher = "dur√©e, rpe, distance, d√©nivel√©"
        parametre_rechercher = "account_id = ? AND cat√©gorie = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
        resultat_rechercher = (account_id, recherche, p√©riode_pour_requete)
    else:
        data_rechercher = "dur√©e, rpe"
        mode = ""
        parametre_rechercher = "account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
        resultat_rechercher = (account_id, p√©riode_pour_requete)

    try:
        curseur.execute(f"SELECT {data_rechercher} FROM Historique_activit√© WHERE {parametre_rechercher}", resultat_rechercher)
        stats = curseur.fetchall()
        if stats is not None:
            if type_de_cat√©gorie == "Course":
                total_dur√©e = sum([statistique[0] for statistique in stats if statistique[0] is not None])
                total_distance = sum([statistique[1] for statistique in stats if statistique[1] is not None])
                total_d√©nivel√© = sum([statistique[2] for statistique in stats if statistique[2] is not None])
                nombre_activit√©s = len(stats)
                analyse = f"Au cours des sept derniers jours, tu as effectu√© {total_dur√©e:.0f} minutes d'entra√Ænement en {nombre_activit√©s:.0f} entra√Ænements."\
                          f" Ta distance totale est de {total_distance:.2f} km avec un d√©nivel√© total de {total_d√©nivel√©:.0f} m."
            elif type_de_cat√©gorie == "Football":
                total_dur√©e = sum([statistique[0] for statistique in stats if statistique[0] is not None])
                total_but = sum([statistique[1] for statistique in stats if statistique[1] is not None])
                total_passe_d√©cisive = sum([statistique[2] for statistique in stats if statistique[2] is not None])
                nombre_activit√©s = len(stats)
                analyse = f"Au cours des sept derniers jours, tu as effectu√© {total_dur√©e:.0f} minutes d'entra√Ænement en {nombre_activit√©s:.0f} entra√Ænements."\
                          f" Tu as marqu√© {total_but:.0f} buts et r√©alis√© {total_passe_d√©cisive:.0f} passes d√©cisives."
            elif type_de_cat√©gorie == "Musculation":
                total_dur√©e = sum([statistique[0] for statistique in stats if statistique[0] is not None])
                total_r√©p√©titions = sum([statistique[1] for statistique in stats if statistique[1] is not None])
                total_s√©ries = sum([statistique[2] for statistique in stats if statistique[2] is not None])
                total_volume = sum([statistique[3] for statistique in stats if statistique[3] is not None])
                nombre_activit√©s = len(stats)
                analyse = f"Au cours des sept derniers jours, tu as effectu√© {total_dur√©e:.0f} minutes d'entra√Ænement en {nombre_activit√©s:.0f} entra√Ænements."\
                          f" Tu as r√©alis√© {total_r√©p√©titions:.0f} r√©p√©titions en {total_s√©ries:.0f} s√©ries pour un volume total de {total_volume:.0f} kg."
            elif type_de_cat√©gorie == "Libre":  
                total_dur√©e = sum([statistique[0] for statistique in stats if statistique[0] is not None])
                total_rpe = sum([statistique[1] for statistique in stats if statistique[1] is not None])
                total_distance = sum([statistique[2] for statistique in stats if statistique[2] is not None])
                total_d√©nivel√© = sum([statistique[3] for statistique in stats if statistique[3] is not None])
                nombre_activit√©s = len(stats)
                moyenne_rpe = total_rpe / nombre_activit√©s if nombre_activit√©s > 0 else 0
                analyse = f"Au cours des sept derniers jours, tu as effectu√© {total_dur√©e:.0f} minutes d'entra√Ænement en {nombre_activit√©s:.0f} entra√Ænements."\
                          f" Ton RPE moyen cette semaine est de {moyenne_rpe:.1f}. Ta distance totale est de {total_distance:.2f} km avec un d√©nivel√© total de {total_d√©nivel√©:.0f} m"
            else:
                total_dur√©e = sum([statistique[0] for statistique in stats if statistique[0] is not None])
                total_rpe = sum([statistique[1] for statistique in stats if statistique[1] is not None])
                nombre_activit√©s = len(stats)
                moyenne_rpe = total_rpe / nombre_activit√©s if nombre_activit√©s > 0 else 0
                analyse = f"Au cours des sept derniers jours, tu as effectu√© {total_dur√©e:.0f} minutes d'entra√Ænement en {nombre_activit√©s:.0f} entra√Ænements."\
                          f" Ton RPE moyen cette semaine est de {moyenne_rpe:.1f}."
        else:
            total_dur√©e = 0
            moyenne_rpe = 0
            nombre_activit√©s = 0
            total_distance = 0
            total_d√©nivel√© = 0
            total_but = 0
            total_passe_d√©cisive = 0
            total_r√©p√©titions = 0
            total_s√©ries = 0
            total_volume = 0
        if nombre_activit√©s == 0:
            besoin_phrase_coach = None
            analyse = f"Tu n'as pas encore enregistr√© d'entra√Ænement {mode}cette semaine. Commence d√®s maintenant pour que je puisse analyser ta semaine d'entra√Ænement !" \
            " N'oublie pas que la r√©gularit√© est la cl√© du succ√®s ! üí™"
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Une erreur est survenue lors de la r√©cup√©ration des informations du coach.")
        return
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur innatendue s'est produite !")
        return
        
    label_coach1 = ctk.CTkLabel(frame_analyse_coach, text=f"{avatar_du_coach if avatar_du_coach is not None else "üë®"} {nom_du_coach if nom_du_coach else "JRM Coach"}", wraplength=975, font=(font_principale, taille2), 
                                text_color=couleur1, justify="left")
    label_coach1.pack(padx=12, pady=(12, 4), anchor="w")
    label_coach2 = ctk.CTkLabel(frame_analyse_coach, 
                                text=f"{analyse} {phrase_coach if besoin_phrase_coach is not None else ""}", 
                                wraplength=1000, justify="left", font=(font_principale, taille3), text_color=couleur1)
    label_coach2.pack(padx=12, pady=(4, 12), anchor="w")

    def mettre_a_jour_historique(selection):
        global periode_s√©l√©ctionner
        periode_s√©l√©ctionner = selection
        for widget in tableau_frame.winfo_children():
            widget.grid_remove()
        try:
            jours_a_soustraire = options_periode[selection]
            date_debut = date_actuelle - timedelta(days=jours_a_soustraire)
            p√©riode_str_pour_requete = date_debut.strftime('%Y-%m-%d')
            if type_de_cat√©gorie == "Tous":
                curseur.execute(f"{requ√™te_sql}", (account_id, p√©riode_str_pour_requete))
                activites = curseur.fetchall()
            else:
                curseur.execute(f"{requ√™te_sql}", (account_id, recherche, p√©riode_str_pour_requete))
                activites = curseur.fetchall()

            for colonne, header_text in enumerate(headers):        
                header_label = ctk.CTkButton(tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                    fg_color=couleur_fond, corner_radius=corner2, text_color=couleur1,
                                    height=40, border_width=border2, border_color=couleur2, hover_color=couleur_fond)
                header_label.grid(row=0, column=colonne, padx=padx_tableau, pady=15)
                tableau_frame.grid_columnconfigure(colonne, weight=1)

            if activites:
                for ligne, activite in enumerate(activites):
                    for colonne, data in enumerate(activite):

                        if colonne == conversion_format_date:
                            data = datetime.strptime(str(data), '%Y-%m-%d').strftime('%d-%m-%Y')

                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=wraplength_tableau)
                        label.grid(row=ligne + 1, column=colonne, padx=padx_tableau, pady=15, sticky="ew")
            else:
                pas_donnees = ctk.CTkLabel(master=tableau_frame, text="Aucune activit√© enregistr√©e pour cette p√©riode.", font=(font_principale, taille1),
                                           text_color=couleur_text)
                pas_donnees.grid(row=1, column=0, columnspan=len(headers), pady=20)
        except sqlite3.Error as e:
            messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de ton historique !")
            return
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
            return
    combo_periode.configure(command=mettre_a_jour_historique)
    combo_periode.set(periode_s√©l√©ctionner)
    mettre_a_jour_historique(periode_s√©l√©ctionner)

def exercice_course(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    requ√™te_sql = "SELECT date_activit√©, dur√©e, rpe, type, distance, allure, d√©nivel√©, vitesse_max FROM Historique_activit√© WHERE account_id = ?  AND cat√©gorie = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
    headers = ["Date", "Dur√©e", "RPE", "Type", "Distance", "Allure", "D√©nivel√©", "Vmax"]
    interface_exercice(account_id, "Course", headers, requ√™te_sql, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)

def exercice_football(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    requ√™te_sql = "SELECT date_activit√©, dur√©e, rpe, type, humeur, but, passe_d√©cisive, score FROM Historique_activit√© WHERE account_id = ?  AND cat√©gorie = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
    headers = ["Date", "Dur√©e", "RPE", "Type", "Humeur", "But", "Passe D", "Score"]
    interface_exercice(account_id, "Football", headers, requ√™te_sql, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)

def exercice_musculation(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    requ√™te_sql = "SELECT date_activit√©, dur√©e, rpe, √©quipement, muscle_travaill√©, lieu, r√©p√©titions, s√©rie, volume FROM Historique_activit√© WHERE account_id = ? AND cat√©gorie = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
    headers = ["Date", "Dur√©e", "RPE", "Type", "Muscle", "Lieu", "R√©p", "S√©rie", "Volume"]
    interface_exercice(account_id, "Musculation", headers, requ√™te_sql, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)

def exercice_libre(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    requ√™te_sql = "SELECT sport, date_activit√©, dur√©e, rpe, type, distance, d√©nivel√© FROM Historique_activit√© WHERE account_id = ?  AND cat√©gorie = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
    headers = ["Sport", "Date", "Dur√©e", "RPE", "Type", "Distance", "D√©nivel√©"]
    interface_exercice(account_id, "Libre", headers, requ√™te_sql, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)

def exercice_accueil(account_id, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    requ√™te_sql = "SELECT sport, date_activit√©, dur√©e, rpe, ROUND(charge, 1) FROM Historique_activit√© WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© DESC"
    headers = ["Sport", "Date", "Dur√©e", "RPE", "Charge d'entra√Ænement"]
    try:
        curseur.execute("SELECT statut FROM Auto_connect")
        result_statut = curseur.fetchone()
        if not result_statut:
            curseur.execute("INSERT INTO Auto_connect (statut) VALUES (?)", (account_id,))
            con.commit()
        else:  
            curseur.execute("UPDATE Auto_connect SET statut = ?", (account_id,))
            con.commit()
    except sqlite3.Error as e:
        pass
    except Exception as e:
        pass
    interface_exercice(account_id, "Tous", headers, requ√™te_sql, app, sidebar_exercice, exercice, charge_entra√Ænement, predicteur_temps, parametre)
