from app_ressource import * 
from update_database import con, curseur
from aide_app import aide_objectif, aide_comp√©tition


def verifier_pause(account_id):
    #AND date_fin IS NULL = Cible uniquement les pause non termin√©s.
    curseur.execute("""SELECT type FROM Pauses_v2 WHERE account_id = ? AND date_fin IS NULL""", (account_id,))
    result = curseur.fetchone()
    return result[0] if result else None

def activer_pause(account_id, type_pause):
    try:
        curseur.execute("SELECT type FROM Pauses WHERE account_id = ?", (account_id,))
        result = curseur.fetchone()
        if result is not None:
            curseur.execute("UPDATE Pauses SET type = ? WHERE account_id = ?", (type_pause, account_id))
            con.commit()
            messagebox.showinfo("Enregistr√©", f"Pause {type_pause} activ√©e !")
        else:
            curseur.execute("INSERT INTO Pauses (account_id, type) VALUES (?, ?)", (account_id, type_pause))
            con.commit()
            messagebox.showinfo("Enregistr√©", f"Pause {type_pause} activ√©e !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", f"Erreur de base de donn√©es lors de l'activation de la pause {type_pause}.")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def arreter_pause(account_id):
    try:
        curseur.execute("UPDATE Pauses SET type = NULL WHERE account_id = ?", (account_id,))
        con.commit()
        messagebox.showinfo("Enregistr√©", "Reprise d'activit√© enregistr√©e ! Les analyses sont d√©sormais activ√©es !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'activation de la reprise d'activit√©.")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def ajouter_comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=(20, 10))
    frame_tout = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner1)
    frame_tout.pack()
    frame1 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame1.pack(pady=(10, 5), padx=10)
    frame2 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame2.pack(pady=(5, 5), padx=10)
    frame3 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame3.pack(pady=(5, 10), padx=10)
    frame4 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame4.pack(pady=20)

    Titre = ctk.CTkLabel(master=frame ,text="Ajouter une comp√©tition", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20, side="left")

    option = ["√âv√©nement Principal", "√âv√©nement Secondaire", "√âv√©nement tertiaire"]
    app.bind('<Return>', lambda event: sql_ajout√©(account_id))

    date_entry = ctk.CTkEntry(master=frame1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=(0, 5))    
    sport_entry = ctk.CTkEntry(master=frame1, placeholder_text="Sport", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="right", padx=(5, 0))

    nom_entry = ctk.CTkEntry(master=frame2, placeholder_text="Nom de la comp√©tition", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    nom_entry.pack(side="left", padx=(0, 5))
    objectif_entry = ctk.CTkEntry(master=frame2, placeholder_text="Objectif", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    objectif_entry.pack(side="right", padx=(5, 0))

    lieu_entry = ctk.CTkEntry(master=frame3, placeholder_text="Lieu (optionnel)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    lieu_entry.pack(side="left", padx=(0, 5))
    priorite_entry = ctk.CTkComboBox(master=frame3, values=option, font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    priorite_entry.pack(side="right", padx=(5, 0))
    priorite_entry.set("Priorit√©")

    def sql_ajout√©(account_id):
        nom = nom_entry.get().strip()
        date_str = date_entry.get().strip()
        sport = sport_entry.get().strip()
        objectif = objectif_entry.get().strip()
        lieu_avant = lieu_entry.get().strip()
        priorit√©_avant = priorite_entry.get().strip()
        if priorit√©_avant == "Priorit√©":
            priorit√© = None
        else:
            priorit√© = priorit√©_avant
        if not lieu_avant :
            lieu = None
        else:
            lieu = lieu_avant

        if not nom:
            messagebox.showerror("Erreur", "Le nom de la comp√©tition ne peut pas √™tre vide !")
            return
        if not date_str:
            messagebox.showerror("Erreur", "La date de la comp√©tition ne peut pas √™tre vide !")
            return
        if not sport:
            messagebox.showerror("Erreur", "Le sport de la comp√©tition ne peut pas √™tre vide !")
            return
        if not objectif:
            messagebox.showerror("Erreur", "L'objectif de la comp√©tition ne peut pas √™tre vide !")
            return
        try:
            date_conversion = datetime.strptime(date_str, '%d-%m-%Y')
            date = date_conversion.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur de format de date", "La date doit √™tre au format JJ-MM-AAAA !")
            return
        else:
            try:
                curseur.execute("INSERT INTO Comp√©tition (account_id, nom, date, sport, objectif, lieu, priorit√©) VALUES (?, ?, ?, ?, ?, ?, ?)", (account_id, nom, date, sport, objectif, lieu, priorit√©))
                con.commit()
                messagebox.showinfo("Enregistr√©", "Ta comp√©tition a √©t√© enregistr√©, bonne chance !")
                vider_fenetre(app)
                comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de la comp√©tition !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_enregistrer = ctk.CTkButton(master=frame4, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: sql_ajout√©(account_id))
    button_enregistrer.pack(side="left", padx=5)
    button_back = ctk.CTkButton(master=frame4, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(side="left", padx=5)

def supprimer_comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(master=app ,text="Supprimer une comp√©tition", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(pady=10)

    app.bind('<Return>', lambda event: supression(account_id))
    choix_entry = ctk.CTkEntry(master=frame1, placeholder_text="ID de la comp√©tition √† supprimer", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=350)
    choix_entry.pack(pady=10, side="left", padx=10)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
        curseur.execute("SELECT id, sport, nom, date, lieu FROM Comp√©tition WHERE account_id = ?", (account_id,))
        result = curseur.fetchall()
        headers = ["ID", "Sport", "Nom", "Date", "Lieu"]
        for col_idx, header_text in enumerate(headers):
            label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
            label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
            tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if result:
            for row_idx, activite in enumerate(result):
                for col_idx, data in enumerate(activite):
                    if col_idx == 3:
                        date = datetime.strptime(str(data), '%Y-%m-%d')
                        data = date.strftime('%d-%m-%Y')
                    label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                    label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
        else:
            pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©.", font=(font_principale, taille2))
            pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)

        def supression(account_id):
            choix = choix_entry.get().strip()
            try:
                choix_id_saisi = int(choix)
                ids_competitions_disponibles = [comp[0] for comp in result]

                if choix_id_saisi in ids_competitions_disponibles:
                    competition_id_db = choix_id_saisi
                    curseur.execute("DELETE FROM Comp√©tition WHERE id = ? AND account_id = ?", (competition_id_db, account_id))
                    con.commit()
                    messagebox.showinfo("Suppression r√©ussie", "Comp√©tition supprim√©e avec succ√®s.")
                    vider_fenetre(app)
                    comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)
                else:
                    messagebox.showerror("Erreur", "L'ID de la comp√©tition saisie n'existe pas ou n'appartient pas √† ton compte !")
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la suppression de la comp√©tition !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes comp√©titions !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: supression(account_id))
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: [vider_fenetre(app), comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_retour.pack(side="left", padx=5, pady=20)

def modifier_comp√©tition_√©tape2(account_id, result_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):    
    id_modifier = result_id[0][0]
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)
    try:
        curseur.execute("SELECT date, sport, nom, objectif, lieu, priorit√© FROM Comp√©tition WHERE id = ? AND account_id = ?",(id_modifier, account_id))
        data_comp√©tition = curseur.fetchall()
        premiere_ligne = data_comp√©tition[0]
        date1 = premiere_ligne[0]
        date_conversion = datetime.strptime(date1, "%Y-%m-%d")
        date_value = date_conversion.strftime("%d-%m-%Y")
        sport_value = premiere_ligne[1]
        nom_value = premiere_ligne[2]
        objectif_value = premiere_ligne[3]
        lieu_value = premiere_ligne[4]
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la modification de ta comp√©tition !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=(20, 10))
    frame_tout = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner1)
    frame_tout.pack()
    frame1 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame1.pack(pady=(10, 5), padx=10)
    frame2 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame2.pack(pady=(5, 5), padx=10)
    frame3 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame3.pack(pady=(5, 10), padx=10)
    frame4 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame4.pack(pady=20)

    Titre = ctk.CTkLabel(master=frame ,text="Modifier une comp√©tition", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20, side="left")

    option = ["√âv√©nement Principal", "√âv√©nement Secondaire", "√âv√©nement tertiaire"]
    app.bind('<Return>', lambda event: sql_ajout√©(account_id))

    date_entry = ctk.CTkEntry(master=frame1, placeholder_text=f"{date_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="left", padx=(0, 5))    
    sport_entry = ctk.CTkEntry(master=frame1, placeholder_text=f"{sport_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="right", padx=(5, 0))

    nom_entry = ctk.CTkEntry(master=frame2, placeholder_text=f"{nom_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    nom_entry.pack(side="left", padx=(0, 5))
    objectif_entry = ctk.CTkEntry(master=frame2, placeholder_text=f"{objectif_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    objectif_entry.pack(side="right", padx=(5, 0))

    lieu_entry = ctk.CTkEntry(master=frame3, placeholder_text=f"{lieu_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    lieu_entry.pack(side="left", padx=(0, 5))
    priorite_entry = ctk.CTkComboBox(master=frame3, values=option, font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    priorite_entry.pack(side="right", padx=(5, 0))
    priorite_entry.set("Priorit√©")

    def sql_ajout√©(account_id):
        nom = nom_entry.get().strip()
        date_str = date_entry.get().strip()
        sport = sport_entry.get().strip()
        objectif = objectif_entry.get().strip()
        lieu = lieu_entry.get().strip()
        priorit√© = priorite_entry.get().strip()

        if not sport:
            sport = sport_value
        if not date_str:
            date_str = date_value
        if not objectif:
            objectif = objectif_value
        if not nom:
            nom = nom_value
        if not lieu:
            lieu = lieu_value

        if priorit√© == "Priorit√©":
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Priorit√©' !")
            return
        try:
            date_conversion = datetime.strptime(date_str, '%d-%m-%Y')
            date = date_conversion.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur de format de date", "La date doit √™tre au format JJ-MM-AAAA !")
            return
        else:
            try:
                curseur.execute("UPDATE Comp√©tition SET nom = ?, date = ?, sport = ?, objectif = ?, lieu = ?, priorit√© = ? WHERE id = ? AND account_id = ?", 
                                (nom, date, sport, objectif, lieu, priorit√©, id_modifier, account_id))
                con.commit()
                messagebox.showinfo("Enregistr√©", "Ta comp√©tition a √©t√© modifi√©e avec succ√®s !")
                vider_fenetre(app)
                comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la modification de la comp√©tition !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_enregistrer = ctk.CTkButton(master=frame4, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: sql_ajout√©(account_id))
    button_enregistrer.pack(side="left", padx=5)
    button_back = ctk.CTkButton(master=frame4, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), modifier_comp√©tition_√©tape1(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(side="left", padx=5)
    aide_comp√©tition(account_id)

def modifier_comp√©tition_√©tape1(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(master=app ,text="Modifier une comp√©tition", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(padx=50, pady=(20, 0))

    app.bind('<Return>', lambda event: valider(account_id))
    choix_entry = ctk.CTkEntry(frame1, placeholder_text="ID de la comp√©tition √† modifier", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=300)
    choix_entry.pack(pady=10, side="left", padx=5)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
        curseur.execute("SELECT id, nom, date, sport, lieu, priorit√© FROM Comp√©tition WHERE account_id = ?", (account_id,))
        result = curseur.fetchall()
        headers = ["ID", "Nom", "Date", "Sport", "Lieu", "Priorit√©"]

        for col_idx, header_text in enumerate(headers): #_idx= index de colonne
            label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                 fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                 height=40, wraplength=130)
            label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
            tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if result:
            for row_idx, activite in enumerate(result):
                for col_idx, data in enumerate(activite):
                    if col_idx == 2:
                        date = datetime.strptime(data, '%Y-%m-%d')
                        data = date.strftime('%d-%m-%Y')
                    label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                         text_color=couleur_text, wraplength=130)
                    label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
        else:
            pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucune comp√©tition futur n'a √©t√© enregistr√©", font=(font_principale, taille1))
            pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)

        def valider(account_id):
            choix = choix_entry.get().strip()
            try:
                if not choix:
                    messagebox.showerror("Erreur", "ID ne peut pas √™tre vide ! Merci de saisir un identifiant !")
                try:
                    id = int(choix)
                    if id < 0:
                        messagebox.showerror("Erreur", "ID doit √™tre un nombre entier positif !")
                        return
                except:
                    messagebox.showerror("Erreur", "ID doit √™tre un nombre entier positif !")
                    return

                curseur.execute("SELECT id FROM Comp√©tition WHERE id = ? AND account_id = ?", (id, account_id))
                result_id = curseur.fetchall()
                if result_id:
                    vider_fenetre(app)
                    modifier_comp√©tition_√©tape2(account_id, result_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)
                else:
                    messagebox.showerror("Erreur", "ID de l'objectif saisi n'existe pas ou n'appartient pas √† ton compte !")
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la modification de la comp√©tition !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes comp√©titions !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, veuillez r√©essayer !")
    button_check = ctk.CTkButton(master=frame_boutons, text="Suivant", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: valider(account_id))
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_retour.pack(side="left", padx=5, pady=20)

def toute_comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(master=app, text="Toutes les comp√©titions", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=(25, 10))

    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
            curseur.execute("SELECT nom, date, sport, objectif, lieu, priorit√© FROM Comp√©tition WHERE account_id = ? ORDER BY date ASC", (account_id,))
            comp√©tition_result = curseur.fetchall()

            headers = ["Nom", "Date", "Sport", "Objectif", "Lieu", "Priorit√©"]

            for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=15, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)

            if comp√©tition_result:
                for row_idx, activite in enumerate(comp√©tition_result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=15, pady=15, sticky="ew")
            else:
                pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucune comp√©tition n'a √©t√© enregistr√©e.", font=(font_principale, taille1))
                pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes comp√©titions !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_retour = ctk.CTkButton(master=app, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_retour.pack(padx=10, pady=20)

def comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=20)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(20, 5))
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Charge d'entra√Ænement":
            app.after(0, lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
        elif choix == "Objectif":
            app.after(0, lambda: [vider_fenetre(app), objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        elif choix == "Comp√©tition":
            app.after(0, lambda: [vider_fenetre(app), comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        else:
            app.after(0, lambda: [vider_fenetre(app), indulgence_de_course(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Charge d'entra√Ænement", "Indulgence de course", "Objectif", "Comp√©tition"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Comp√©tition")
    button_autre = ctk.CTkButton(master=navbar, text="üîö Toutes les comp√©titions", fg_color=couleur2, hover_color=couleur2_hover,
                                    font=(font_principale, taille3), text_color=couleur1, height=button_height, corner_radius=corner2,
                                    width=260,
                                    command=lambda: [vider_fenetre(app), toute_comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_autre.pack(side="left", padx=10)

    button_ajouter = ctk.CTkButton(master=frame_boutons, text="‚ûï  Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                           command=lambda: [vider_fenetre(app), ajouter_comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_ajouter.pack(side="left", padx=2)
    button_modifier = ctk.CTkButton(master=frame_boutons, text="‚úèÔ∏è  Modifier", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                           command=lambda: [vider_fenetre(app), modifier_comp√©tition_√©tape1(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_modifier.pack_forget()
    button_delete = ctk.CTkButton(master=frame_boutons, text="üóëÔ∏è  Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                           command=lambda: [vider_fenetre(app), supprimer_comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_delete.pack_forget()
    try:
            curseur.execute("SELECT nom, date, sport, objectif, lieu, priorit√© FROM Comp√©tition WHERE account_id = ? AND date >= ? ORDER BY date ASC", (account_id, date_actuelle))
            comp√©tition_result = curseur.fetchall()

            headers = ["Nom", "Date", "Sport", "Objectif", "Lieu", "Priorit√©"]

            for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=15, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)

            if comp√©tition_result:
                for row_idx, activite in enumerate(comp√©tition_result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=15, pady=15, sticky="ew")
                button_modifier.pack(side="left", padx=2)
                button_delete.pack(side="left", padx=2)
            else:
                pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucune comp√©tition futur n'a √©t√© enregistr√©e.", font=(font_principale, taille1))
                pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes comp√©titions !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def ajouter_objectif(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=(20, 10))
    frame_tout = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner1)
    frame_tout.pack()
    frame1 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame1.pack(pady=(10, 5), padx=10)
    frame2 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame2.pack(pady=(5, 5), padx=10)
    frame3 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame3.pack(pady=(5, 10), padx=10)
    frame4 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame4.pack(pady=20)

    options_statut = {"Pas encore d√©marr√©":"Pas encore d√©marr√©", "En cours": "En cours", "Atteint" : "Atteint", "Non-atteint" : "Non-atteint"}
    options_niveau = {"D√©butant": "D√©butant", "Fondations": "Fondations", "Interm√©diaire" : "Interm√©diaire", "Avanc√©": "Avanc√©", "Expert": "Expert", "Ma√Ætrise": "Ma√Ætrise"}
    Titre = ctk.CTkLabel(master=frame ,text="Ajouter un objectif", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    app.bind('<Return>', lambda event: sql_ajout√©(account_id))
    sport_entry = ctk.CTkEntry(master=frame1, placeholder_text="Sport", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="left", padx=(0, 5))
    date_entry = ctk.CTkEntry(master=frame1, placeholder_text="Date (JJ-MM-AAAA)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="right", padx=(5, 0))

    objectif_entry = ctk.CTkEntry(master=frame2, placeholder_text="Objectif", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    objectif_entry.pack(side="left", padx=(0, 5))
    fr√©quence_entry = ctk.CTkEntry(master=frame2, placeholder_text="Fr√©quence (ex: 2x/semaine)", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    fr√©quence_entry.pack(side="right", padx=(5, 0))

    niveau_entry = ctk.CTkComboBox(master=frame3, values=list(options_niveau.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    niveau_entry.pack(side="left", padx=(0, 5))
    niveau_entry.set("Niveau actuel")
    statut_entry = ctk.CTkComboBox(master=frame3, values=list(options_statut.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    statut_entry.pack(side="right", padx=(5, 0))
    statut_entry.set("Statut de l'objectif")

    def sql_ajout√©(account_id):
        sport = sport_entry.get().strip()
        date_str = date_entry.get().strip()
        objectif = objectif_entry.get().strip()
        fr√©quence = fr√©quence_entry.get().strip()
        niveau_choisi = niveau_entry.get()
        niveau = niveau_entry.get().strip()
        statut_choisi = statut_entry.get()
        statut = statut_entry.get().strip()

        if niveau_choisi == "Niveau actuel":
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Niveau actuel' !")
            return
        if statut_choisi == "Statut de l'objectif":
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Statut de l'objectif' !")
            return
        if not sport:
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Sport' !")
            return
        if not date_str:
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Date' !")
            return
        if not objectif:
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Objectif' !")
            return
        if not fr√©quence:
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Fr√©quence' !")
            return
        if not niveau:
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Niveau actuel' !")
            return
        if not statut:
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Statut de l'objectif' !")
            return
        try:
            date_conversion = datetime.strptime(date_str, '%d-%m-%Y')
            date = date_conversion.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur", "La date doit √™tre au format JJ-MM-AAAA !")
            return
        else:
            try:
                curseur.execute("INSERT INTO Objectif (account_id, sport, date, objectif, fr√©quence, niveau_d√©but, statut) VALUES (?, ?, ?, ?, ?, ?, ?)", (account_id, sport, date, objectif, fr√©quence, niveau, statut))
                con.commit()
                messagebox.showinfo("Enregistr√©", "Ton objectif a √©t√© enregistr√©, bonne chance !")
                vider_fenetre(app)
                objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de l'ajout de ton objectif !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_enregistrer = ctk.CTkButton(master=frame4, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                        command=lambda: sql_ajout√©(account_id))
    button_enregistrer.pack(side="left", padx=5)
    button_back = ctk.CTkButton(master=frame4, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(side="left", padx=5)

def modifier_objectif_√©tape2(account_id, result_id, app,sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):    
    id_modifier = result_id[0][0]
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)
    try:
        curseur.execute("SELECT date, objectif, fr√©quence, sport FROM Objectif WHERE id = ? AND account_id = ?",(id_modifier, account_id))
        data_objectif = curseur.fetchall()
        premiere_ligne = data_objectif[0]
        date1 = premiere_ligne[0]
        date_conversion = datetime.strptime(date1, "%Y-%m-%d")
        date_value = date_conversion.strftime("%d-%m-%Y")
        objectif_value = premiere_ligne[1]
        frequence_value = premiere_ligne[2]
        sport_value = premiere_ligne[3]
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la modification de ton objectif !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=(20, 10))
    frame_tout = ctk.CTkFrame(master=app, fg_color=couleur2, corner_radius=corner1)
    frame_tout.pack()
    frame1 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame1.pack(pady=(10, 5), padx=10)
    frame2 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame2.pack(pady=(5, 5), padx=10)
    frame3 = ctk.CTkFrame(master=frame_tout, fg_color=couleur2, corner_radius=corner1)
    frame3.pack(pady=(5, 10), padx=10)
    frame4 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame4.pack(pady=20)

    options_statut = {"Pas encore d√©marr√©":"Pas encore d√©marr√©", "En cours": "En cours", "Atteint" : "Atteint", "Non-atteint" : "Non-atteint"}
    options_niveau = {"D√©butant": "D√©butant", "Fondations": "Fondations", "Interm√©diaire" : "Interm√©diaire", "Avanc√©": "Avanc√©", "Expert": "Expert", "Ma√Ætrise": "Ma√Ætrise"}
    
    Titre = ctk.CTkLabel(master=frame ,text="Modifier un objectif", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    app.bind('<Return>', lambda event: sql_ajout√©(account_id))
    sport_entry = ctk.CTkEntry(master=frame1, placeholder_text=f"{sport_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    sport_entry.pack(side="left", padx=(0, 5))
    date_entry = ctk.CTkEntry(master=frame1, placeholder_text=f"{date_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    date_entry.pack(side="right", padx=(5, 0))

    objectif_entry = ctk.CTkEntry(master=frame2, placeholder_text=f"{objectif_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    objectif_entry.pack(side="left", padx=(0, 5))
    fr√©quence_entry = ctk.CTkEntry(master=frame2, placeholder_text=f"{frequence_value}", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    fr√©quence_entry.pack(side="right", padx=(5, 0))

    niveau_entry = ctk.CTkComboBox(master=frame3, values=list(options_niveau.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    niveau_entry.pack(side="left", padx=(0, 5))
    niveau_entry.set("Level final")
    statut_entry = ctk.CTkComboBox(master=frame3, values=list(options_statut.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    statut_entry.pack(side="right", padx=(5, 0))
    statut_entry.set("Statut de l'objectif")

    def sql_ajout√©(account_id):
        sport = sport_entry.get().strip()
        date_str = date_entry.get().strip()
        objectif = objectif_entry.get().strip()
        fr√©quence = fr√©quence_entry.get().strip()
        niveau_choisi = niveau_entry.get()
        try:
            niveau = options_niveau[niveau_choisi]
        except Exception: 
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Niveau final' !")
            return
        statut_choisi = statut_entry.get()
        try:
            statut = options_statut[statut_choisi]
        except Exception:
            messagebox.showerror("Erreur", "Merci de remplir le champs 'Statut de l'objectif' !")
            return
        if not sport:
            sport = sport_value
        if not date_str:
            date_str = date_value
        if not objectif:
            objectif = objectif_value
        if not fr√©quence:
            fr√©quence = frequence_value
        try:
            date_conversion = datetime.strptime(date_str, '%d-%m-%Y')
            date = date_conversion.strftime('%Y-%m-%d')
        except ValueError:
            messagebox.showerror("Erreur", "La date doit √™tre au format JJ-MM-AAAA !")
            return
        else:
            try:
                curseur.execute("UPDATE Objectif SET sport = ?, date = ?, objectif = ?, fr√©quence = ?, niveau_fin = ?, statut = ? WHERE id = ? AND account_id = ?",
                    (sport, date, objectif, fr√©quence, niveau, statut, id_modifier, account_id))
                con.commit()
                messagebox.showinfo("Enregistr√©", "Ton objectif a √©t√© modifi√© avec succ√®s!")
                vider_fenetre(app)
                objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la modification de ton objectif !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_enregistrer = ctk.CTkButton(master=frame4, text="Enregistrer", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                        command=lambda: sql_ajout√©(account_id))
    button_enregistrer.pack(side="left", padx=5)
    button_back = ctk.CTkButton(master=frame4, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                           command=lambda: [vider_fenetre(app), modifier_objectif_√©tape1(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_back.pack(side="left", padx=5)
    aide_objectif(account_id)

def modifier_objectif_√©tape1(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(master=app ,text="Modifier un objectif", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(padx=50, pady=(20, 0))

    app.bind('<Return>', lambda event: valider(account_id))
    choix_entry = ctk.CTkEntry(frame1, placeholder_text="ID de l'objectif √† modifier", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    choix_entry.pack(pady=10, side="left", padx=5)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
        curseur.execute("SELECT id, sport, date, niveau_d√©but, niveau_fin, statut FROM Objectif WHERE account_id = ?", (account_id,))
        result = curseur.fetchall()
        headers = ["ID", "Sport", "Date", "Level d√©but", "Level fin", "Statut"]

        for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if result:
                for row_idx, activite in enumerate(result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 2:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
        else:
            pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©", font=(font_principale, taille1))
            pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)

        def valider(account_id):
            choix = choix_entry.get().strip()
            try:
                if not choix:
                    messagebox.showerror("Erreur", "ID ne peut pas √™tre vide ! Merci de saisir un identifiant !")
                try:
                    id = int(choix)
                    if id < 0:
                        messagebox.showerror("Erreur", "ID doit √™tre un nombre entier positif !")
                        return
                except:
                    messagebox.showerror("Erreur", "ID doit √™tre un nombre entier positif !")
                    return

                curseur.execute("SELECT id FROM Objectif WHERE id = ? AND account_id = ?", (id, account_id))
                result_id = curseur.fetchall()
                if result_id:
                    vider_fenetre(app)
                    modifier_objectif_√©tape2(account_id, result_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)
                else:
                    messagebox.showerror("Erreur", "ID de l'objectif saisi n'existe pas ou n'appartient pas √† ton compte !")
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la modification de l'objectif !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes objectifs !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, veuillez r√©essayer !")
    button_check = ctk.CTkButton(master=frame_boutons, text="Suivant", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: valider(account_id))
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_retour.pack(side="left", padx=5, pady=20)

def supprimer_objectif(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(master=app ,text="Supprimer un objectif", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=20)

    frame1 = ctk.CTkFrame(master=app, fg_color="transparent")
    frame1.pack(pady=10)

    app.bind('<Return>', lambda event: supression(account_id))
    choix_entry = ctk.CTkEntry(master=frame1, placeholder_text="ID de l'objectif √† supprimer", border_color=couleur1, fg_color=couleur1,
                                  height=entry_height, font=(font_principale, taille3), corner_radius=corner1, placeholder_text_color ="white",
                                  text_color="white", width=275)
    choix_entry.pack(pady=10, side="left", padx=10)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
        curseur.execute("SELECT id, sport, date, objectif, statut FROM Objectif WHERE account_id = ?", (account_id,))
        result = curseur.fetchall()
        headers = ["ID", "Sport", "Date", "Objectif", "Statut"]
        for col_idx, header_text in enumerate(headers):
            label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
            label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
            tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if result:
            for row_idx, activite in enumerate(result):
                for col_idx, data in enumerate(activite):
                    if col_idx == 2:
                        date = datetime.strptime(str(data), '%Y-%m-%d')
                        data = date.strftime('%d-%m-%Y')
                    label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                    label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
        else:
            pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©.", font=(font_principale, taille2))
            pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)

        def supression(account_id):
            choix = choix_entry.get().strip()
            try:
                choix_id_saisi = int(choix)
                ids_objectifs_disponibles = [obj[0] for obj in result]

                if choix_id_saisi in ids_objectifs_disponibles:
                    objectif_id_db = choix_id_saisi
                    curseur.execute("DELETE FROM Objectif WHERE id = ? AND account_id = ?", (objectif_id_db, account_id))
                    con.commit()
                    messagebox.showinfo("Suppression r√©ussie", "Objectif supprim√© avec succ√®s.")
                    vider_fenetre(app)
                    objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)
                else:
                    messagebox.showerror("Erreur", "L'ID de l'objectif saisi n'existe pas ou n'appartient pas √† ton compte !")
            except sqlite3.Error as e:
                messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la suppression de l'objectif !")
            except Exception as e:
                messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes objectifs !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: supression(account_id))
    button_check.pack(side="left", padx=5, pady=20)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                 command=lambda: [vider_fenetre(app), objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_retour.pack(side="left", padx=5, pady=20)

def tout_objectif(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(master=app, text="Tous les objectifs", font=(font_secondaire, taille1))
    Titre.pack(padx=50, pady=(25, 10))

    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)
    try:
            curseur.execute("SELECT sport, date, objectif, fr√©quence, niveau_d√©but, niveau_fin, statut FROM Objectif WHERE account_id = ? ORDER BY date ASC", (account_id,))
            objectif_result = curseur.fetchall()

            headers = ["Sport", "Date", "Objectif", "Fr√©quence", "Level d√©but", "Level fin", "Statut"]

            for col_idx, header_text in enumerate(headers): #_idx= index de colonne
                label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                     fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                     height=40, wraplength=130)
                label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
                tableau_frame.grid_columnconfigure(col_idx, weight=1)
            if objectif_result:
                for row_idx, activite in enumerate(objectif_result):
                    for col_idx, data in enumerate(activite):
                        if col_idx == 1:
                            date = datetime.strptime(data, '%Y-%m-%d')
                            data = date.strftime('%d-%m-%Y')
                        label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                             text_color=couleur_text, wraplength=130)
                        label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
            else:
                pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©.", font=(font_principale, taille1))
                pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes objectifs !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_retour = ctk.CTkButton(master=app, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_retour.pack(padx=10, pady=20)

def objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=20)
    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(20, 5))
    boite3 = ctk.CTkFrame(master=app, fg_color=couleur_fond)
    boite3.pack(side="top", fill="both", expand=True, pady=10)
    frame = ctk.CTkFrame(master=boite3, fg_color=couleur_fond, corner_radius=corner1, border_width=border2, border_color=couleur1)
    frame.pack(fill="both", expand=True, padx=10, pady=10)
    tableau_frame = ctk.CTkScrollableFrame(master=frame, fg_color=couleur_fond, scrollbar_button_color=couleur2, 
                                           scrollbar_button_hover_color=couleur2_hover)
    tableau_frame.pack(fill="both", expand=True, padx=20, pady=5)

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Charge d'entra√Ænement":
            app.after(0, lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
        elif choix == "Objectif":
            app.after(0, lambda: [vider_fenetre(app), objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        elif choix == "Comp√©tition":
            app.after(0, lambda: [vider_fenetre(app), comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        else:
            app.after(0, lambda: [vider_fenetre(app), indulgence_de_course(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Charge d'entra√Ænement", "Indulgence de course", "Objectif", "Comp√©tition"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Objectif")
    button_autre = ctk.CTkButton(master=navbar, text="üîö Tous les objectifs", fg_color=couleur2, hover_color=couleur2_hover,
                                    font=(font_principale, taille3), text_color=couleur1, height=button_height, corner_radius=corner2,
                                    width=260,
                                    command=lambda: [vider_fenetre(app), tout_objectif(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_autre.pack(side="left", padx=10)

    button_ajouter = ctk.CTkButton(master=frame_boutons, text="‚ûï  Ajouter", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), ajouter_objectif(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_ajouter.pack(side="left", padx=2)
    button_modifier = ctk.CTkButton(master=frame_boutons, text="‚úèÔ∏è  Modifier", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), modifier_objectif_√©tape1(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_modifier.pack_forget()
    button_delete = ctk.CTkButton(master=frame_boutons, text="üóëÔ∏è Supprimer", fg_color=couleur2, hover_color=couleur2_hover,
                           corner_radius=corner2, height=button_height, font=(font_principale, taille3),
                           text_color=couleur1,
                           command=lambda: [vider_fenetre(app), supprimer_objectif(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_delete.pack_forget()

    try:
        curseur.execute("SELECT sport, date, objectif, fr√©quence, niveau_d√©but, niveau_fin, statut FROM Objectif WHERE account_id = ? AND date >= ? ORDER BY date ASC", (account_id, date_actuelle))
        objectif_result = curseur.fetchall()

        headers = ["Sport", "Date", "Objectif", "Fr√©quence", "Level d√©but", "Level fin", "Statut"]

        for col_idx, header_text in enumerate(headers): #_idx= index de colonne
            label = ctk.CTkLabel(master=tableau_frame, text=header_text, font=(font_secondaire, taille2),
                                    fg_color=couleur1, corner_radius=corner1, text_color=couleur_text,
                                    height=40, wraplength=130)
            label.grid(row=0, column=col_idx, padx=6, pady=15, sticky="ew")
            tableau_frame.grid_columnconfigure(col_idx, weight=1)
        if objectif_result:
            for row_idx, activite in enumerate(objectif_result):
                for col_idx, data in enumerate(activite):
                    if col_idx == 1:
                        date = datetime.strptime(data, '%Y-%m-%d')
                        data = date.strftime('%d-%m-%Y')
                    label = ctk.CTkLabel(master=tableau_frame, text=str(data if data is not None else "-"), font=(font_principale, taille3),
                                        text_color=couleur_text, wraplength=130)
                    label.grid(row=row_idx + 1, column=col_idx, padx=6, pady=15, sticky="ew")
            button_modifier.pack(side="left", padx=2)
            button_delete.pack(side="left", padx=2)
        else:
            pas_donn√©es = ctk.CTkLabel(master=tableau_frame, text="Aucun objectif futur n'a √©t√© enregistr√©.", font=(font_principale, taille1))
            pas_donn√©es.grid(row=1, column=0, columnspan=len(headers), pady=20)
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors de la r√©cup√©ration de tes objectifs!")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")

def mettre_en_pause_les_analyses_depuis_indulgence(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(master=app ,text="Mettre en pause les analyses", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=50, pady=20)
    info = ctk.CTkLabel(master=app ,text="Si tu as besoin de souffler, ou que tu t'es bless√©, tu peux\nmettre en pause les " \
    "analyses pour te reposer et r√©cup√©rer.", font=(font_principale, taille2))
    info.pack(padx=50, pady=(25, 10))

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=10)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))

    result = verifier_pause(account_id)
    if result == "vacances":
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Ton statut d'entra√Ænement actuel: Vacances", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    elif result == "blessure":
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Ton statut d'entra√Ænement actuel : Blessure", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    elif result == "suspendre":
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Ton statut d'entra√Ænement actuel : Suspendre", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    else:
        info_statut = ctk.CTkLabel(master=frame, text="Ton statut d'entra√Ænement actuel : Actif", font=(font_principale, taille2))
        info_statut.pack(padx=0, pady=10)

    app.bind('<Return>', lambda event: enregistrer_activit√©(account_id))
    options = {"Vacances": "Vacances", "Blessure": "Blessure", "Suspendre": "Suspendre", "Reprendre les analyses": "Reprendre"}
    combo_statut = ctk.CTkComboBox(master=frame, values=list(options.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    combo_statut.pack(pady=10)
    combo_statut.set("S√©l√©ctionne la raison")

    def enregistrer_activit√©(account_id):
        statut_choisi = combo_statut.get()
        statut = options[statut_choisi]
        try:
            if statut == "Vacances":
                activer_pause(account_id, "vacances")
                vider_fenetre(app)
                charge_entra√Ænement(account_id)
            elif statut == "Blessure":
                activer_pause(account_id, "blessure")
                vider_fenetre(app)
                charge_entra√Ænement(account_id)
            elif statut == "Suspendre":
                activer_pause(account_id, "suspendre")
                vider_fenetre(app)
                charge_entra√Ænement(account_id)
            elif statut == "Reprendre":
                arreter_pause(account_id)
                vider_fenetre(app)
                charge_entra√Ænement(account_id)
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: enregistrer_activit√©(account_id))
    button_check.pack(side="left", padx=5, pady=10)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), indulgence_de_course(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_retour.pack(side="left", padx=5, pady=10)

def mettre_en_pause_les_analyses(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)

    Titre = ctk.CTkLabel(master=app ,text="Mettre en pause les analyses", font=(font_secondaire, taille1), text_color=couleur_text)
    Titre.pack(padx=50, pady=20)
    info = ctk.CTkLabel(master=app ,text="Si tu as besoin de souffler, ou que tu t'es bless√©, tu peux\nmettre en pause les " \
    "analyses pour te reposer et r√©cup√©rer.", font=(font_principale, taille2))
    info.pack(padx=50, pady=(25, 10))

    frame = ctk.CTkFrame(master=app, fg_color="transparent")
    frame.pack(pady=10)

    frame_boutons = ctk.CTkFrame(master=app, fg_color="transparent")
    frame_boutons.pack(pady=(0, 10))

    result = verifier_pause(account_id)
    if result == "vacances":
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Ton statut d'entra√Ænement actuel: Vacances", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    elif result == "blessure":
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Ton statut d'entra√Ænement actuel : Blessure", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    elif result == "suspendre":
        info_statut_actif = ctk.CTkLabel(master=frame, text=f"Ton statut d'entra√Ænement actuel : Suspendre", font=(font_principale, taille2))
        info_statut_actif.pack(padx=0, pady=10)
    else:
        info_statut = ctk.CTkLabel(master=frame, text="Ton statut d'entra√Ænement actuel : Actif", font=(font_principale, taille2))
        info_statut.pack(padx=0, pady=10)

    app.bind('<Return>', lambda event: enregistrer_activit√©(account_id))
    options = {"Vacances": "Vacances", "Blessure": "Blessure", "Suspendre": "Suspendre", "Reprendre les analyses": "Reprendre"}
    combo_statut = ctk.CTkComboBox(master=frame, values=list(options.keys()), font=(font_principale, taille3), height=button_height, 
                                    state="readonly", border_width=border1, border_color=couleur1, button_color=couleur1, fg_color=couleur1,
                                    corner_radius=corner2, width=275, dropdown_fg_color=couleur1, dropdown_font=(font_principale, taille3),
                                    dropdown_hover_color = couleur1_hover, text_color="white", dropdown_text_color="white")
    combo_statut.pack(pady=10)
    combo_statut.set("S√©l√©ctionne la raison")

    def enregistrer_activit√©(account_id):
        statut_choisi = combo_statut.get()
        statut = options[statut_choisi]
        try:
            if statut == "Vacances":
                activer_pause(account_id, "vacances")
                vider_fenetre(app)
                charge_entra√Ænement(account_id)
            elif statut == "Blessure":
                activer_pause(account_id, "blessure")
                vider_fenetre(app)
                charge_entra√Ænement(account_id)
            elif statut == "Suspendre":
                activer_pause(account_id, "suspendre")
                vider_fenetre(app)
                charge_entra√Ænement(account_id)
            elif statut == "Reprendre":
                arreter_pause(account_id)
                vider_fenetre(app)
                charge_entra√Ænement(account_id)
        except Exception as e:
            messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    button_check = ctk.CTkButton(master=frame_boutons, text="Valider", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: enregistrer_activit√©(account_id))
    button_check.pack(side="left", padx=5, pady=10)
    button_retour = ctk.CTkButton(master=frame_boutons, text="üîô Retour", fg_color=couleur2, hover_color=couleur2_hover,
                                    corner_radius=corner2, height=button_height, text_color=couleur1,
                                    font=(font_principale, taille3),
                                    command=lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
    button_retour.pack(side="left", padx=5, pady=10)

def indulgence_de_course(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=20)

    D28J = date_actuelle - timedelta(days=28)
    D28J_str = D28J.strftime('%Y-%m-%d')
    curseur.execute("SELECT distance FROM Historique_activit√© WHERE account_id = ? AND cat√©gorie = 'course' AND date_activit√© >= ?", (account_id, D28J_str))
    distance28J = [row[0] for row in curseur.fetchall()]
    distance_moyenne_des_derniers_28_jours = sum(distance28J) / 4 if distance28J else 0.00
    if distance_moyenne_des_derniers_28_jours < 10:
        distance_maximumconseill√©_d√©but = distance_moyenne_des_derniers_28_jours*1.18
        distance_maximumconseill√©_fin = distance_moyenne_des_derniers_28_jours*1.25
    elif 10 <= distance_moyenne_des_derniers_28_jours <= 20:
        distance_maximumconseill√©_d√©but = distance_moyenne_des_derniers_28_jours*1.15
        distance_maximumconseill√©_fin = distance_moyenne_des_derniers_28_jours*1.20
    elif 20 <= distance_moyenne_des_derniers_28_jours <= 40:
        distance_maximumconseill√©_d√©but = distance_moyenne_des_derniers_28_jours*1.12
        distance_maximumconseill√©_fin = distance_moyenne_des_derniers_28_jours*1.15
    elif 40 <= distance_moyenne_des_derniers_28_jours <= 60:
        distance_maximumconseill√©_d√©but = distance_moyenne_des_derniers_28_jours*1.09
        distance_maximumconseill√©_fin = distance_moyenne_des_derniers_28_jours*1.12
    else:
        distance_maximumconseill√©_d√©but = distance_moyenne_des_derniers_28_jours*1.06
        distance_maximumconseill√©_fin = distance_moyenne_des_derniers_28_jours*1.10

    D7J = date_actuelle - timedelta(days=7)
    D7J_str = D7J.strftime('%Y-%m-%d')
    curseur.execute("SELECT distance FROM Historique_activit√© WHERE account_id = ? AND cat√©gorie = 'course' AND date_activit√© >= ?", (account_id, D7J_str))
    distance7J = [row[0] for row in curseur.fetchall()]
    distance_des_derniers_7_jours = sum(distance7J) if distance7J else 0

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if choix == "Charge d'entra√Ænement":
            app.after(0, lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
        elif choix == "Objectif":
            app.after(0, lambda: [vider_fenetre(app), objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        elif choix == "Comp√©tition":
            app.after(0, lambda: [vider_fenetre(app), comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        else:
            app.after(0, lambda: [vider_fenetre(app), indulgence_de_course(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Charge d'entra√Ænement", "Indulgence de course", "Objectif", "Comp√©tition"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover,
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Indulgence de course")
    button_autre = ctk.CTkButton(master=navbar, text="‚è∏Ô∏è Mettre en pause les analyses", fg_color=couleur2, hover_color=couleur2_hover,
                                    font=(font_principale, taille3), text_color=couleur1, height=button_height, corner_radius=corner2,
                                    command=lambda: [vider_fenetre(app), mettre_en_pause_les_analyses_depuis_indulgence(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    button_autre.pack(side="left", padx=10)

    boite_distance_course_gauche = ctk.CTkFrame(master=app, border_width=border2, border_color=couleur1, corner_radius=corner1,
                                             fg_color=couleur_fond)
    boite_distance_course_gauche.pack(fill="both", expand=True, side="left", padx=(40, 10), pady=(30, 40))
    h1_boite_distance_course = ctk.CTkFrame(master=boite_distance_course_gauche, fg_color=couleur_fond)
    h1_boite_distance_course.pack(pady=5)

    boite_analyse_kilom√©trage = ctk.CTkFrame(master=boite_distance_course_gauche, border_width=border2, border_color=couleur1, corner_radius=corner1, fg_color=couleur2)
    boite_analyse_kilom√©trage.pack(fill="both", expand=True, padx=15, pady=5)
    distance_7_jours = ctk.CTkFrame(master=boite_analyse_kilom√©trage, corner_radius=corner1, fg_color=couleur1)
    distance_7_jours.pack(fill="both", expand=True, padx=12, pady=(12, 5))
    distance_maximum = ctk.CTkFrame(master=boite_analyse_kilom√©trage, corner_radius=corner1, fg_color=couleur1)
    distance_maximum.pack(fill="both", expand=True, padx=12, pady=(5, 12))

    boite_statut = ctk.CTkFrame(master=boite_distance_course_gauche, border_width=border2, border_color=couleur1, corner_radius=corner1, fg_color=couleur2)
    boite_statut.pack(fill="both", expand=True, padx=15, pady=(5, 15))
    h1_zone = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    h1_zone.pack(fill="both", expand=True, padx=12, pady=(12, 5))
    interpr√©tation = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    interpr√©tation.pack(fill="both", expand=True, pady=(5, 12), padx=12)

    boite_distance_course_droit = ctk.CTkFrame(master=app, border_width=border2, border_color=couleur1, corner_radius=corner1,
                                             fg_color=couleur_fond)
    boite_distance_course_droit.pack(fill="both", expand=True, side="right", padx=(10, 40), pady=(30, 40))

    boite_statut = ctk.CTkFrame(master=boite_distance_course_droit, border_width=border2, border_color=couleur1, corner_radius=corner1, fg_color=couleur2)
    boite_statut.pack(fill="both", expand=True, pady=15, padx=15)
    distance_moyenne_28J = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    distance_moyenne_28J.pack(fill="both", expand=True, padx=12, pady=(12, 5))
    conseil = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    conseil.pack(fill="both", expand=True, pady=(5, 12), padx=12)
    
    info = ctk.CTkFrame(master=boite_distance_course_droit, corner_radius=corner1, fg_color=couleur1)
    info.pack(fill="both", expand=True, padx=15, pady=(0, 15))

    h1 = ctk.CTkLabel(master=h1_boite_distance_course, font=(font_secondaire, taille2), text="7 derniers jours")
    h1.pack(padx=10, pady=(5, 0))
    distance_7J = ctk.CTkLabel(distance_7_jours, text=f"Distance (7 jours) : {distance_des_derniers_7_jours:.2f} km", font=(font_principale , taille2),
                                    width=300, wraplength=300)
    distance_7J.pack(fill="both", expand=True, padx=10, pady=10)

    distance_moyenne_du_mois = ctk.CTkLabel(distance_moyenne_28J, text=f"Distance moyenne hebdo. (4 semaines) :\n{distance_moyenne_des_derniers_28_jours:.2f} km par semaine", font=(font_principale, taille2),
                                width=300, wraplength=500)
    distance_moyenne_du_mois.pack(fill="both", expand=True, padx=10, pady=10)  
    pause = verifier_pause(account_id)
    if pause == "blessure":
        Distance_maximal_conseill√© = ctk.CTkLabel(distance_maximum, text=f"Distance maximale hebdo. conseill√©e : actuellement en pause", font=(font_secondaire, taille2),
                                        width=300, wraplength=300)
        Distance_maximal_conseill√©.pack(fill="both", expand=True, padx=10, pady=10)
        zone = ctk.CTkLabel(master=h1_zone, text="‚õëÔ∏è Mode blessure : suivi d√©sactiv√©", font=(font_secondaire, taille2),
                                width=300, wraplength=300, text_color="#c60000")
        zone.pack(fill="both", expand=True, padx=10, pady=10)                 
        interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Tu es bless√© pour le moment.", font=(font_principale, taille3),
                                        width=300, wraplength=300)
        interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)      
        conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Prends vraiment le temps de laisser ton corps se r√©g√©n√©rer en profondeur, afin de revenir encore plus fort et plus d√©termin√© que jamais.", font=(font_principale, taille3),
                                    width=300, wraplength=500)
        conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)
    elif pause == "vacances":
        Distance_maximal_conseill√© = ctk.CTkLabel(distance_maximum, text=f"Distance maximale hebdo. conseill√©e : actuellement en pause", font=(font_secondaire, taille2),
                                        width=300, wraplength=300)
        Distance_maximal_conseill√©.pack(fill="both", expand=True, padx=10, pady=10)
        zone = ctk.CTkLabel(master=h1_zone, text="üèñÔ∏è Mode vacances : pas d'analyse !", font=(font_secondaire, taille2),
                                width=300, wraplength=300, text_color="#6AC100")
        zone.pack(fill="both", expand=True, padx=10, pady=10)                 
        interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Tu es actuellement en vacances.", font=(font_principale, taille3),
                                        width=300, wraplength=300)
        interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)      
        conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Profite de cette pause pour te ressourcer, appr√©cier les moments de d√©tente et les repas, et reviens encore plus motiv√© !", font=(font_principale, taille3),
                                    width=300, wraplength=500)
        conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)
    elif pause == "suspendre":
        Distance_maximal_conseill√© = ctk.CTkLabel(distance_maximum, text=f"Distance maximale hebdo. conseill√©e : actuellement en pause", font=(font_secondaire , taille3),
                                        width=300, wraplength=300)
        Distance_maximal_conseill√©.pack(fill="both", expand=True, padx=10, pady=10)
        zone = ctk.CTkLabel(master=h1_zone, text="üí§ Mode suspension activ√© : aucune analyse en cours", font=(font_secondaire, taille2),
                                width=300, wraplength=300, text_color="#6AC100")
        zone.pack(fill="both", expand=True, padx=10, pady=10)                 
        interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Tes analyses sont temporairement en pause pendant ce mode suspension.", font=(font_principale, taille3),
                                        width=300, wraplength=300)
        interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)      
        conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Profite-en pour te reposer sans pression, on reprend les suivis d√®s ton retour √† l‚Äôentra√Ænement !", font=(font_principale, taille3),
                                    width=300, wraplength=500)
        conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)
    else:
        if distance_moyenne_des_derniers_28_jours == 0:
            Distance_maximal_conseill√© = ctk.CTkLabel(distance_maximum, text=f"Distance maximale hebdo. conseill√©e :\nDonn√©es insuffisantes", font=(font_secondaire, taille2),
                                            width=300, wraplength=300)
            Distance_maximal_conseill√©.pack(fill="both", expand=True, padx=10, pady=10)

            zone = ctk.CTkLabel(master=h1_zone, text="üö´ Donn√©es insuffisantes", font=(font_secondaire, taille2),
                                        width=300, wraplength=300, text_color="#c60000")
            zone.pack(fill="both", expand=True, padx=10, pady=10)              
            interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="L'interpr√©tation de votre zone d'indulgence de course ne peut pas √™tre d√©termin√©e.", font=(font_principale, taille3),
                                            width=300, wraplength=300)
            interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)
                    
            conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Pour pouvoir obtenir des interpr√©tations et des conseils de course. Fais une s√©ance de sport pour lancer les analyses et √©valuer ton indulgence de course.", font=(font_principale, taille3),
                                            width=300, wraplength=500)
            conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)
        else:
            Distance_maximal_conseill√© = ctk.CTkLabel(distance_maximum, text=f"Distance maximale hebdo. conseill√©e :\n{distance_maximumconseill√©_d√©but:.1f} et {distance_maximumconseill√©_fin:.1f} km", font=(font_secondaire, taille2),
                                            width=300, wraplength=300)
            Distance_maximal_conseill√©.pack(fill="both", expand=True, padx=10, pady=10)

            if distance_moyenne_des_derniers_28_jours < distance_des_derniers_7_jours < distance_maximumconseill√©_fin:
                zone = ctk.CTkLabel(master=h1_zone, text="üöÄ Zone optimale pour progresser", font=(font_secondaire, taille2),
                                            width=300, wraplength=300, text_color="#00BA47")
                zone.pack(fill="both", expand=True, padx=10, pady=10)              
                interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Tu es en train de progresser en course, bravo ! Tu as fais le plus dur !", font=(font_principale, taille3),
                                                width=300, wraplength=300)
                interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)
                        
                conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Pour continuer √† avancer et voir des r√©sultats sur le long terme, fais en sorte de maintenir ce volume d‚Äôentra√Ænement chaque semaine. C‚Äôest la r√©gularit√© qui te permettra de progresser de mani√®re stable, efficace et id√©al pour √©viter les blessures. Continue comme √ßa !", font=(font_principale, taille3),
                                                width=300, wraplength=500)
                conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)

            elif distance_des_derniers_7_jours > distance_maximumconseill√©_fin:
                zone = ctk.CTkLabel(master=h1_zone, text="ü§ï Zone optimale pour se blesser", font=(font_secondaire, taille2),
                                            width=300, wraplength=300, text_color="#c60000")
                zone.pack(fill="both", expand=True, padx=10, pady=10)              
                interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Ton volume kilom√©trique hebdomadaire est actuellement tr√®s √©lev√© par rapport √† d'habitude.", font=(font_principale, taille3),
                                                width=300, wraplength=300)
                interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)
                        
                conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Prends quelques jours de pause sans courir pour permettre √† ton corps de bien r√©cup√©rer. La course √† pied sollicite √©norm√©ment tes muscles et articulations, et encha√Æner sans repos augmente le risque de blessure. Ce temps de r√©cup√©ration est essentiel pour revenir plus fort et √©viter la surcharge.", font=(font_principale, taille3),
                                                width=300, wraplength=500)
                conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)

            elif distance_des_derniers_7_jours == distance_moyenne_des_derniers_28_jours:
                zone = ctk.CTkLabel(master=h1_zone, text="üò¥ Zone optimale pour stagner", font=(font_secondaire, taille2),
                                            width=300, wraplength=300, text_color="#00C073")
                zone.pack(fill="both", expand=True, padx=10, pady=10)              
                interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Ton volume est stable mais l√©g√®rement trop bas pour progresser. Tu maintiens ton niveau, mais tu risques de plafonner.", font=(font_principale, taille3),
                                                width=300, wraplength=300)
                interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)
                conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Augmente progressivement ton volume hebdomadaire. De petites augmentations r√©guli√®res te permettront de sortir de la stagnation sans te blesser, et de retrouver une dynamique de progression.", font=(font_principale, taille3),
                                                width=300, wraplength=500)
                conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)

            else:
                zone = ctk.CTkLabel(master=h1_zone, text="‚è¨ Zone optimale pour perdre du niveau", font=(font_secondaire, taille2),
                                            width=300, wraplength=300, text_color="#C01802")
                zone.pack(fill="both", expand=True, padx=10, pady=10)              
                interpr√©tation_zone = ctk.CTkLabel(master=interpr√©tation, text="Ton volume kilom√©trique hebdomadaire est actuellement en dessous des niveaux optimaux pour progresser. Tu en fais moins que d'habitude !", font=(font_principale, taille3),
                                                width=300, wraplength=300)
                interpr√©tation_zone.pack(fill="both", expand=True, padx=10, pady=10)
                        
                conseil_pour_progresser = ctk.CTkLabel(master=conseil, text="Si tu restes 3 √† 4 jours sans courir alors que ton corps est habitu√© √† un certain volume d‚Äôentra√Ænement, tu risques de perdre en endurance et en progression. La course √† pied demande une r√©gularit√© pour maintenir tes capacit√©s et continuer √† avancer. Trop r√©duire ton entra√Ænement peut te faire r√©gresser.", font=(font_principale, taille3),
                                                width=300, wraplength=500)
                conseil_pour_progresser.pack(fill="both", expand=True, padx=10, pady=10)

    titre_c_quoi = ctk.CTkLabel(master=info, text="C'est quoi l'indulgence de course ?", font=(font_secondaire, taille2), wraplength=500)
    titre_c_quoi.pack(fill="both", expand=True, pady=(10, 10), padx=10)
    c_quoi = ctk.CTkLabel(master=info, 
                          text="L‚Äôindulgence de course t‚Äôaide √† ajuster ton kilom√©trage des 7 derniers jours pour rester dans une progression optimale, sans d√©passer ta limite. Tu peux ainsi continuer √† t‚Äôam√©liorer tout en r√©duisant les risques de blessure. Cette analyse est un guide, mais n‚Äôoublie jamais d‚Äô√©couter les signaux de ton corps. Une fonctionnalit√© adapt√©e √† tous les niveaux !",
                            font=(font_principale, taille3), wraplength=500)
    c_quoi.pack(fill="both", expand=True, padx=10, pady=(5, 10))

def aide_ajout_activit√©():
    messagebox.showinfo("Aide", "Pour ajouter une activit√©, rends-toi dans l'onglet 'Exercice' dans la barre lat√©rale √† gauche puis appuis sur le bouton 'Ajouter'.")

def charge_d_entra√Ænement(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre):
    sidebar_performance(account_id, app, exercice, charge_entra√Ænement, predicteur_temps, parametre)
    navbar = ctk.CTkFrame(master=app, fg_color="transparent")
    navbar.pack(pady=20)

    fig = None
    canvas = None
    def fermer_graphique_pause(account_id):
        plt.close(fig)
        mettre_en_pause_les_analyses(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)
    def fermer_graphique_mode():    
        nonlocal fig
        if fig:
            plt.close(fig)
            fig = None

    def mise_mode(choix):
        choix = mode_activit√©.get()
        if fig is None:
            if choix == "Charge d'entra√Ænement":
                app.after(0, lambda: [vider_fenetre(app), charge_entra√Ænement(account_id)])
            elif choix == "Indulgence de course":
                app.after(0, lambda: [vider_fenetre(app), indulgence_de_course(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
            elif choix == "Objectif":
                app.after(0, lambda: [vider_fenetre(app), objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
            elif choix == "Comp√©tition":
                app.after(0, lambda: [vider_fenetre(app), comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
        else:
            if choix == "Charge d'entra√Ænement":
                app.after(0, lambda: [fermer_graphique_mode(), vider_fenetre(app), charge_entra√Ænement(account_id)])
            elif choix == "Indulgence de course":
                app.after(0, lambda: [fermer_graphique_mode(), vider_fenetre(app), indulgence_de_course(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
            elif choix == "Objectif":
                app.after(0, lambda: [fermer_graphique_mode(), vider_fenetre(app), objectifs(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
            elif choix == "Comp√©tition":
                app.after(0, lambda: [fermer_graphique_mode(), vider_fenetre(app), comp√©tition(account_id, app, sidebar_performance, exercice, charge_entra√Ænement, predicteur_temps, parametre)])
    mode_activit√© = ctk.CTkSegmentedButton(master=navbar, values=["Charge d'entra√Ænement", "Indulgence de course", "Objectif", "Comp√©tition"],
                                           height=button_height, selected_color=couleur_fond, selected_hover_color=couleur2_hover, 
                                           corner_radius=corner1, command=mise_mode, font=(font_principale, taille3),
                                           fg_color=couleur2, unselected_color=couleur2, unselected_hover_color=couleur2_hover,
                                           text_color=couleur1)
    mode_activit√©.pack(side="left")
    mode_activit√©.set("Charge d'entra√Ænement")
    button_autre = ctk.CTkButton(master=navbar, text="‚è∏Ô∏è Mettre en pause les analyses", fg_color=couleur2, hover_color=couleur2_hover,
                                    font=(font_principale, taille3), text_color=couleur1, height=button_height, corner_radius=corner2,
                                    command=lambda: [vider_fenetre(app), fermer_graphique_pause(account_id)])
    button_autre.pack(side="left", padx=10)

    charge_aigue = 0.0
    charge_chronique = 0.0
    try:
        ca = date_actuelle - timedelta(days=7)
        ca_str = ca.strftime('%Y-%m-%d')
        curseur.execute("SELECT charge FROM Historique_activit√© WHERE account_id = ? AND date_activit√© >= ?", (account_id, ca_str))
        charges_aigue = [row[0] for row in curseur.fetchall()]

        cc = date_actuelle - timedelta(days=28)
        cc_str = cc.strftime('%Y-%m-%d')
        curseur.execute("SELECT date_activit√©, charge FROM Historique_activit√© WHERE account_id = ? AND date_activit√© >= ? ORDER BY date_activit√© ASC", (account_id, cc_str))
        data_pour_graphique = curseur.fetchall()

        charge_aigue = sum(charges_aigue) if charges_aigue else 0
        #On prend le 2√®me √©l√©ment des data pour graphique pour avoir les charges et ne pas prendre les dates
        charge_chronique = sum([row[1] for row in data_pour_graphique]) / 4 if data_pour_graphique else 0
    except sqlite3.Error as e:
        messagebox.showerror("Erreur", "Erreur de base de donn√©es lors du calcul de charge d'entra√Ænement !")
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    parent_frame = ctk.CTkFrame(master=app, fg_color="transparent")
    parent_frame.pack(fill="both", expand=True, pady=10)

    boite_charge_entra√Ænement = ctk.CTkFrame(master=parent_frame, border_width=border2, border_color=couleur1, corner_radius=corner1,
                                             fg_color=couleur_fond)
    boite_charge_entra√Ænement.pack(fill="both", expand=True, side="left", padx=10, pady=(0, 10))
    h1_boite_charge_entra√Ænement = ctk.CTkFrame(master=boite_charge_entra√Ænement, fg_color=couleur_fond)
    h1_boite_charge_entra√Ænement.pack(pady=5)

    boite_analyse = ctk.CTkFrame(master=boite_charge_entra√Ænement, border_width=border2, border_color=couleur1, corner_radius=corner1, fg_color=couleur2)
    boite_analyse.pack(fill="both", expand=True, padx=15, pady=5)
    aigue = ctk.CTkFrame(master=boite_analyse, corner_radius=corner1, fg_color=couleur1)
    aigue.pack(fill="both", expand=True, padx=12, pady=(12, 5))
    chronique = ctk.CTkFrame(master=boite_analyse, corner_radius=corner1, fg_color=couleur1)
    chronique.pack(fill="both", expand=True, padx=12, pady=5)
    ratio_frame = ctk.CTkFrame(master=boite_analyse, corner_radius=corner1, fg_color=couleur1)
    ratio_frame.pack(fill="both", expand=True, padx=12, pady=(5, 12))

    boite_statut = ctk.CTkFrame(master=boite_charge_entra√Ænement, border_width=border2, border_color=couleur1, corner_radius=corner1, fg_color=couleur2)
    boite_statut.pack(fill="both", expand=True, padx=15, pady=(5, 15))
    h1_result_optimale = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    h1_result_optimale.pack(fill="both", expand=True, padx=12, pady=(12, 5))
    interpr√©tation = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    interpr√©tation.pack(fill="both", expand=True, padx=10, pady=5)
    conseil = ctk.CTkFrame(master=boite_statut, corner_radius=corner1, fg_color=couleur1)
    conseil.pack(fill="both", expand=True, pady=(5, 12), padx=12)
    
    boite = ctk.CTkFrame(master=parent_frame, border_width=border2, border_color=couleur1, corner_radius=corner1,
                                             fg_color=couleur_fond)
    boite.pack(fill="both", expand=True, side="right", padx=10, pady=(0, 10))
    graphique = ctk.CTkFrame(master=boite, corner_radius=corner1, fg_color="white")
    graphique.pack(fill="both", expand=True, padx=15, pady=(15, 12))
    info = ctk.CTkFrame(master=boite, corner_radius=corner1, fg_color=couleur1)
    info.pack(fill="both", expand=True, padx=15, pady=(0, 15))

    #rappel pour mettre le test a droite "anchor="w""
    h1 = ctk.CTkLabel(master=h1_boite_charge_entra√Ænement, font=(font_secondaire, taille2), text="Analyse")
    h1.pack(padx=10, pady=(5, 0))
    result_analyse = ctk.CTkLabel(master=aigue, text=f"Charge (7 jours) : {charge_aigue:.1f}", font=(font_principale , taille3),
                                    width=300, wraplength=280)
    result_analyse.pack(fill="both", expand=True, padx=10, pady=10)
    result_analyse2 = ctk.CTkLabel(master=chronique, text=f"Charge moyenne hebdo.\n(4 semaines) : {charge_chronique:.1f}", font=(font_principale, taille3),
                                    width=300, wraplength=280)
    result_analyse2.pack(fill="both", expand=True, padx=10, pady=10)
    pause = verifier_pause(account_id)
    if pause == "blessure":
        result_analyse3 = ctk.CTkLabel(master=ratio_frame, text="Ratio : actuellement en pause", font=(font_secondaire, taille2),
                        width=300, wraplength=280)
        result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
        cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="‚õëÔ∏è Mode blessure : suivi d√©sactiv√©", font=(font_principale, taille3),
                                        width=300, wraplength=280, text_color="#c60000")
        cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)           
        interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Tu es bless√© pour le moment", font=(font_principale, taille3),
                                    width=300, wraplength=280)
        interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)              
        conseil_statut = ctk.CTkLabel(master=conseil, text="Prends vraiment le temps de laisser ton corps se r√©g√©n√©rer en profondeur, afin de revenir encore plus fort que jamais.", font=(font_principale, taille3),
                                        width=300, wraplength=280)
        conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
    elif pause == "vacances":
        result_analyse3 = ctk.CTkLabel(master=ratio_frame, text="Ratio : actuellement en pause", font=(font_secondaire, taille2),
                        width=300, wraplength=280)
        result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
        cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üèñÔ∏è Mode vacances : pas d'analyse !", font=(font_principale, taille3),
                                        width=300, wraplength=280, text_color="#6AC100")
        cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)          
        interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Tu es actuellement en vacances.", font=(font_principale, taille3),
                                    width=300, wraplength=280)
        interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)               
        conseil_statut = ctk.CTkLabel(master=conseil, text="Profite de cette pause pour te ressourcer, appr√©cier les moments de d√©tente et les repas, et reviens encore plus motiv√© !", font=(font_principale, taille3),
                                        width=300, wraplength=280)
        conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
    elif pause == "suspendre":
        result_analyse3 = ctk.CTkLabel(master=ratio_frame, text="Ratio : actuellement en pause", font=(font_secondaire, taille2),
                        width=300, wraplength=280)
        result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
        cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üí§ Mode suspension activ√© : aucune analyse en cours.", font=(font_principale, taille3),
                                        width=300, wraplength=280, text_color="#6AC100")
        cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)
        interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Tes analyses sont temporairement en pause pendant ce mode.", font=(font_principale, taille3),
                                    width=300, wraplength=280)
        interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)
        conseil_statut = ctk.CTkLabel(master=conseil, text="Profite-en pour te reposer, on reprend les suivis d√®s ton retour √† l‚Äôentra√Ænement !", font=(font_principale, taille3),
                                        width=300, wraplength=280)
        conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
    else :
        if charge_chronique > 0:
            ratio = charge_aigue / charge_chronique
        else:
            ratio = None
        if ratio is not None:
            result_analyse3 = ctk.CTkLabel(master=ratio_frame, text=f"Ratio : {ratio:.2f}", font=(font_secondaire, taille2),
                            width=300, wraplength=280)
            result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
            if ratio < 0.5: 
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üõå R√©cup√©ration active", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#75B7DD")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Charge tr√®s basse. Tu laisse ton corps se reposer mais jusqu'√† quand !", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)                
                conseil_statut = ctk.CTkLabel(master=conseil, text="Fais une activit√© physique r√©guli√®re pour reprendre en main ton entra√Ænement et √©viter de perdre ton niveau actuel.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            elif 0.5 <= ratio <= 0.8:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üò¥ Sous-entra√Ænement", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#CBC500")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Tu es entrain de perdre du niveau, attention !", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                conseil_statut = ctk.CTkLabel(master=conseil, text="Tu pourrais augmenter l√©g√®rement l'intensit√© de tes entra√Ænements si tu veux basculer en mode maintien et stabiliser tes performances.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            elif 0.8 <= ratio <= 0.9:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üîÑ Maintien", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#00C073")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Charge adapt√©e pour conserver ton niveau", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                conseil_statut = ctk.CTkLabel(master=conseil, text="Allonge de 5 minutes tes s√©ances pour basculer en mode progression optimale et am√©liorer tes performances.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            elif 0.9 <= ratio <= 1.1:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üü¢ Progression optimale", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#00BA47")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Charge id√©ale pour am√©liorer tes performances", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                conseil_statut = ctk.CTkLabel(master=conseil, text="Continue comme √ßa pour progresser ! Garde cette m√™me r√©gularit√© dans tes entra√Ænements pour rester en mode progression optimale.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            elif 1.1 < ratio <= 1.3:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üí™ Progression √©l√©v√©e", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#99c800")#3d71a5
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Tu progresse vite mais fait attention aux blessures",
                                                    font=(font_principale, taille3), width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)                
                conseil_statut = ctk.CTkLabel(master=conseil, text="Surveille bien la fatigue de ton corps pour √©viter les blessures‚Äâ: en gardant cette charge deux semaines, le risque reste limit√©.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
            else:
                cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="‚ö†Ô∏è Surentra√Ænement", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#c60000")
                cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
                interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="Risque √©lev√© de blessure", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)                
                conseil_statut = ctk.CTkLabel(master=conseil, text="Prends 2 √† 3 jours de pause pour laisser ton corps r√©cup√©rer et r√©duire les risques de blessure.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
                conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)
        else:
            result_analyse3 = ctk.CTkLabel(master=ratio_frame, text="Ratio : 0.0", font=(font_secondaire, taille2),
                                                width=300, wraplength=280)
            result_analyse3.pack(fill="both", expand=True, padx=10, pady=10)
            cat√©gorie_statut = ctk.CTkLabel(master=h1_result_optimale, text="üö´ Donn√©es insuffisantes", font=(font_secondaire, taille2),
                                                width=300, wraplength=280, text_color="#c60000")
            cat√©gorie_statut.pack(fill="both", expand=True, padx=10, pady=10)             
            interpretation_statut = ctk.CTkLabel(master=interpr√©tation, text="L'interpr√©tation ne peut pas √™tre d√©termin√©e.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
            interpretation_statut.pack(fill="both", expand=True, padx=10, pady=10)                
            conseil_statut = ctk.CTkLabel(master=conseil, text="Fais une s√©ance de sport pour lancer les analyses et √©valuer ta charge actuelle.", font=(font_principale, taille3),
                                                width=300, wraplength=280)
            conseil_statut.pack(fill="both", expand=True, padx=10, pady=10)   
    try:   
        if data_pour_graphique:
            dates_graphique = [datetime.strptime(row[0], '%Y-%m-%d') for row in data_pour_graphique]
            charges_graphique = [row[1] for row in data_pour_graphique]

            fig, ax = plt.subplots(figsize=(12, 4))
            sns.lineplot(x=dates_graphique, y=charges_graphique, marker="o", color="black")

            ax.axhline(y=charge_chronique, color=couleur1, linestyle="--", label="Charge chronique")
            ax.set_title("√âvolution de la charge chronique")
            ax.set_xlabel("Date")
            ax.set_ylabel("Charge chronique")

            canvas = FigureCanvasTkAgg(fig, master=graphique)
            canvas.draw()
            canvas.get_tk_widget().pack(fill="both", expand=True , pady=15, padx=15)
        else:
            not_data = ctk.CTkFrame(master=graphique, corner_radius=corner1, fg_color=couleur1)
            not_data.pack(expand=True, fill="both", padx=10, pady=10)
            pas_de_donn√©es = ctk.CTkLabel(master=not_data, text="Pas assez de donn√©es pour afficher un graphique.\nAjoute quelques s√©ances d'entra√Ænement pour voir votre √©volution !",
                                          font=(font_secondaire, taille2), wraplength=525)
            pas_de_donn√©es.pack(padx=15, pady=15)
            button_creer_activite = ctk.CTkButton(master=not_data, text="‚ÑπÔ∏è  Aide", fg_color=couleur2, hover_color=couleur2_hover,
                                            corner_radius=corner2, height=button_height, font=(font_principale, taille3), text_color=couleur1,
                                            command=aide_ajout_activit√©)
            button_creer_activite.pack(padx=(20, 2), pady=20)
    except Exception as e:
        messagebox.showerror("Erreur", "Une erreur inattendu s'est produite, r√©essaye !")
    titre_c_quoi = ctk.CTkLabel(master=info, text="C'est quoi la charge d'entra√Ænement ?", font=(font_secondaire, taille2), wraplength=600)
    titre_c_quoi.pack(fill="both", expand=True, pady=(10, 10), padx=10)
    c_quoi = ctk.CTkLabel(master=info, 
                            text="La charge d'entra√Ænement sert √† optimiser ta progression sans te cramer, en trouvant le juste √©quilibre entre l'effort fourni et la r√©cup√©ration n√©cessaire. C'est ton meilleur ami pour √©viter les blessures et planifier tes s√©ances sportives intelligemment.",
                            font=(font_principale, taille3), wraplength=600)
    c_quoi.pack(fill="both", expand=True, padx=10, pady=(5, 10))
